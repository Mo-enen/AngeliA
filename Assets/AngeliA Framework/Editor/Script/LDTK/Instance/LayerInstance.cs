

namespace LdtkToAngeliA {
	[System.Serializable]
	public partial class LayerInstance {

		/// <summary>
		/// Layer definition identifier
		/// </summary>
		public string __identifier;

		/// <summary>
		/// Layer type (possible values: IntGrid, Entities, Tiles or AutoLayer)
		/// </summary>
		public string __type;

		/// <summary>
		/// Grid-based height
		/// </summary>
		public int __cHei;

		/// <summary>
		/// Grid-based width
		/// </summary>
		public int __cWid;

		/// <summary>
		/// Grid size
		/// </summary>
		public int __gridSize;

		/// <summary>
		/// Total layer X pixel offset, including both instance and definition offsets.
		/// </summary>
		public int __pxTotalOffsetX;

		/// <summary>
		/// Total layer Y pixel offset, including both instance and definition offsets.
		/// </summary>
		public int __pxTotalOffsetY;


		/// <summary>
		/// The definition UID of corresponding Tileset, if any.
		/// </summary>
		public int? __tilesetDefUid;

		/// <summary>
		/// The relative path to corresponding Tileset, if any.
		/// </summary>
		public string __tilesetRelPath;


		/// <summary>
		/// An array containing all tiles generated by Auto-layer rules. The array is already sorted
		/// in display order (ie. 1st tile is beneath 2nd, which is beneath 3rd etc.).<br/><br/>
		/// Note: if multiple tiles are stacked in the same cell as the result of different rules,
		/// all tiles behind opaque ones will be discarded.
		/// </summary>
		public TileInstance[] autoLayerTiles;

		public EntityInstance[] entityInstances;

		public TileInstance[] gridTiles;

		/// <summary>
		/// A list of all values in the IntGrid layer, stored from left to right, and top to bottom
		/// (ie. first row from left to right, followed by second row, etc). `0` means "empty cell"
		/// and IntGrid values start at 1. This array size is `__cWid` x `__cHei` cells.
		/// </summary>
		public int[] intGridCsv;

		/// <summary>
		/// Reference the Layer definition UID
		/// </summary>
		public int layerDefUid;

		/// <summary>
		/// Reference to the UID of the level containing this layer instance
		/// </summary>
		public int levelId;

		/// <summary>
		/// An Array containing the UIDs of optional rules that were enabled in this specific layer
		/// instance.
		/// </summary>
		public int[] optionalRules;

		/// <summary>
		/// This layer can use another tileset by overriding the tileset UID here.
		/// </summary>
		public int? overrideTilesetUid;

		/// <summary>
		/// X offset in pixels to render this layer, usually 0 (IMPORTANT: this should be added to
		/// the `LayerDef` optional offset, see `__pxTotalOffsetX`)
		/// </summary>
		public int pxOffsetX;

		/// <summary>
		/// Y offset in pixels to render this layer, usually 0 (IMPORTANT: this should be added to
		/// the `LayerDef` optional offset, see `__pxTotalOffsetY`)
		/// </summary>
		public int pxOffsetY;

		/// <summary>
		/// Layer instance visibility
		/// </summary>
		public bool visible;
	}
}

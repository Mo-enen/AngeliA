<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AngeliA Framework</name>
    </assembly>
    <members>
        <member name="T:AngeliA.ToolApplicationAttribute">
            <summary>
            If application with current assembly should be treat as a "tool" rather than "game"
            </summary>
        </member>
        <member name="T:AngeliA.IgnoreArtworkPixelsAttribute">
            <summary>
            Current application do not load pixel data from sheet
            </summary>
        </member>
        <member name="T:AngeliA.DefaultKeyboardGamekeyAttribute">
            <summary>
            Default keyboard binding for the given gamekey
            </summary>
            <param name="gamekey"></param>
            <param name="inputKey"></param>
        </member>
        <member name="M:AngeliA.DefaultKeyboardGamekeyAttribute.#ctor(AngeliA.Gamekey,AngeliA.KeyboardKey)">
            <summary>
            Default keyboard binding for the given gamekey
            </summary>
            <param name="gamekey"></param>
            <param name="inputKey"></param>
        </member>
        <member name="T:AngeliA.DefaultGamepadGamekeyAttribute">
            <summary>
            Default gamepad binding for the given gamekey
            </summary>
            <param name="gamekey"></param>
            <param name="inputKey"></param>
        </member>
        <member name="M:AngeliA.DefaultGamepadGamekeyAttribute.#ctor(AngeliA.Gamekey,AngeliA.GamepadKey)">
            <summary>
            Default gamepad binding for the given gamekey
            </summary>
            <param name="gamekey"></param>
            <param name="inputKey"></param>
        </member>
        <member name="T:AngeliA.EntityLayerCapacityAttribute">
            <summary>
            Max entity count for the layer
            </summary>
            <param name="layer"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:AngeliA.EntityLayerCapacityAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Max entity count for the layer
            </summary>
            <param name="layer"></param>
            <param name="capacity"></param>
        </member>
        <member name="T:AngeliA.RendererLayerCapacityAttribute">
            <summary>
            Max rendering cell count for the layer
            </summary>
            <param name="layer"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:AngeliA.RendererLayerCapacityAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Max rendering cell count for the layer
            </summary>
            <param name="layer"></param>
            <param name="capacity"></param>
        </member>
        <member name="T:AngeliA.GlobalGravityAttribute">
            <summary>
            The gravity value applys on all rigidbody
            </summary>
            <param name="gravity"></param>
        </member>
        <member name="M:AngeliA.GlobalGravityAttribute.#ctor(System.Int32)">
            <summary>
            The gravity value applys on all rigidbody
            </summary>
            <param name="gravity"></param>
        </member>
        <member name="T:AngeliA.EnablePlayerSystemAttribute">
            <summary>
            The current application use player system or not
            </summary>
        </member>
        <member name="T:AngeliA.BodySetAttribute">
            <summary>
            Treat specified sprites as bodyset for pose-characters
            </summary>
            <param name="name">The name of the bodyset</param>
        </member>
        <member name="M:AngeliA.BodySetAttribute.#ctor(System.String)">
            <summary>
            Treat specified sprites as bodyset for pose-characters
            </summary>
            <param name="name">The name of the bodyset</param>
        </member>
        <member name="T:AngeliA.CharacterAttribute">
            <summary>
            Attribute for character class
            </summary>
        </member>
        <member name="T:AngeliA.CharacterAttribute.DefaultSelectedPlayerAttribute">
            <summary>
            Make the character as default selected player
            </summary>
            <param name="priority"></param>
        </member>
        <member name="M:AngeliA.CharacterAttribute.DefaultSelectedPlayerAttribute.#ctor(System.Int32)">
            <summary>
            Make the character as default selected player
            </summary>
            <param name="priority"></param>
        </member>
        <member name="T:AngeliA.EntityAttribute">
            <summary>
            Attribute for entities
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.ExcludeInMapEditorAttribute">
            <summary>
            Do not show this entity inside the palette panel of map editor.
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.MapEditorGroupAttribute">
            <summary>
            Which map editor palette group should this entity in 
            </summary>
            <param name="groupName"></param>
            <param name="order"></param>
        </member>
        <member name="M:AngeliA.EntityAttribute.MapEditorGroupAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Which map editor palette group should this entity in 
            </summary>
            <param name="groupName"></param>
            <param name="order"></param>
        </member>
        <member name="T:AngeliA.EntityAttribute.LayerAttribute">
            <summary>
            Which layer should this entity spawn inside.
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:AngeliA.EntityAttribute.LayerAttribute.#ctor(System.Int32)">
            <summary>
            Which layer should this entity spawn inside.
            </summary>
            <param name="layer"></param>
        </member>
        <member name="T:AngeliA.EntityAttribute.CapacityAttribute">
            <summary>
            Spawn limit count of this entity 
            </summary>
            <param name="capacity"></param>
            <param name="preSpawn">Create this many instance of the entity when game initialize</param>
        </member>
        <member name="M:AngeliA.EntityAttribute.CapacityAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Spawn limit count of this entity 
            </summary>
            <param name="capacity"></param>
            <param name="preSpawn">Create this many instance of the entity when game initialize</param>
        </member>
        <member name="T:AngeliA.EntityAttribute.DontDespawnOutOfRangeAttribute">
            <summary>
            Do not despawn this entity when it's out of view rect
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.DontSpawnFromWorld">
            <summary>
            Do not spawn this entity when it's painted into the map
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.UpdateOutOfRangeAttribute">
            <summary>
            This entity will update when it's outside view rect
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.DontDrawBehindAttribute">
            <summary>
            This entity will not display on the behind layer
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.DontDestroyOnZChangedAttribute">
            <summary>
            This entity do not despawn when player enter another map layer
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.StageOrderAttribute">
            <summary>
            The order in which this entity gets updated in it's layer
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:AngeliA.EntityAttribute.StageOrderAttribute.#ctor(System.Int32)">
            <summary>
            The order in which this entity gets updated in it's layer
            </summary>
            <param name="order"></param>
        </member>
        <member name="T:AngeliA.EntityAttribute.RepositionWhenInactiveAttribute">
            <summary>
            When the entity despawn, reset the position in map. So next time it will be load from the position where it last appeared
            </summary>
            <param name="requireReposition">Disable reposition by setting this to False</param>
        </member>
        <member name="M:AngeliA.EntityAttribute.RepositionWhenInactiveAttribute.#ctor(System.Boolean)">
            <summary>
            When the entity despawn, reset the position in map. So next time it will be load from the position where it last appeared
            </summary>
            <param name="requireReposition">Disable reposition by setting this to False</param>
        </member>
        <member name="T:AngeliA.EntityAttribute.SpawnWithCheatCodeAttribute">
            <summary>
            Player can use "Spawn---" to spawn this entity to stage.
            </summary>
        </member>
        <member name="T:AngeliA.ItemDropAttribute`1">
            <summary>
            Register item drop for the entity, use ItemSystem.DropItemFor(Entity) to perform the item drop.
            </summary>
            <typeparam name="I">Which item does it drops</typeparam>
            <param name="dropChance">Probability of dropping this item. 0 means 0%, 1000 means 100%</param>
            <param name="dropCount">How many items does it drop at once</param>
        </member>
        <member name="M:AngeliA.ItemDropAttribute`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Register item drop for the entity, use ItemSystem.DropItemFor(Entity) to perform the item drop.
            </summary>
            <typeparam name="I">Which item does it drops</typeparam>
            <param name="dropChance">Probability of dropping this item. 0 means 0%, 1000 means 100%</param>
            <param name="dropCount">How many items does it drop at once</param>
        </member>
        <member name="T:AngeliA.ItemDropAttribute">
            <inheritdoc cref="T:AngeliA.ItemDropAttribute`1" />
        </member>
        <member name="M:AngeliA.ItemDropAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="T:AngeliA.ItemDropAttribute`1" />
        </member>
        <member name="T:AngeliA.ItemCombinationAttribute">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.ItemCombinationAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.ItemCombinationAttribute`1">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.ItemCombinationAttribute`1.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.ItemCombinationAttribute`2">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.ItemCombinationAttribute`2.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.ItemCombinationAttribute`3">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.ItemCombinationAttribute`3.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.ItemCombinationAttribute`4">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.ItemCombinationAttribute`4.#ctor(System.Int32,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.GlobalItemCombinationAttribute">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.GlobalItemCombinationAttribute.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.GlobalItemCombinationAttribute`1">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.GlobalItemCombinationAttribute`1.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.GlobalItemCombinationAttribute`2">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.GlobalItemCombinationAttribute`2.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.GlobalItemCombinationAttribute`3">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.GlobalItemCombinationAttribute`3.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.GlobalItemCombinationAttribute`4">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.GlobalItemCombinationAttribute`4.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.BasicItemCombinationAttribute">
            <summary>
            Define a item combination to craft the item.
            </summary>
            <param name="count">How many item does it craft at once</param>
            <param name="keepId0">Do not consume this item</param>
            <param name="keepId1">Do not consume this item</param>
            <param name="keepId2">Do not consume this item</param>
            <param name="keepId3">Do not consume this item</param>
            <param name="extraA">Use this if the item is not based on class</param>
            <param name="extraB">Use this if the item is not based on class</param>
            <param name="extraC">Use this if the item is not based on class</param>
            <param name="extraD">Use this if the item is not based on class</param>
            <param name="itemA">An item required to craft the result item</param>
            <param name="itemB">An item required to craft the result item</param>
            <param name="itemC">An item required to craft the result item</param>
            <param name="itemD">An item required to craft the result item</param>
        </member>
        <member name="M:AngeliA.BasicItemCombinationAttribute.#ctor(AngeliA.ItemCombinationParam,AngeliA.ItemCombinationParam,AngeliA.ItemCombinationParam,AngeliA.ItemCombinationParam,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Define a item combination to craft the item.
            </summary>
            <param name="count">How many item does it craft at once</param>
            <param name="keepId0">Do not consume this item</param>
            <param name="keepId1">Do not consume this item</param>
            <param name="keepId2">Do not consume this item</param>
            <param name="keepId3">Do not consume this item</param>
            <param name="extraA">Use this if the item is not based on class</param>
            <param name="extraB">Use this if the item is not based on class</param>
            <param name="extraC">Use this if the item is not based on class</param>
            <param name="extraD">Use this if the item is not based on class</param>
            <param name="itemA">An item required to craft the result item</param>
            <param name="itemB">An item required to craft the result item</param>
            <param name="itemC">An item required to craft the result item</param>
            <param name="itemD">An item required to craft the result item</param>
        </member>
        <member name="T:AngeliA.NoItemCombinationAttribute">
            <summary>
            Indicates to the system that this item does not require crafting combination
            </summary>
        </member>
        <member name="T:AngeliA.OnGameInitializeAttribute">
            <summary>
            The function will be called when game initialize.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameInitializeAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when game initialize.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameInitializeLaterAttribute">
            <summary>
            The function will be called when game initialize but after all [OnGameInitialize] functions already called
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameInitializeLaterAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when game initialize but after all [OnGameInitialize] functions already called
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.BeforeSavingSlotChanged">
            <summary>
            The function will be called before user change the saving slot. Universe.BuiltIn.CurrentSavingSlot is still the old value when this function is called.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.BeforeSavingSlotChanged.#ctor(System.Int32)">
            <summary>
            The function will be called before user change the saving slot. Universe.BuiltIn.CurrentSavingSlot is still the old value when this function is called.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnSavingSlotChanged">
            <summary>
            The function will be called after user change the saving slot. Universe.BuiltIn.CurrentSavingSlot is the new value when this function is called.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnSavingSlotChanged.#ctor(System.Int32)">
            <summary>
            The function will be called after user change the saving slot. Universe.BuiltIn.CurrentSavingSlot is the new value when this function is called.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameUpdateAttribute">
            <summary>
            The function will be called every time game update (60 times per second)
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameUpdateAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called every time game update (60 times per second)
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameUpdateLaterAttribute">
            <summary>
            The function will be called every time game update (60 times per second), but after all [OnGameUpdate] functions already called.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameUpdateLaterAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called every time game update (60 times per second), but after all [OnGameUpdate] functions already called.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameUpdatePauselessAttribute">
            <summary>
            The function will be called every time game update (60 times per second), even when the game is paused.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameUpdatePauselessAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called every time game update (60 times per second), even when the game is paused.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameRestartAttribute">
            <summary>
            The function will be called when game restart.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameRestartAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when game restart.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameTryingToQuitAttribute">
            <summary>
            The function will be called when player try to quit the game. Return false will stop the application from quiting.
            </summary>
            <example>internal static bool ExampleFunction () => true; </example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameTryingToQuitAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when player try to quit the game. Return false will stop the application from quiting.
            </summary>
            <example>internal static bool ExampleFunction () => true; </example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameQuittingAttribute">
            <summary>
            The function will be called before the application actually quit.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameQuittingAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called before the application actually quit.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameFocusedAttribute">
            <summary>
            The function will be called when the application window regain focus.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.OnGameLostFocusAttribute">
            <summary>
            The function will be called when the application window lost focus.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.OnWindowSizeChangedAttribute">
            <summary>
            The function will be called when user change the size of the application window
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.OnRemoteSettingChanged_IntID_IntDataAttribute">
            <summary>
            The function will be called when engine send remote message to rigged game
            </summary>
            <example>internal static void ExampleFunction (int id, int data) { }</example>
        </member>
        <member name="M:AngeliA.OnRemoteSettingChanged_IntID_IntDataAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when engine send remote message to rigged game
            </summary>
            <example>internal static void ExampleFunction (int id, int data) { }</example>
        </member>
        <member name="T:AngeliA.OnFileDropped_StringPathAttribute">
            <summary>
            The function will be called when user drag and drop a file into the application window
            </summary>
            <example>internal static void ExampleFunction (string filePath) { }</example>
        </member>
        <member name="T:AngeliA.OnMainSheetReloadAttribute">
            <summary>
            The function will be called when artwork sheet for rendering loaded from file
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.OnViewZChangedAttribute">
            <summary>
            The function will be called when player change the map layer
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.BeforeLayerFrameUpdate_IntLayerAttribute">
            <summary>
            The function will be called before rendering layer update
            </summary>
            <example>internal static void ExampleFunction (int layerIndex) { }</example>
        </member>
        <member name="T:AngeliA.AfterLayerFrameUpdate_IntLayerAttribute">
            <summary>
            The function will be called after rendering layer update 
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.BeforeFirstUpdateAttribute">
            <summary>
            The function will be called before any entity.FirstUpdate is called
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.BeforeBeforeUpdateAttribute">
            <summary>
            The function will be called before any entity.BeforeUpdate is called 
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.BeforeUpdateUpdateAttribute">
            <summary>
            The function will be called before any entity.Update is called 
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.BeforeLateUpdateAttribute">
            <summary>
            The function will be called before any entity.LateUpdate is called 
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.AfterLateUpdateAttribute">
            <summary>
            The function will be called after all entity.LateUpdate is called 
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.BeforeLevelRenderedAttribute">
            <summary>
            The function will be called before world squad rendering any level blocks for the current frame
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="M:AngeliA.BeforeLevelRenderedAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called before world squad rendering any level blocks for the current frame
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.AfterLevelRenderedAttribute">
            <summary>
            The function will be called after world squad render all level blocks for the current frame 
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="M:AngeliA.AfterLevelRenderedAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called after world squad render all level blocks for the current frame 
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.OnWorldCreatedBySquad_WorldAttribute">
            <summary>
            The function will be called when a world instance is created by world squad
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="M:AngeliA.OnWorldCreatedBySquad_WorldAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when a world instance is created by world squad
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.OnWorldLoadedBySquad_WorldAttribute">
            <summary>
            The function will be called when a world instance is loaded by world squad 
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="M:AngeliA.OnWorldLoadedBySquad_WorldAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when a world instance is loaded by world squad 
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.OnWorldSavedByMapEditor_WorldAttribute">
            <summary>
            The function will be called when a world instance is saved to file by the world squad
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.OnMapEditorModeChange_ModeAttribute">
            <summary>
            The function will be called when user change map editor editing mode
            </summary>
            <example>internal static void ExampleFunction (OnMapEditorModeChange_ModeAttribute.Mode mode) { }</example>
        </member>
        <member name="F:AngeliA.OnMapEditorModeChange_ModeAttribute.Mode.EnterPlayMode">
            <summary>
            Edit mode to play mode. After map editor internal logic is done
            </summary>
        </member>
        <member name="F:AngeliA.OnMapEditorModeChange_ModeAttribute.Mode.ExitPlayMode">
            <summary>
            Play mode to edit mode. Before map editor internal logic is done
            </summary>
        </member>
        <member name="F:AngeliA.OnMapEditorModeChange_ModeAttribute.Mode.EnterEditMode">
            <summary>
            Play mode to edit mode. After map editor internal logic is done
            </summary>
        </member>
        <member name="F:AngeliA.OnMapEditorModeChange_ModeAttribute.Mode.ExitEditMode">
            <summary>
            Edit mode to play mode. Before map editor internal logic is done
            </summary>
        </member>
        <member name="T:AngeliA.OnLanguageChangedAttribute">
            <summary>
            The function will be called when user change game display language. Language.CurrentLanguage is already set to new value when this function is called.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.CheatCodeAttribute">
            <summary>
            The function will be called when user perform the given cheat code. Cheat code can be perform like those in NES games.
            </summary>
            <example>internal static void ExampleFunction (string code) { }</example>
        </member>
        <member name="M:AngeliA.CheatCodeAttribute.#ctor(System.String)">
            <summary>
            The function will be called when user perform the given cheat code. Cheat code can be perform like those in NES games.
            </summary>
            <example>internal static void ExampleFunction (string code) { }</example>
        </member>
        <member name="T:AngeliA.OnCheatPerformed_StringCodeAttribute">
            <summary>
            The function will be called when user performed any cheat code. Cheat code can be perform like those in NES games.
            </summary>
            <example>internal static void ExampleFunction (string code) { }</example>
        </member>
        <member name="T:AngeliA.OnItemCollected_Entity_Int2Pos_IntItemID_IntItemCountAttribute">
            <summary>
            The function will be called when a character collect an item
            </summary>
            <example>internal static void ExampleFunction (Entity holder, Int2 pos, int itemID, int itemCount) { }</example>
        </member>
        <member name="T:AngeliA.OnItemLost_Character_IntItemIDAttribute">
            <summary>
            The function will be called when a character lost an item
            </summary>
            <example>internal static void ExampleFunction (Character holder, int itemID) { }</example>
        </member>
        <member name="T:AngeliA.OnItemError_Entity_Int2Pos_IntIconID">
            <summary>
            The function will be called when something wrong about an item (like when guns out of ammo)
            </summary>
            <example>internal static void ExampleFunction (Entity holder, Int2 pos, int iconID) { }</example>
        </member>
        <member name="T:AngeliA.OnItemDamage_Character_IntItemBefore_IntItemAfterAttribute">
            <summary>
            The function will be called when an item is damaged into another item
            </summary>
            <example>internal static void ExampleFunction (Character holder, int itemIdBefore, int itemIdAfter) { }</example>
        </member>
        <member name="T:AngeliA.OnItemUnlocked_IntItemIDAttribute">
            <summary>
            The function will be called when an item is unlocked by player
            </summary>
            <example>internal static void ExampleFunction (int itemID) { }</example>
        </member>
        <member name="T:AngeliA.OnCharacterFootStepped_Entity">
            <summary>
            The function will be called when a character makes a foot step on running
            </summary>
            <example>internal static void ExampleFunction (Entity character) { }</example>
        </member>
        <member name="T:AngeliA.OnCharacterSleeping_Entity">
            <summary>
            The function will be called when a character is sleeping
            </summary>
            <example>internal static void ExampleFunction (Entity character) { }</example>
        </member>
        <member name="T:AngeliA.OnCharacterJump_Entity">
            <summary>
            The function will be called when a character jumps
            </summary>
            <example>internal static void ExampleFunction (Entity character) { }</example>
        </member>
        <member name="T:AngeliA.OnCharacterPound_Entity">
            <summary>
            The function will be called when a character ground pound
            </summary>
            <example>internal static void ExampleFunction (Entity character) { }</example>
        </member>
        <member name="T:AngeliA.OnCharacterFly_Entity">
            <summary>
            The function will be called when a character fly
            </summary>
            <example>internal static void ExampleFunction (Entity character) { }</example>
        </member>
        <member name="T:AngeliA.OnCharacterSlideStepped_Entity">
            <summary>
            The function will be called when a character makes a step when sliding
            </summary>
            <example>internal static void ExampleFunction (Entity character) { }</example>
        </member>
        <member name="T:AngeliA.OnCharacterPassOut_Entity">
            <summary>
            The function will be called when a character pass out
            </summary>
            <example>internal static void ExampleFunction (Entity character) { }</example>
        </member>
        <member name="T:AngeliA.OnCharacterTeleport_Entity">
            <summary>
            The function will be called when a character teleport
            </summary>
            <example>internal static void ExampleFunction (Entity character) { }</example>
        </member>
        <member name="T:AngeliA.OnCharacterCrash_Entity">
            <summary>
            The function will be called when a character crash
            </summary>
            <example>internal static void ExampleFunction (Entity character) { }</example>
        </member>
        <member name="T:AngeliA.OnObjectBreak_IntSpriteID_IRectAttribute">
            <summary>
            The function will be called when an object break
            </summary>
            <example>internal static void ExampleFunction (int spriteID, IRect rectPosition) { }</example>
        </member>
        <member name="T:AngeliA.OnObjectFreeFall_IntSpriteID_Int2Pos_IntRot_BoolFlip_Int2Velocity_IntRotSpeed_IntGravityAttribute">
            <summary>
            The function will be called when an object start to free fall
            </summary>
            <example>internal static void ExampleFunction (int spriteID, Int2 pos, int startRotation, bool flip, Int2 velocity, int rotationSpeed, int gravity) { }</example>
        </member>
        <member name="T:AngeliA.OnBlockPicked_IntSpriteID_IRectAttribute">
            <summary>
            The function will be called when a map block has been picked
            </summary>
            <example>internal static void ExampleFunction (int spriteID, IRect rectPosition) { }</example>
        </member>
        <member name="T:AngeliA.OnFallIntoWater_Rigidbody_EntityAttribute">
            <summary>
            The function will be called when a rigidbody fall into water
            </summary>
            <example>internal static void ExampleFunction (Rigidbody rig, Entity water) { }</example>
        </member>
        <member name="T:AngeliA.OnCameOutOfWater_Rigidbody_EntityAttribute">
            <summary>
            The function will be called when a rigidbody came out of water
            </summary>
            <example>internal static void ExampleFunction (Rigidbody rig, Entity water) { }</example>
        </member>
        <member name="T:AngeliA.OnDealDamage_Damage_IDamageReceiver">
            <summary>
            The function will be called when something deal damage to a damage-receiver
            </summary>
            <example>internal static void ExampleFunction (Damage damage, IDamageReceiver receiver) { }</example>
        </member>
        <member name="T:AngeliA.OnBulletHitEnvironment_Bullet">
            <summary>
            The function will be called when a bullet hit environment (something not an IDamageReceiver)
            </summary>
            <example>internal static void ExampleFunction (Bullet bullet) { }</example>
        </member>
        <member name="T:AngeliA.OnTransferArrivedAttribute_IntEntityID_Int3UnitPos_ObjectData">
            <summary>
            The function will be called when message from TransferSystem.StartTransfer() arrived
            </summary>
            <example>internal static void ExampleFunction (int receiverID, Int3 unitPosition, object userData) { }</example>
        </member>
        <member name="T:AngeliA.OnTransferPassAttribute_Int3UnitPos_ObjectData">
            <summary>
            The function will be called when message from TransferSystem.StartTransfer() pass through
            </summary>
            <example>internal static void ExampleFunction (Int3 unitPos, object userData) { }</example>
        </member>
        <member name="T:AngeliA.CircuitOperate_Int3UnitPos_IntStamp_Direction5From">
            <summary>
            The function will be called when CircuitSystem triggers the entity that holds this function
            </summary>
            <example>internal static void ExampleFunction (Int3 unitPos, int stamp, Direction5 from) { }</example>
        </member>
        <member name="T:AngeliA.OnCircuitWireActived_Int3UnitPosAttribute">
            <summary>
            The function will be called when CircuitSystem's electric current pass through
            </summary>
            <example>internal static void ExampleFunction (Int3 unitPos) { }</example>
        </member>
        <member name="T:AngeliA.EventAttribute">
            <summary>
            Attribute for link all static methods with a System.Action. When the action is invoked, all methods get called.
            </summary>
        </member>
        <member name="M:AngeliA.EventAttribute.#ctor(System.Int32)">
            <summary>
            Attribute for link all static methods with a System.Action. When the action is invoked, all methods get called.
            </summary>
        </member>
        <member name="T:AngeliA.OrderedAttribute">
            <summary>
            Attribute apply to method and call all of them in given order
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:AngeliA.OrderedAttribute.#ctor(System.Int32)">
            <summary>
            Attribute apply to method and call all of them in given order
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:AngeliA.OrderedAttribute.InvokeAsAutoOrderingTask``1">
            <summary>
            Call all static methods in order with given type of attribute
            </summary>
        </member>
        <member name="T:AngeliA.CharacterAttackness">
            <summary>
            Behavour class that handle attack logic for character
            </summary>
        </member>
        <member name="M:AngeliA.CharacterAttackness.#ctor(AngeliA.Character)">
            <summary>
            Behavour class that handle attack logic for character
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.TargetCharacter">
            <summary>
            Character hosting this attackness
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.AimingDirection">
            <summary>
            Which direction does the character attacks
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.IsAttacking">
            <summary>
            True if the character is attacking at the current frame
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.IsAttackIgnored">
            <summary>
            True if the character is not allow to attack at the current frame
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.IsChargingAttack">
            <summary>
            True if the character is charging attack at the current frame
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.LastAttackFrame">
            <summary>
            The start frame of the last attack
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.AttackChargeStartFrame">
            <summary>
            The start frame of the last attack charging
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.LastAttackCharged">
            <summary>
            True if the last performed attack is charged
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.AttackStyleIndex">
            <summary>
            Attack style index of the current attack, indicate what kind of rendering style should be apply to the current attack
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.AttackStartFacingRight">
            <summary>
            True if character facing right when the current attack start
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.AttackDuration">
            <summary>
            How many frames should be the current attack last
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.AttackCooldown">
            <summary>
            How many frames should be wait from the prev attack end to the next attack start
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.MinimalChargeAttackDuration">
            <summary>
            Charge attack longer than this frame should be count as attack charged
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.RepeatAttackWhenHolding">
            <summary>
            True if the character can hold attack button to keep attacking multiple times
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.HoldingAttack">
            <summary>
            True if the character is holding attack button
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.LockFacingOnAttack">
            <summary>
            True if the character can not change it's facing direction when attacking
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackComboGap">
            <summary>
            Attack happens between this many frames should be combo attacks
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.HoldAttackPunishFrame">
            <summary>
            If hold attack button to perform multiple attacks, the cooldown will be add this frames longer
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.CancelAttackOnJump">
            <summary>
            When character jumps, unfinished attack will be cancel
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.DefaultSpeedRateOnAttack">
            <summary>
            Moving speed will be mutiply be this rate when character is attacking (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AirSpeedRateOnAttack">
            <summary>
            Moving speed will be mutiply be this rate when character is attacking while not grounded (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.WalkingSpeedRateOnAttack">
            <summary>
            Moving speed will be mutiply be this rate when character is attacking while walking (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.RunningSpeedRateOnAttack">
            <summary>
            Moving speed will be mutiply be this rate when character is attacking while running (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackInAir">
            <summary>
            Allow character attack when not grounded
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackInWater">
            <summary>
            Allow character attack when inside water
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenWalking">
            <summary>
            Allow character attack when walking
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenRunning">
            <summary>
            Allow character attack when running
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenClimbing">
            <summary>
            Allow character attack when climbing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenFlying">
            <summary>
            Allow character attack when flying
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenRolling">
            <summary>
            Allow character attack when rolling
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenSquatting">
            <summary>
            Allow character attack when squatting
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenDashing">
            <summary>
            Allow character attack when dashing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenSliding">
            <summary>
            Allow character attack when sliding
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenGrabbing">
            <summary>
            Allow character attack when grabbing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenRush">
            <summary>
            Allow character attack when rushing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenPounding">
            <summary>
            Allow character attack when pounding
            </summary>
        </member>
        <member name="M:AngeliA.CharacterAttackness.OnActivated">
            <summary>
            Callback for character entity get activated
            </summary>
        </member>
        <member name="M:AngeliA.CharacterAttackness.PhysicsUpdate_Attack">
            <summary>
            Callback for update the attackness
            </summary>
        </member>
        <member name="M:AngeliA.CharacterAttackness.Attack(System.Boolean,System.Boolean)">
            <summary>
            Perform an attack
            </summary>
            <param name="facingRight">True if the attack is performed when character facing right</param>
            <param name="charged">True if the attack is charged</param>
            <returns></returns>
        </member>
        <member name="M:AngeliA.CharacterAttackness.CancelAttack">
            <summary>
            Cancel current performing attack
            </summary>
        </member>
        <member name="M:AngeliA.CharacterAttackness.IgnoreAimingDirection(AngeliA.Direction8,System.Int32)">
            <summary>
            Do not allow aiming at given direction for specified frames
            </summary>
        </member>
        <member name="M:AngeliA.CharacterAttackness.IsAimingDirectionIgnored(AngeliA.Direction8)">
            <summary>
            True if the given aiming direction is currently ignored
            </summary>
        </member>
        <member name="M:AngeliA.CharacterAttackness.IgnoreAttack(System.Int32)">
            <summary>
            Do not allow attack for specified frames
            </summary>
        </member>
        <member name="M:AngeliA.CharacterAttackness.CancelIgnoreAttack">
            <summary>
            Allowing attack which ignored by IgnoreAttack function
            </summary>
        </member>
        <member name="T:AngeliA.SummonAttackness">
            <summary>
            Behavour class that handle attack logic for summon type character
            </summary>
        </member>
        <member name="M:AngeliA.SummonAttackness.#ctor(AngeliA.Character)">
            <summary>
            Behavour class that handle attack logic for summon type character
            </summary>
        </member>
        <member name="T:AngeliA.Buff">
            <summary>
            Represent a type of buff
            </summary>
        </member>
        <member name="P:AngeliA.Buff.TypeID">
            <summary>
            Unique angehash of this buff class
            </summary>
        </member>
        <member name="P:AngeliA.Buff.NameID">
            <summary>
            Unique angehash for language system to get the display name of this buff
            </summary>
        </member>
        <member name="P:AngeliA.Buff.DescriptionID">
            <summary>
            Unique angehash for language system to get the description of this buff
            </summary>
        </member>
        <member name="P:AngeliA.Buff.TypeName">
            <summary>
            AngeName of this type of buff
            </summary>
        </member>
        <member name="P:AngeliA.Buff.DefaultDuration">
            <summary>
            How many frames should this buff apply by default
            </summary>
        </member>
        <member name="T:AngeliA.CharacterBuff">
            <summary>
            Behavour class that handles buff logic for characters
            </summary>
        </member>
        <member name="P:AngeliA.CharacterBuff.BuffCount">
            <summary>
            Total count for all buff the character is having
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.HasBuff(System.Int32)">
            <summary>
            True if the character is having the given buff
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.GiveBuff(System.Int32,System.Int32)">
            <summary>
            Give the character given buff for specified frames long
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.ClearBuff(System.Int32)">
            <summary>
            Remove the given buff from character
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.ClearAllBuffs">
            <summary>
            Remove all buff from character
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.PreventBuff(System.Int32,System.Int32)">
            <summary>
            Do not allow the character have given buff for specified frames
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.IsBuffPrevented(System.Int32)">
            <summary>
            True if the given buff is being prevented
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.GetBuffData(System.Int32)">
            <summary>
            Get the user data of the given buff from the character
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.SetBuffData(System.Int32,System.Object)">
            <summary>
            Set user data of the given buff to the character
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.GetBuffEndFrame(System.Int32)">
            <summary>
            Get which frame does the given buff ends
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.ForAllBuffs">
            <summary>
            Iterate thought all buffs this character currently have
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.GetBuffDisplayName(System.Int32)">
            <summary>
            Get display name of the given buff from the language system
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.GetBuffDescription(System.Int32)">
            <summary>
            Get description of the given buff from the language system
            </summary>
        </member>
        <member name="T:AngeliA.CharacterHealth">
            <summary>
            Behavour class that handle health logic for character
            </summary>
        </member>
        <member name="P:AngeliA.CharacterHealth.HP">
            <summary>
            Current health point of the character
            </summary>
        </member>
        <member name="P:AngeliA.CharacterHealth.LastDamageFrame">
            <summary>
            The frame when character took damage last time
            </summary>
        </member>
        <member name="P:AngeliA.CharacterHealth.InvincibleEndFrame">
            <summary>
            The frame when character's invincibility ends
            </summary>
        </member>
        <member name="P:AngeliA.CharacterHealth.IsFullHealth">
            <summary>
            True if the character is full of health
            </summary>
        </member>
        <member name="P:AngeliA.CharacterHealth.IsEmptyHealth">
            <summary>
            True if the character have no health point
            </summary>
        </member>
        <member name="P:AngeliA.CharacterHealth.IsInvincible">
            <summary>
            True if the character is currently invincible
            </summary>
        </member>
        <member name="P:AngeliA.CharacterHealth.TakingDamage">
            <summary>
            True if the character is currently taking damage
            </summary>
        </member>
        <member name="F:AngeliA.CharacterHealth.MaxHP">
            <summary>
            Upper limit of the HP
            </summary>
        </member>
        <member name="F:AngeliA.CharacterHealth.InvincibleDuration">
            <summary>
            How many frames does the character's Invincibility last
            </summary>
        </member>
        <member name="F:AngeliA.CharacterHealth.DamageStunDuration">
            <summary>
            How many frames does the character stun when they take damage
            </summary>
        </member>
        <member name="F:AngeliA.CharacterHealth.KnockbackSpeed">
            <summary>
            How fast should the character get knock back when they take damage
            </summary>
        </member>
        <member name="F:AngeliA.CharacterHealth.KnockbackDeceleration">
            <summary>
            Movement deceleration when the character is knocking back after take damage
            </summary>
        </member>
        <member name="F:AngeliA.CharacterHealth.InvincibleOnDash">
            <summary>
            Should character be invincible when dashing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterHealth.InvincibleOnRush">
            <summary>
            Should character be invincible when rushing
            </summary>
        </member>
        <member name="M:AngeliA.CharacterHealth.OnActivated">
            <summary>
            Callback when character entity get activated
            </summary>
        </member>
        <member name="M:AngeliA.CharacterHealth.Heal(System.Int32)">
            <summary>
            Add given amount of HP for the character
            </summary>
            <returns>True when character get healed</returns>
        </member>
        <member name="M:AngeliA.CharacterHealth.MakeInvincible(System.Int32)">
            <summary>
            Let the character become invincible for given frames
            </summary>
        </member>
        <member name="T:AngeliA.CharacterMovement">
            <summary>
            Behavour class that handle movement logic for character
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.#ctor(AngeliA.Rigidbody)">
            <summary>
            Behavour class that handle movement logic for character
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.MovementWidth">
            <summary>
            Default with of the character
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.MovementHeight">
            <summary>
            Default height of the character
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.WalkAvailable">
            <summary>
            Allow character to walk
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.WalkSpeed">
            <summary>
            How fast should the character walk
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.WalkAcceleration">
            <summary>
            Speed acceleration when character is walking
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.WalkBrakeAcceleration">
            <summary>
            Speed acceleration when character is trying to walk to the opposite direction
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.WalkDeceleration">
            <summary>
            Speed deceleration when character is walking
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RunAvailable">
            <summary>
            Allow character to run
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RunSpeed">
            <summary>
            How fast should the character run
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RunAcceleration">
            <summary>
            Speed acceleration when character is running
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RunBrakeAcceleration">
            <summary>
            Speed acceleration when character is trying to run to the opposite direction
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RunDeceleration">
            <summary>
            Speed deceleration when character is running
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.JumpCount">
            <summary>
            How many times can the character jump without touching ground
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.JumpSpeed">
            <summary>
            Initial speed when character start to jump
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.JumpReleaseSpeedRate">
            <summary>
            When character stop trying to jump (player release the jump button), and the character is still moving up, then the current speed will be multiply to this rate (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.JumpRiseGravityRate">
            <summary>
            Gravity applys on the character will multiply this rate when character moving up in air (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.JumpBoostFromMoveRate">
            <summary>
            When character start jump, if it's moving, the running speed will multiply this rate and add into the initial jump speed. (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FirstJumpWithRoll">
            <summary>
            When character jump from ground, does it jump with rolling in air
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SubsequentJumpWithRoll">
            <summary>
            When character jump from air, does it jump with rolling in air
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.JumpBreakRush">
            <summary>
            Allow character jump when rushing and stop the rush
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.JumpBreakDash">
            <summary>
            Allow character jump when dashing and stop the dash
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.AllowSquatJump">
            <summary>
            Allow character jump when squatting, and keep squatting when jump in air
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.JumpDownThroughOneway">
            <summary>
            Allow character jump down and go through oneway gate (player holding down button and press jump button once)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SquatAvailable">
            <summary>
            Allow character to squat
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SquatHeightAmount">
            <summary>
            Character hitbox height multiply this rate when squatting (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SquatMoveSpeed">
            <summary>
            Move speed when character squatting, set to 0 when not allow squat move
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SquatAcceleration">
            <summary>
            Movement acceleration when squat moving
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SquatDeceleration">
            <summary>
            Movement deceleration when squat moving
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.DashAvailable">
            <summary>
            Allow character to dash (player hold down button and press jump button for once)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.DashHeightAmount">
            <summary>
             Character hitbox height multiply this rate when dashing (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.DashWithRoll">
            <summary>
            Character roll when dashing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.DashPutoutFire">
            <summary>
            Allow character dash through fire to put it out
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.DashSpeed">
            <summary>
            Movement speed for dashing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.DashDuration">
            <summary>
            How many frames does dash last
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.DashCooldown">
            <summary>
            Frames length between prev dash end and next dash start
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.DashAcceleration">
            <summary>
            Speed acceleration when dashing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.DashCancelLoseRate">
            <summary>
            Speed multiply this rate when dash being cancel (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushAvailable">
            <summary>
            Allow character to rush
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushHeightAmount">
            <summary>
             Character hitbox height multiply this rate when rushing (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushInAir">
            <summary>
            Allow character rush when not grounded
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushInWater">
            <summary>
            Allow character rush when inside water
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushWhenClimb">
            <summary>
            character rush when climb
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushWhenSquat">
            <summary>
            character rush when squat
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushPutoutFire">
            <summary>
            Allow character rush through fire to put it out
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushSpeed">
            <summary>
            Movement speed when rushing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushStopSpeed">
            <summary>
            Movement speed when rush end
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushDuration">
            <summary>
            How many frames does rush last
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushStiff">
            <summary>
            How many frames does character not allow to move after rush end
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushCooldown">
            <summary>
            How many frames does character has to wair after prev rush end to rush again
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushAcceleration">
            <summary>
            Speed acceleration when rushing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushDeceleration">
            <summary>
            Speed deceleration when rushing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SlipAvailable">
            <summary>
            Allow character slip when run on slippery ground
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SlipAcceleration">
            <summary>
            Speed acceleration when moving on slippery ground
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SlipDeceleration">
            <summary>
            Speed deceleration when moving on slippery ground
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.PoundAvailable">
            <summary>
            Allow character ground pound in air (player press down button in air)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.PoundPutoutFire">
            <summary>
            Allow character pound on fire to put it out
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.PoundSpeed">
            <summary>
            Movement speed when pounding
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SwimAvailable">
            <summary>
            Allow character swim in water
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.InWaterSpeedRate">
            <summary>
            When character inside water, the movement speed will multiply this rate (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SwimWidthAmount">
            <summary>
             Character hitbox width multiply this rate when swimming (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SwimHeightAmount">
            <summary>
             Character hitbox height multiply this rate when swimming (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SwimSpeed">
            <summary>
            Movement speed when character swimming
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SwimJumpSpeed">
            <summary>
            Movement speed when character jump inside water
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SwimAcceleration">
            <summary>
            Speed acceleration when chracter inside water
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SwimDeceleration">
            <summary>
            Speed deceleration when chracter inside water
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.ClimbAvailable">
            <summary>
            Allow character to climb
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.AllowJumpWhenClimbing">
            <summary>
            Allow character jump when climbing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.ClimbSpeedX">
            <summary>
            Horizontal speed when climbing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.ClimbSpeedY">
            <summary>
            Vertical speed when climbing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyAvailable">
            <summary>
            Allow character to fly (player press jump button when no jump count left)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyHeightAmount">
            <summary>
            Character hitbox height multiply this rate when flying (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GlideOnFlying">
            <summary>
            When glide flying, character always move to the direction it facing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyCooldown">
            <summary>
            Character has to wait this many frames to fly again
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyRiseSpeed">
            <summary>
            Initial speed when fly start
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyGravityRiseRate">
            <summary>
            Gravity multiply this rate when flying and moving up (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyGravityFallRate">
            <summary>
            Gravity multiply this rate when flying and moving down (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyFallSpeed">
            <summary>
            Fall down speed shen flying
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyMoveSpeed">
            <summary>
            Horizontal move speed when flying
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyAcceleration">
            <summary>
            Speed acceleration when flying
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyDeceleration">
            <summary>
            Speed deceleration when flying
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SlideAvailable">
            <summary>
            Allow character to slide on wall
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SlideOnAnyBlock">
            <summary>
            Allow character to slide on all type of blocks
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.ResetJumpCountWhenSlide">
            <summary>
            Set jump count to 0 when slide
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SlideJumpKickSpeed">
            <summary>
            Horizontal initial speed when character jump when slide
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SlideDropSpeed">
            <summary>
            Drop down speed when sliding
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabTopAvailable">
            <summary>
            Allow character grab on the bottom of blocks with Tag.GrabTop
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabSideAvailable">
            <summary>
            Allow character grab on the side of blocks with Tag.GrabSide
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabTopHeightAmount">
            <summary>
            Character hitbox height multiply this rate when top-grabbing (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabSideHeightAmount">
            <summary>
            Character hitbox height multiply this rate when side-grabbing (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.ResetJumpCountWhenGrab">
            <summary>
            Set jump count to 0 when character grabbing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabFlipThroughDownAvailable">
            <summary>
            Allow character to flip through block downward (player press down when standing on top-grabable blocks)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabFlipThroughUpAvailable">
            <summary>
            Allow character to flip through block upward (player press up when top-grabbing)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabFlipThroughDuration">
            <summary>
            How long does flip through takes in frames
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabMoveSpeedX">
            <summary>
            Horizontal move speed when top-grabbing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabMoveSpeedY">
            <summary>
             Vertical move speed when side-grabbing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabSideJumpKickSpeed">
            <summary>
            Horizontal initial speed when character jump when side-grabbing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.CrashAvailable">
            <summary>
            Allow character crash
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.CrashWhenSlippy">
            <summary>
            Make character crash when running too long on slippery ground or rush on slippery ground
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.CrashDuration">
            <summary>
            How many frames does it takes for one crash
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.CrashRunDurationRequire">
            <summary>
            How many frames does it takes to make character crash
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.CrashDeceleration">
            <summary>
            Speed deceleration when character crashing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.PushAvailable">
            <summary>
            Allow character push other rigidbody
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.PushSpeed">
            <summary>
            Movement speed when character pushing
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastMoveDirection">
            <summary>
            Direction for last movement
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IntendedX">
            <summary>
            1 if character want to move right, -1 for left
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IntendedY">
            <summary>
            1 if character want to move up, -1 for down
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.CurrentJumpCount">
            <summary>
            How many times does character jumps after touching ground
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.FacingRight">
            <summary>
            True if character currently facing right
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.FacingFront">
            <summary>
            True if character currently facing front
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.ShouldRun">
            <summary>
            True if character want to run instead of walk when move
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.SyncFromConfigFile">
            <summary>
            Does movement config sync with json file in game universe folder
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastGroundFrame">
            <summary>
            Last frame when character start touching ground
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastGroundingFrame">
            <summary>
            Last frame when character is touching ground
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastStartMoveFrame">
            <summary>
            Last frame when character start to move
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastEndMoveFrame">
            <summary>
            Last frame when character moving ends
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastJumpFrame">
            <summary>
            Last frame when character start to jump
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastClimbFrame">
            <summary>
            Last frame when character climb
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastDashFrame">
            <summary>
            Last frame when character start to dash
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastRushStartFrame">
            <summary>
            Last frame when character start to rush
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastCrashFrame">
            <summary>
            Last frame when character crash
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastSlippyMoveStartFrame">
            <summary>
            Last frame when character start to move on slippery ground
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastSquatStartFrame">
            <summary>
            Last frame when character start to squat
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastSquattingFrame">
            <summary>
            Last frame when character is squatting
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastPoundingFrame">
            <summary>
            Last frame when character is pounding
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastSlidingFrame">
            <summary>
            Last frame when character is sliding on wall
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastGrabbingFrame">
            <summary>
            Last frame when character is grabbing
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastFlyFrame">
            <summary>
            Last frame when character start to fly
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastGrabFlipUpFrame">
            <summary>
            Last frame when character start to grab flip upward
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastGrabFlipDownFrame">
            <summary>
            Last frame when character start to grab flip downward
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastGrabCancelFrame">
            <summary>
            Last frame when character stop grabbing
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastStartRunFrame">
            <summary>
            Last frame when character start to run
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastFacingChangeFrame">
            <summary>
            Last frame when character change horizontal facing
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.MovementState">
            <summary>
            Current movement type
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsGrabFlipping">
            <summary>
            True if character flipping through blocks
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsGrabFlippingUp">
            <summary>
            True if character flipping through blocks upward
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsGrabFlippingDown">
            <summary>
            True if character flipping through blocks downward
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsMoving">
            <summary>
            True if character is moving
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsWalking">
            <summary>
            True if character is walking
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsRunning">
            <summary>
            True if character is running
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsRolling">
            <summary>
            True if character is rolling
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsDashing">
            <summary>
            True if character is dashing
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsRushing">
            <summary>
            True if character is rushing
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsCrashing">
            <summary>
            True if character is crashing
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsSquatting">
            <summary>
            True if character is squatting
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsPounding">
            <summary>
            True if character is pounding
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsClimbing">
            <summary>
            True if character is climbing
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsFlying">
            <summary>
            True if character is flying
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsSliding">
            <summary>
            True if character is sliding on wall
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsGrabbingTop">
            <summary>
            True if character is top-grabbing
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsGrabbingSide">
            <summary>
            True if character is side-grabbing
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.ReloadMovementConfigFromFile">
            <summary>
            Load movement data from json file inside game universe folder
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.Move(AngeliA.Direction3,AngeliA.Direction3,System.Boolean)">
            <summary>
            Move the character
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="walk">True if character want to walk instead of run</param>
        </member>
        <member name="M:AngeliA.CharacterMovement.Stop">
            <summary>
            Stop current movement
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.HoldJump(System.Boolean)">
            <summary>
            Is character holding jump (call this every frame no matter character is jumpping or not)
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.Jump(System.Boolean)">
            <summary>
            Perform jump (call this once when jump start)
            </summary>
            <param name="isSquatJump">Is this jump a squat jump or not</param>
        </member>
        <member name="M:AngeliA.CharacterMovement.Dash">
            <summary>
            Perform dash (call this once when dash start)
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.StopDash">
            <summary>
            Stop current dashing 
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.Pound">
            <summary>
            Perform pound (call this once when pound start)
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.Rush">
            <summary>
            Perform rush (call this once when rush start)
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.StopRush">
            <summary>
            Stop current rush
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.Crash">
            <summary>
            Perform crash (call this once when crash start)
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.StopCrash">
            <summary>
            Stop current crash
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.LockFacingRight(System.Boolean,System.Int32)">
            <summary>
            Force character facing right or left for given frames
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.LockSquat(System.Int32)">
            <summary>
            Force character to squat for given frames
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.SetSpeedRate(System.Int32,System.Int32)">
            <summary>
            Force movement speed rate for given frames
            </summary>
            <param name="newRate">0 means 0%, 1000 means 100%</param>
            <param name="duration"></param>
        </member>
        <member name="M:AngeliA.CharacterMovement.CalculateMovementState(AngeliA.CharacterMovement)">
            <summary>
            Get current movement type base on current cached data
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.GetMovementState">
            <summary>
            Get current movement type base on current cached data
            </summary>
        </member>
        <member name="T:AngeliA.CharacterRenderer">
            <summary>
            Behaviour class handles rendering of character
            </summary>
        </member>
        <member name="M:AngeliA.CharacterRenderer.#ctor(AngeliA.Character)">
            <summary>
            Behaviour class handles rendering of character
            </summary>
        </member>
        <member name="P:AngeliA.CharacterRenderer.SpinOnGroundPound">
            <summary>
            Does character spin when ground pound
            </summary>
        </member>
        <member name="P:AngeliA.CharacterRenderer.Tint">
            <summary>
            Final color tint
            </summary>
        </member>
        <member name="P:AngeliA.CharacterRenderer.Scale">
            <summary>
             Final size scaling (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="M:AngeliA.CharacterRenderer.OnActivated">
            <summary>
            Callback function for character entity get activated
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.BODY_PART_COUNT">
            <summary>
            How many body part does a pose character have
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.CM_PER_PX">
            <summary>
            How many cm does one artwork pixel represents
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.BasicRootY">
            <summary>
            Mid-Bottom local position of character hip y position
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.PoseRootX">
            <summary>
            Total offset X for pose rendering
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.PoseRootY">
            <summary>
            Total offset Y for pose rendering
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.HeadTwist">
            <summary>
            Make head rotate like shaking head 
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.BodyTwist">
            <summary>
            Make body rotate left or right
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.CharacterHeight">
            <summary>
            Character body height in cm
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.RenderedCellZ">
            <summary>
            Basic rendering Z value for last time character get rendered
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.BlendDuration">
            <summary>
            How many frames does it takes the character to transition from one pose to another
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.BodyParts">
            <summary>
            All body parts of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.Head">
            <summary>
            Head of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.Body">
            <summary>
            Body of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.Hip">
            <summary>
            Hip of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.ShoulderL">
            <summary>
            Left shoulder of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.ShoulderR">
            <summary>
            Right shoulder of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.UpperArmL">
            <summary>
            Left upper arm of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.UpperArmR">
            <summary>
            Right upper arm of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.LowerArmL">
            <summary>
            Left lower arm of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.LowerArmR">
            <summary>
            Right lower arm of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.HandL">
            <summary>
            Left hand of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.HandR">
            <summary>
            Right hand of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.UpperLegL">
            <summary>
            Left upper leg of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.UpperLegR">
            <summary>
            Right upper leg of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.LowerLegL">
            <summary>
            Left lower leg of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.LowerLegR">
            <summary>
            Right lower leg of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.FootL">
            <summary>
            Left foot of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.FootR">
            <summary>
            Right foot of the pose character
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.HandGrabRotationL">
            <summary>
            Rotation of the object grabbing by the left hand
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.HandGrabRotationR">
            <summary>
            Rotation of the object grabbing by the right hand
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.HandGrabScaleL">
            <summary>
            Size scaling of the object grabbing by the left hand (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.HandGrabScaleR">
            <summary>
            Size scaling of the object grabbing by the right hand (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.HandGrabAttackTwistL">
            <summary>
            Angle twist of the object grabbing by the left hand (0 means disappear, 1000 means normal)
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.HandGrabAttackTwistR">
            <summary>
            Angle twist of the object grabbing by the right hand (0 means disappear, 1000 means normal)
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.FaceID">
            <summary>
            ID of current face gadget instance
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.HairID">
            <summary>
            ID of current hair gadget instance
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.EarID">
            <summary>
            ID of current animal-ear gadget instance (like cat-girl's ears, not human ears)
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.TailID">
            <summary>
            ID of current tail gadget instance
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.WingID">
            <summary>
            ID of current wing gadget instance
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.HornID">
            <summary>
            ID of current horn gadget instance
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.ForceFaceExpressionIndex">
            <summary>
            Which face expression does the face need to render
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.SuitHead">
            <summary>
            Current hat suit id
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.SuitBody">
            <summary>
            Current body suit id (cloth with sleeves)
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.SuitHip">
            <summary>
            Current hip suit id (pants or skirt)
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.SuitHand">
            <summary>
            Current gloves suit id
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.SuitFoot">
            <summary>
            Current shoes suit id
            </summary>
        </member>
        <member name="M:AngeliA.PoseCharacterRenderer.GetGadgetID(AngeliA.BodyGadgetType)">
            <summary>
            Get current body gadget ID the character is using
            </summary>
        </member>
        <member name="M:AngeliA.PoseCharacterRenderer.GetSuitID(AngeliA.ClothType)">
            <summary>
            Get current suit ID the character is using
            </summary>
        </member>
        <member name="M:AngeliA.PoseCharacterRenderer.OverridePoseAnimation(AngeliA.CharacterAnimationType,System.Int32,System.Int32)">
            <summary>
            Override animation for given animation type for specified frames long
            </summary>
        </member>
        <member name="M:AngeliA.PoseCharacterRenderer.ManualPoseAnimate(System.Int32,System.Int32)">
            <summary>
            Make the renderer draw the character based on the given animation for specified frames long
            </summary>
        </member>
        <member name="T:AngeliA.AngePath">
            <summary>
            Utility class for path related logic for an AngeliA project
            </summary>
        </member>
        <member name="F:AngeliA.AngePath.EQ_INVENTORY_FILE_EXT">
            <summary>
            Inventory file extension with equipment data
            </summary>
        </member>
        <member name="F:AngeliA.AngePath.EQ_INVENTORY_SEARCH_PATTERN">
            <summary>
            Inventory file search pattern with equipment data
            </summary>
        </member>
        <member name="P:AngeliA.AngePath.BuiltInUniverseRoot">
            <summary>
            Game universe folder path. This folder contents project data for an AngeliA project
            </summary>
        </member>
        <member name="T:AngeliA.AutoValidList`1">
            <summary>
            A list that auto remove element inside based on the given function
            </summary>
        </member>
        <member name="M:AngeliA.AutoValidList`1.#ctor(System.Int32,System.Func{`0,System.Boolean})">
            <summary>
            A list that auto remove element inside based on the given function
            </summary>
        </member>
        <member name="M:AngeliA.AutoValidList`1.Update">
            <summary>
            Valid all elements in the list based on the given funtion.
            </summary>
        </member>
        <member name="T:AngeliA.BuiltInSprite">
            <summary>
            Utility class to get built-in sprites 
            </summary>
        </member>
        <member name="T:AngeliA.BuiltInText">
            <summary>
            Utility class to get built-in text though language system
            </summary>
        </member>
        <member name="T:AngeliA.Cell">
            <summary>
            Rendering cell
            </summary>
        </member>
        <member name="P:AngeliA.Cell.TextSprite">
            <summary>
            Sprite for rendering text character
            </summary>
        </member>
        <member name="F:AngeliA.Cell.SheetIndex">
            <summary>
            Which sprite sheet does this cell use. -1 means main sheet.
            </summary>
        </member>
        <member name="F:AngeliA.Cell.Z">
            <summary>
            Z position for sorting
            </summary>
        </member>
        <member name="P:AngeliA.Cell.Rotation">
            <summary>
            Rotation of the cell, 0 means up, 90 means right
            </summary>
        </member>
        <member name="F:AngeliA.Cell.Rotation1000">
            <summary>
            Actual rotation data of the cell, 0 means up, 90000 means right
            </summary>
        </member>
        <member name="F:AngeliA.Cell.PivotX">
            <summary>
            Which place of the cell should be align with the X position. 0 means left edge, 1 means right edge.
            </summary>
        </member>
        <member name="F:AngeliA.Cell.PivotY">
            <summary>
            Which place of the cell should be align with the Y position. 0 means bottom edge, 1 means top edge.
            </summary>
        </member>
        <member name="F:AngeliA.Cell.Shift">
            <summary>
            How many edge should be clip off. 0 means no clip off, set left into "width" means clip off all of them
            </summary>
        </member>
        <member name="F:AngeliA.Cell.BorderSide">
            <summary>
            Which side does this cell belongs to when it's rendered in 9-slice mode
            </summary>
        </member>
        <member name="M:AngeliA.Cell.SetRect(AngeliA.IRect)">
            <summary>
            Set X,Y,Width,Height with a rect
            </summary>
        </member>
        <member name="M:AngeliA.Cell.ReturnPivots">
            <summary>
            Set pivot of the cell into (0,0) and let position adapt, so the final position of the cell remain the same
            </summary>
        </member>
        <member name="M:AngeliA.Cell.ReturnPivots(System.Single,System.Single)">
            <summary>
            Set pivot of the cell and let position adapt, so the final position of the cell remain the same
            </summary>
        </member>
        <member name="M:AngeliA.Cell.ReturnPosition(System.Int32,System.Int32)">
            <summary>
            Set position of the cell and let pivot adapt, so the final position of the cell remain the same
            </summary>
        </member>
        <member name="M:AngeliA.Cell.RotateAround(System.Int32,System.Int32,System.Int32)">
            <summary>
            Rotate the cell around the given position
            </summary>
        </member>
        <member name="M:AngeliA.Cell.ScaleFrom(System.Int32,System.Int32,System.Int32)">
            <summary>
            Scale the cell based on the given position
            </summary>
        </member>
        <member name="M:AngeliA.Cell.ScaleFrom(System.Single,System.Int32,System.Int32)">
            <summary>
            Scale the cell based on the given position
            </summary>
        </member>
        <member name="M:AngeliA.Cell.GetGlobalBounds">
            <summary>
            Get the boundary occupied by the cell
            </summary>
        </member>
        <member name="M:AngeliA.Cell.Clamp(AngeliA.IRect)">
            <summary>
            Clamp the content inside the given rect range
            </summary>
        </member>
        <member name="T:AngeliA.Const">
            <summary>
            Utility class for constant values
            </summary>
        </member>
        <member name="F:AngeliA.Const.CEL">
            <summary>
            Global size of a block unit
            </summary>
        </member>
        <member name="F:AngeliA.Const.HALF">
            <summary>
            Global size of a half block unit
            </summary>
        </member>
        <member name="F:AngeliA.Const.QUARTER">
            <summary>
            Global size of a quarter block unit
            </summary>
        </member>
        <member name="F:AngeliA.Const.CEL2">
            <summary>
            Global size of a block unit
            </summary>
        </member>
        <member name="F:AngeliA.Const.HALF2">
            <summary>
            Global size of a half block unit
            </summary>
        </member>
        <member name="F:AngeliA.Const.QUARTER2">
            <summary>
            Global size of a quarter block unit
            </summary>
        </member>
        <member name="F:AngeliA.Const.MAP">
            <summary>
            Unit size of a map file
            </summary>
        </member>
        <member name="F:AngeliA.Const.ART_CEL">
            <summary>
            Global size of a artwork pixel
            </summary>
        </member>
        <member name="F:AngeliA.Const.ART_SCALE">
            <summary>
            Size ratio between global size and artwork pixel
            </summary>
        </member>
        <member name="F:AngeliA.Const.LEVEL_SPAWN_PADDING_UNIT">
            <summary>
            Level block expand distance from view-rect in unit (1 unit = 256 global size)
            </summary>
        </member>
        <member name="F:AngeliA.Const.SPAWN_PADDING_UNIT">
            <summary>
            Entity spawning expand distance from view-rect in unit (1 unit = 256 global size)
            </summary>
        </member>
        <member name="F:AngeliA.Const.ANTI_SPAWN_PADDING_UNIT">
            <summary>
            Entity anti-spawning rect expand distance from view-rect in unit (1 unit = 256 global size)
            </summary>
        </member>
        <member name="F:AngeliA.Const.LEVEL_SPAWN_PADDING">
            <summary>
            Level block expand distance from view-rect in global size
            </summary>
        </member>
        <member name="F:AngeliA.Const.SPAWN_PADDING">
            <summary>
            Entity spawning expand distance from view-rect in global size
            </summary>
        </member>
        <member name="F:AngeliA.Const.ANTI_SPAWN_PADDING">
            <summary>
            Entity anti-spawning rect expand distance from view-rect in global size
            </summary>
        </member>
        <member name="F:AngeliA.Const.TEAM_ENVIRONMENT">
            <summary>
            Attack target team for environment
            </summary>
        </member>
        <member name="F:AngeliA.Const.TEAM_NEUTRAL">
            <summary>
            Attack target team for neutral
            </summary>
        </member>
        <member name="F:AngeliA.Const.TEAM_PLAYER">
            <summary>
            Attack target team for player
            </summary>
        </member>
        <member name="F:AngeliA.Const.TEAM_ENEMY">
            <summary>
            Attack target team for enemy
            </summary>
        </member>
        <member name="F:AngeliA.Const.TEAM_ALL">
            <summary>
            Attack target team for all
            </summary>
        </member>
        <member name="F:AngeliA.Const.TEAM_COUNT">
            <summary>
            Attack target team total count
            </summary>
        </member>
        <member name="F:AngeliA.Const.ORIGINAL_SIZE">
            <summary>
            Use the original size of the sprite from artwork sheet
            </summary>
        </member>
        <member name="F:AngeliA.Const.ORIGINAL_PIVOT">
            <summary>
            Use the original pivot of the sprite from artwork sheet
            </summary>
        </member>
        <member name="F:AngeliA.Const.ORIGINAL_SIZE_NEGATAVE">
            <summary>
            Use the original size * -1 of the sprite from artwork sheet
            </summary>
        </member>
        <member name="F:AngeliA.Const.PIXEL">
            <summary>
            Sprite ID of the 1x1 white pixel
            </summary>
        </member>
        <member name="F:AngeliA.Const.SCREEN_EFFECT_TINT">
            <summary>
            Screen effect index for the tint effect
            </summary>
        </member>
        <member name="F:AngeliA.Const.SCREEN_EFFECT_RETRO_DARKEN">
            <summary>
            Screen effect index for the retro-darken effect
            </summary>
        </member>
        <member name="F:AngeliA.Const.SCREEN_EFFECT_RETRO_LIGHTEN">
            <summary>
            Screen effect index for the retro-lighten effect
            </summary>
        </member>
        <member name="F:AngeliA.Const.SCREEN_EFFECT_VIGNETTE">
            <summary>
            Screen effect index for the vignette effect
            </summary>
        </member>
        <member name="F:AngeliA.Const.SCREEN_EFFECT_GREYSCALE">
            <summary>
            Screen effect index for the grey-scale effect
            </summary>
        </member>
        <member name="F:AngeliA.Const.SCREEN_EFFECT_INVERT">
            <summary>
            Screen effect index for the invert effect
            </summary>
        </member>
        <member name="F:AngeliA.Const.SCREEN_EFFECT_COUNT">
            <summary>
            Screen effect total count
            </summary>
        </member>
        <member name="T:AngeliA.Damage">
            <summary>
            Data structure for a single damage performed
            </summary>
            <param name="amount">How many damage it deals</param>
            <param name="targetTeam">What team does it attacks</param>
            <param name="bullet">Which bullet does it came from</param>
            <param name="type">What special type does it holds</param>
        </member>
        <member name="M:AngeliA.Damage.#ctor(System.Int32,System.Int32,AngeliA.Entity,AngeliA.Tag)">
            <summary>
            Data structure for a single damage performed
            </summary>
            <param name="amount">How many damage it deals</param>
            <param name="targetTeam">What team does it attacks</param>
            <param name="bullet">Which bullet does it came from</param>
            <param name="type">What special type does it holds</param>
        </member>
        <member name="F:AngeliA.Damage.IgnoreInvincible">
            <summary>
            Do not make target become invincible after take this damage
            </summary>
        </member>
        <member name="F:AngeliA.Damage.IgnoreStun">
            <summary>
            Do not make target stun after take this damage
            </summary>
        </member>
        <member name="T:AngeliA.Debug">
            <summary>
            Log debug messages to the console or screen
            </summary>
        </member>
        <member name="M:AngeliA.Debug.LogLabel(System.Object[])">
            <inheritdoc cref="M:AngeliA.Debug.LogLabel(System.String)"/>
        </member>
        <member name="M:AngeliA.Debug.LogLabel(System.Object)">
            <inheritdoc cref="M:AngeliA.Debug.LogLabel(System.String)"/>
        </member>
        <member name="M:AngeliA.Debug.LogLabel(System.String)">
            <summary>
            Draw a label on top-right of the screen for the current frame
            </summary>
        </member>
        <member name="T:AngeliA.EntityLayer">
            <summary>
            Layer for entity spawning
            </summary>
        </member>
        <member name="T:AngeliA.WrapMode">
            <summary>
            How text wrap when reach edge
            </summary>
        </member>
        <member name="M:AngeliA.Extension.AngeName(System.Type)">
            <summary>
            Name of this type that used inside AngeliA
            </summary>
        </member>
        <member name="M:AngeliA.Extension.AngeHash(System.Type)">
            <summary>
            Hash code that used inside AngeliA
            </summary>
        </member>
        <member name="M:AngeliA.Extension.AngeHash(System.String)">
            <summary>
            Hash code that used inside AngeliA
            </summary>
        </member>
        <member name="M:AngeliA.Extension.AngeHash(System.String,System.Int32,System.Int32)">
            <summary>
            Hash code that used inside AngeliA
            </summary>
        </member>
        <member name="M:AngeliA.Extension.AngeReverseHash(System.Char[],System.Int32,System.Int32)">
            <summary>
            Hash code that used inside AngeliA but generate with the reversed string data
            </summary>
        </member>
        <member name="M:AngeliA.Extension.IsLyingDown(AngeliA.CharacterAnimationType)">
            <summary>
            True if the character should be rendered lying down
            </summary>
        </member>
        <member name="F:AngeliA.PhysicsMask.ENTITY">
            <summary>
            ENVIRONMENT | CHARACTER
            </summary>
        </member>
        <member name="F:AngeliA.PhysicsMask.DYNAMIC">
            <summary>
            ENVIRONMENT | ITEM | CHARACTER
            </summary>
        </member>
        <member name="F:AngeliA.PhysicsMask.SOLID">
            <summary>
            LEVEL | ENVIRONMENT | CHARACTER
            </summary>
        </member>
        <member name="F:AngeliA.PhysicsMask.MAP">
            <summary>
            LEVEL | ENVIRONMENT
            </summary>
        </member>
        <member name="M:AngeliA.Inventory.AddItemAt(System.Int32,System.Int32,System.Int32)">
            <returns>How many items has been added. Return 0 means no item added. Return "count" means all items added.</returns>
        </member>
        <member name="M:AngeliA.Inventory.FindAndAddItem(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <returns>How many items has been added. Return 0 means no item added. Return "count" means all items added.</returns>
        </member>
        <member name="M:AngeliA.Inventory.TakeItemAt(System.Int32,System.Int32,System.Int32)">
            <returns>How many items has been taken. Return 0 means no item taken. Return "count" means all items taken.</returns>
        </member>
        <member name="M:AngeliA.Inventory.FindAndTakeItem(System.Int32,System.Int32,System.Int32)">
            <returns>How many items has been taken. Return 0 means no item taken. Return "count" means all items taken.</returns>
        </member>
        <member name="M:AngeliA.Inventory.CollectItem(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <returns>How many items has been collected. Return 0 means no item collected. Return "count" means all items collected.</returns>
        </member>
        <member name="M:AngeliA.Util.QuickRandom(System.Int32,System.Int32)">
            <summary>
            "min" is Included, "max" is Excluded
            </summary>
        </member>
        <member name="M:AngeliA.Util.QuickRandomWithSeed(System.Int32,System.Int32,System.Int32)">
            <summary>
            "min" is Included, "max" is Excluded
            </summary>
        </member>
        <member name="M:AngeliA.Util.QuickRandomWithSeed(System.Int64,System.Int32,System.Int32)">
            <summary>
            "min" is Included, "max" is Excluded
            </summary>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>com.angelia.platformer</name>
    </assembly>
    <members>
        <member name="T:AngeliA.Platformer.OnCheckPointTouched_CheckPoint_CharacterAttribute">
            <inheritdoc cref="M:AngeliA.Platformer.OnCheckPointTouched_CheckPoint_CharacterAttribute.#ctor(System.Int32)"/>
        </member>
        <member name="M:AngeliA.Platformer.OnCheckPointTouched_CheckPoint_CharacterAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when a check point entity touched by player
            </summary>
            <param name="order">Function with smaller order will be called earlier</param>
            <example><code>
            [OnCheckPointTouched_CheckPoint_Character]
            internal static void ExampleFunction (CheckPoint cp, Character player) { }
            </code></example>
        </member>
        <member name="T:AngeliA.Platformer.OnFirePutOut_IntTypeID_IRectAttribute">
            <inheritdoc cref="M:AngeliA.Platformer.OnFirePutOut_IntTypeID_IRectAttribute.#ctor(System.Int32)"/>
        </member>
        <member name="M:AngeliA.Platformer.OnFirePutOut_IntTypeID_IRectAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when a fire entity is put out
            </summary>
            <param name="order">Function with smaller order will be called earlier</param>
            <example><code>
            [OnFirePutOut_IntTypeID_IRect]
            internal static void ExampleFunction (int typeID, IRect rect) { }
            </code></example>
        </member>
        <member name="T:AngeliA.Platformer.OnMiniGameGiveBadge_IntQualityAttribute">
            <inheritdoc cref="M:AngeliA.Platformer.OnMiniGameGiveBadge_IntQualityAttribute.#ctor(System.Int32)"/>
        </member>
        <member name="M:AngeliA.Platformer.OnMiniGameGiveBadge_IntQualityAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when mini game give reward to player
            </summary>
            <param name="order">Function with smaller order will be called earlier</param>
            <example><code>
            [OnMiniGameGiveBadge_IntQuality]
            internal static void ExampleFunction (int quality) { }
            </code></example>
        </member>
        <member name="T:AngeliA.Platformer.CircuitSystem">
            <summary>
            Core system for triggering specified function of entities on stage/map
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.CircuitSystem.RegisterWire(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Register target IMapItem as wire for operating circuit
            </summary>
            <param name="id">ID of the target entity/element</param>
            <param name="connectL">True if this wire connect to the wire/operator on left</param>
            <param name="connectR">True if this wire connect to the wire/operator on right</param>
            <param name="connectD">True if this wire connect to the wire/operator on bottom</param>
            <param name="connectU">True if this wire connect to the wire/operator on top</param>
        </member>
        <member name="M:AngeliA.Platformer.CircuitSystem.IsWire(System.Int32)">
            <summary>
            True if the given ID is registed as wire
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.CircuitSystem.TriggerCircuit(System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Direction5)">
            <summary>
            Trigger the system at given position
            </summary>
            <param name="unitX">Position to start circuit trigger in unit space</param>
            <param name="unitY">Position to start circuit trigger in unit space</param>
            <param name="unitZ">Position Z</param>
            <param name="stamp">unique ID for this operation</param>
            <param name="startDirection">Only start at this direction (Set to center to start all direction)</param>
        </member>
        <member name="M:AngeliA.Platformer.CircuitSystem.OperateCircuit(AngeliA.Int3,System.Int32,AngeliA.Direction5)">
            <summary>
            Perform the function from the operator at given position
            </summary>
            <param name="unitPos">Target position in unit space</param>
            <param name="stamp">unique ID for this operation</param>
            <param name="circuitFrom">Which direction does the circuit came from. Set to center to make current as original.</param>
            <returns></returns>
        </member>
        <member name="M:AngeliA.Platformer.CircuitSystem.WireEntityID_to_WireConnection(System.Int32,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Get connection directions from given wire ID
            </summary>
            <returns>True if the wire ID is valid</returns>
        </member>
        <member name="M:AngeliA.Platformer.CircuitSystem.IsCircuitOperator(System.Int32)">
            <summary>
            True if the given ID is a valid circuit operator entity
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.CircuitSystem.WireConnection_to_BitInt(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Convert wire connection info into an Intager
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.CircuitSystem.BitInt_to_WireConnection(System.Int32,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Convert an intager into wire connection info
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.CircuitSystem.GetStamp(AngeliA.Int3)">
            <summary>
            Get unique ID for circuit system at given position in unit space
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.CircuitSystem.TryAddBackgroundTrigger(System.Int32,AngeliA.Int3)">
            <summary>
            Add a trigger in background thread
            </summary>
            <param name="entityID">Source ID of this trigger</param>
            <param name="unitPos">Position in unit space</param>
            <returns>True if the capacity is not reached</returns>
        </member>
        <member name="M:AngeliA.Platformer.CircuitSystem.TryRemoveBackgroundTrigger(System.Int32,AngeliA.Int3)">
            <summary>
            Remove the given entity from background thread triggers
            </summary>
            <param name="entityID">Source ID of this trigger</param>
            <param name="unitPos">Position in unit space</param>
            <returns>True if the trigger is removed</returns>
        </member>
        <member name="T:AngeliA.Platformer.NavigationOperateMotion">
            <summary>
            Type of navigation motion for a single step
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Navigation">
            <summary>
            Core system for navigate a platformer entity to move naturally
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Navigation.Operation">
            <summary>
            Data for a single step of navigation operation
            </summary>
        </member>
        <member name="F:AngeliA.Platformer.Navigation.Operation.Motion">
            <summary>
            Type of the motion
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Navigation.IsReady">
            <summary>
            True if the navigation system is ready to use
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Navigation.NavigateTo(AngeliA.Platformer.Navigation.Operation[],System.Int32@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform a navigation analysis to find the natural way to walk to target position
            </summary>
            <param name="Operations">Array to store the result data</param>
            <param name="operationCount">How many operations generated</param>
            <param name="fromX">Navigate from this position in global space</param>
            <param name="fromY">Navigate from this position in global space</param>
            <param name="toX">Navigate to this position in global space</param>
            <param name="toY">Navigate to this position in global space</param>
            <param name="jumpIteration">Iteration limit for jumpping logic</param>
        </member>
        <member name="M:AngeliA.Platformer.Navigation.ExpandTo(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Search for a valid place to stay with
            </summary>
            <param name="fromX">Search from this position in global space</param>
            <param name="fromY">Search from this position in global space</param>
            <param name="toX">Search to this position in global space</param>
            <param name="toY">Search to this position in global space</param>
            <param name="maxIteration">Limitation for searching iteration (Set to 16 if you have no idea how many it should be)</param>
            <param name="resultX">Result position to stay with in global space</param>
            <param name="resultY">Result position to stay with in global space</param>
            <param name="endInAir">True if the target is able to stay in air</param>
            <returns>True if the searching performs successfuly</returns>
        </member>
        <member name="M:AngeliA.Platformer.Navigation.IsGround(System.Int32,System.Int32,System.Int32@)">
            <summary>
            True if the given location is ground tile for navigation
            </summary>
            <param name="globalX">Target position in global space</param>
            <param name="globalY">Target position in global space</param>
            <param name="groundY">Position Y for top edge of the founded ground in global space</param>
        </member>
        <member name="T:AngeliA.Platformer.PlatformerUtil">
            <summary>
            Utility class for platformer package
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.PlatformerUtil.NavigationFreeWandering(AngeliA.Int2,AngeliA.Entity,System.Boolean@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Find final position to move to for wandering around.
            </summary>
            <param name="aimPosition">Target position anchor</param>
            <param name="target">Entity that moves around</param>
            <param name="grounded">True if the final position is on ground</param>
            <param name="frequency">Checking frequency in frame</param>
            <param name="maxDistance">Limitation for being away from the aimPosition</param>
            <param name="randomShift">Position shift on X in global space</param>
            <returns>Final position in global space</returns>
        </member>
        <member name="T:AngeliA.Platformer.TransferSystem">
            <summary>
            Core system that transfer object data along the stage
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.TransferSystem.IsTransfer(System.Int32,AngeliA.Direction4@)">
            <summary>
            True if given ID is a valid transfer
            </summary>
            <param name="transferID"></param>
            <param name="direction">Direction this transfer will move items to</param>
        </member>
        <member name="M:AngeliA.Platformer.TransferSystem.StartTransfer(AngeliA.Int3,System.Object,System.Int32)">
            <summary>
            Start a transfer operation
            </summary>
            <param name="unitPos">Starting position in unit space</param>
            <param name="data">Target object data to transfer with</param>
            <param name="stamp">unique number to identify this operation</param>
        </member>
        <member name="T:AngeliA.Platformer.ArrowBullet`1">
            <summary>
            Bullet entity that spawns an item when destroy
            </summary>
            <typeparam name="I">Type of the item as arrow</typeparam>
        </member>
        <member name="T:AngeliA.Platformer.ArrowBullet">
            <summary>
            Bullet entity that spawns an item when destroy
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ArrowBullet.ArrowItemID">
            <summary>
            Target item to spawn when destroy
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ArrowBullet.ArrowArtworkID">
            <summary>
            Artwork sprite ID to render this bullet
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ArrowBullet.SpawnItemWhenBulletDestroy">
            <summary>
            True if the arrow item should be spawn when bullet destroy
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.BeamBullet">
            <summary>
            A type of bullet that shoot into straight line
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.BeamBullet.BeamSpriteID">
            <summary>
            Artwork sprite ID for the beam body
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.BeamBullet.SparkSpriteID">
            <summary>
            Artwork sprite ID for the beam spark effect
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.BeamBullet.BurstSpriteID">
            <summary>
            Artwork sprite ID for the beam burst effect in the end-side
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.BeamBullet.HandBurstSpriteID">
            <summary>
            Artwork sprite ID for the beam burst effect in the hand-side
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.BeamBullet.BeamSize">
            <summary>
            Thickness of the beam in global space
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.BeamBullet.SparkSize">
            <summary>
            Size of the spark effect in global space
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.BeamBullet.BurstSize">
            <summary>
            Size of the end burst effect in global space
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.BeamBullet.HandBurstSize">
            <summary>
            Size of the hand burst effect in global space
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.BeamBullet.IllumanteUnitRadius">
            <summary>
            Radius in unit space for the LightingSystem
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.BeamBullet.IllumanteAmount">
            <summary>
            How bright of the illumante (0 means no illumante. 1000 means general amount)
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.BeamBullet.OnlyShowBurstWhenHitReceiver">
            <summary>
            True if show burst effect when hit a IDamageReceiver, not just hit the environment
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Explosion">
            <summary>
            General representation of an explosion
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Explosion.CollisionMask">
            <summary>
            Cells in which physics layers will be effect by the explosion
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Explosion.Duration">
            <summary>
            How many frames does this explosion exists in stage
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Explosion.Damage">
            <summary>
            How many damage does this explosion deal to the targets
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Explosion.WaveColor">
            <summary>
            Color tint of the wave sprite
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Explosion.RingColor">
            <summary>
            Color tint of the ring sprite
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Explosion.FireColor">
            <summary>
            Color tint of the fire sprite
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Explosion.DestroyBlocks">
            <summary>
            True if this explosion break map blocks
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Explosion.Radius">
            <summary>
            Size of the explosion in global space
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Explosion.Sender">
            <summary>
            Which entity create this explosion
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Explosion.BreakObjectArtwork">
            <summary>
            Artwork sprite ID for object break callback
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Explosion.OnExplode(AngeliA.IRect)">
            <summary>
            This function is called the this explosion explode
            </summary>
            <param name="range">(in global space)</param>
        </member>
        <member name="T:AngeliA.Platformer.ExplosiveMovableBullet">
            <summary>
            Movable bullet that spawn an explosion entity when despawn
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ExplosiveMovableBullet.ExplosionRadius">
            <summary>
            Radius in global space for the explosion.
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ExplosiveMovableBullet.ExplosionDuration">
            <summary>
            Duration of the explosion in frame
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ExplosiveMovableBullet.ExplosionID">
            <summary>
            Type ID of the explosion
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.HealBullet">
            <summary>
            Bullet that heal a target Character. Use "Damage" to adjust how much does it heals.
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.HealBullet.Lerp">
            <summary>
            How smooth the bullet move to the target
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.MeleeBullet">
            <summary>
            An invisible bullet created by melee weapon
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.MeleeBullet.FollowSender">
            <summary>
            Update the position of bullet so it attach to the weapon
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.MissileBullet">
            <summary>
            A bullet that find and follow a target to attack them
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MissileBullet.OnlyHitTarget">
            <summary>
            True if this bullet do not hit environment
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MissileBullet.SmokeParticleFrequency">
            <summary>
            How many frames does it takes to spawn a smoke particle
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MissileBullet.MissileFlyingSpeed">
            <summary>
            Forward speed in global space
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MissileBullet.MissileStartSpeed">
            <summary>
            Initial speed in global space
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MissileBullet.MissileAcceleration">
            <summary>
            Speed acceleration
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MissileBullet.DestroyWhenTakeDamage">
            <summary>
            True if this bullet get destroy when something else deal damage to it
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MissileBullet.MissileTarget">
            <summary>
            Current following target entity
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MissileBullet.CurrentRotation">
            <summary>
            Current flying rotation
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.MissileBullet.UpdateMissileMovement">
            <summary>
            Use this function to control how it flys
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.MissileBullet.FindTargetUpdate">
            <summary>
            Use this function to control how it find target
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.MovableBullet">
            <summary>
            A bullet that moves after being spawned
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MovableBullet.SpeedForward">
            <summary>
            Movement speed to shooting direction
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MovableBullet.SpeedSide">
            <summary>
            Movement speed to 90° of shooting direction
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MovableBullet.EndRotation">
            <summary>
            Bullet will become this rotation after hit target
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MovableBullet.EndRotationRandomRange">
            <summary>
            Random angle applys to the end rotation
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MovableBullet.ResidueID">
            <summary>
            This entity spawns after bullet despawn
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MovableBullet.ArtworkID">
            <summary>
            Artwork sprite ID to render this bullet
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MovableBullet.Scale">
            <summary>
            Size scale for artwork only. 0 means 0%, 1000 means 100%
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MovableBullet.WaterSpeedRate">
            <summary>
            Speed multiply rate when bullet inside water. 0 means 0%, 1000 means 100%
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MovableBullet.MaxRange">
            <summary>
            Bullet get despawn when fly longer than this range in global space
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MovableBullet.FacingRight">
            <summary>
            True if bullet facing right currently
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MovableBullet.HitReceiver">
            <summary>
            True if the bullet already hit a receiver
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.CameraAutoDirection">
            <summary>
            Path indicator for the CameraAutoScroll
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.CameraAutoScroll">
            <summary>
            Camera control entity that makes the camera follows a given path
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.CameraGateDown">
            <summary>
            Camera gate that clamp camera to down side
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.CameraGateUp">
            <summary>
            Camera gate that clamp camera to up side
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.CameraGateLeft">
            <summary>
            Camera gate that clamp camera to left side
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.CameraGateRight">
            <summary>
            Camera gate that clamp camera to right side
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.CameraGate">
            <summary>
            Entity that perform extra controls to the in-game camera movement
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CameraGate.Direction">
            <summary>
            Which direction does this gate clamp the camera position
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Enemy">
            <summary>
            Characters that attack the player
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Enemy.DamageOnTouch">
            <summary>
            True if this enemy deal damage to player when touching the player
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.ItemBasedSummon">
            <summary>
            Summon character that summons when other characters put the origin item in their inventory
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ItemBasedSummon.OriginItemID">
            <summary>
            ID of the item that make this character summons
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.RigidbodyNavigation">
            <summary>
            Behavior that handles auto movement for a target rigidbody
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.RigidbodyNavigation.#ctor(AngeliA.Rigidbody)">
            <summary>
            Behavior that handles auto movement for a target rigidbody
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.RigidbodyNavigation.NavigationAim">
            <summary>
            Current target position this navigation want to go for
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.RigidbodyNavigation.NavigationAimGrounded">
            <summary>
            True if the aim position is touching ground
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.RigidbodyNavigation.HasPerformableOperation">
            <summary>
            True if there is still any operation to perform
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.RigidbodyNavigation.NavigationEnable">
            <summary>
            True if this behavior should work currently
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.RigidbodyNavigation.ClampInSpawnRect">
            <summary>
            True if the target should only be inside the stage spawn rect
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.RigidbodyNavigation.TeleportWhenCantFly">
            <summary>
            True if the target immediately goes to the aim position when they can not fly
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.RigidbodyNavigation.InstanceShift">
            <summary>
            Position offset for distinguish multiple instance with same type
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.RigidbodyNavigation.StartMoveDistance">
            <summary>
            Start to move when distance between target ans aim position is larger than this value
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.RigidbodyNavigation.EndMoveDistance">
            <summary>
            Stop moving when distance between target ans aim position is smaller than this value
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.RigidbodyNavigation.StartFlyDistance">
            <summary>
            Start to fly when distance between target ans aim position is larger than this value
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.RigidbodyNavigation.EndFlyDistance">
            <summary>
            Stop flying when distance between target ans aim position is smaller than this value
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.RigidbodyNavigation.MinimumFlyDuration">
            <summary>
            At least fly this frames long
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.RigidbodyNavigation.EndMoveSlowDown">
            <summary>
            Duration in frame for slowly stop moving
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.RigidbodyNavigation.SetNavigationAim(AngeliA.Int2,System.Boolean)">
            <summary>
            Set aim position in global space
            </summary>
            <param name="newAim"></param>
            <param name="grounded">True if the new aim position is grounded</param>
        </member>
        <member name="T:AngeliA.Platformer.SummonNavigation">
            <summary>
            Behavior to handle auto movement for a summon character
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.SummonNavigation.#ctor(AngeliA.Platformer.Summon)">
            <summary>
            Behavior to handle auto movement for a summon character
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.SummonNavigation.IsFollowingOwner">
            <summary>
            True if the summon following the owner
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.SummonNavigation.IsWandering">
            <summary>
            True if the summon move along a given position
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.SummonNavigation.MakeWander``1">
            <summary>
            Make the summon find a given type of entity on stage and move along at it's position
            </summary>
            <returns>True if the target founded</returns>
        </member>
        <member name="M:AngeliA.Platformer.SummonNavigation.MakeWander(System.Int32,System.Int32)">
            <summary>
            Make the summon move along with given position in global space
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Slime">
            <summary>
            A slime type enemy that walks on ground/wall/ceilling
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Summon">
            <summary>
            Represent a character that summoned by another character
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Summon.Owner">
            <summary>
            The character that summons this character
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Summon.Navigation">
            <summary>
            Behavior object to handle auto movement of this character
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Summon.RequireOwner">
            <summary>
            True if this character despawn when owner is null or inactivated
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Summon.AllowRescueWhenPassout">
            <summary>
            True if the owner can bring back this character after it passout
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Summon.OnSummoned(System.Boolean)">
            <summary>
            This function is called when the character is being summoned
            </summary>
            <param name="create">True if this character was not on stage before being summon</param>
        </member>
        <member name="M:AngeliA.Platformer.Summon.CreateSummon``1(AngeliA.Character,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AngeliA.Platformer.Summon.CreateSummon(AngeliA.Character,System.Int32,System.Int32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Platformer.Summon.CreateSummon(AngeliA.Character,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T">Type of the summon</typeparam>
            <param name="owner">Instance of the summon's owner</param>
            <param name="typeID">Type of the summon</param>
            <param name="x">Position in global space to put this summon</param>
            <param name="y">Position in global space to put this summon</param>
            <param name="forceCreate">True if take an existing summon in same type and owner to summon it again</param>
            <returns>Instance of the summoned character</returns>
        </member>
        <member name="T:AngeliA.Platformer.CheckAltar`1">
            <summary>
            Entity that function as a check point. Can also use to unlock a type of check point.
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.CheckAltar">
            <summary>
            Entity that function as a check point. Can also use to unlock a type of check point.
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CheckAltar.LinkPoolReady">
            <summary>
            True if the internal cp link pool is ready to use
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CheckAltar.CurrentAltarID">
            <summary>
            Current activating altar type ID
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CheckAltar.CurrentAltarUnitPos">
            <summary>
            Current activating altar position in unit space
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.CheckAltar.Touch">
            <summary>
            Use this function to control logic that handles player touch
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.CheckPoint">
            <summary>
            Entity that save player position when player touchs. When game restart, player spawns to the saved position.
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CheckPoint.LastTriggeredCheckPointUnitPosition">
            <summary>
            Position in unit space for last check point get triggered
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CheckPoint.LastTriggeredCheckPointID">
            <summary>
            Type ID for last check point get triggered
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CheckPoint.RequireAltarUnlock">
            <summary>
            True if only work when linked altar is unlocked
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.CheckPoint.Touch">
            <summary>
            Use this function to control logic when player touch
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.CheckPointPortal">
            <summary>
            Portal that telepart player to target check point
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.CheckPointPortal.SetCheckPoint(System.Int32,AngeliA.Int3)">
            <summary>
            Set the target check point
            </summary>
            <param name="checkPointID"></param>
            <param name="unitPosition">Position in unit space to teleport to</param>
        </member>
        <member name="T:AngeliA.Platformer.BulletShooter`1">
            <summary>
            Entity that shoot given bullet repeatedly
            </summary>
            <typeparam name="B">Type of the bullet</typeparam>
        </member>
        <member name="T:AngeliA.Platformer.BulletShooter">
            <summary>
            Entity that shoot given bullet repeatedly
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.BulletShooter.ShootFrequency">
            <summary>
            How many frame does it takes to shoot another bullet
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.BulletShooter.ShootOffsetForward">
            <summary>
            Bullet starting position offset in forward of shooting direction
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.BulletShooter.ShootOffsetSide">
            <summary>
            Bullet starting position offset in side of shooting direction
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.BulletShooter.AttackTargetTeam">
            <summary>
            Which teams should be attack by the bullet
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.BulletShooter.BulletID">
            <summary>
            Type ID of the bullet entity
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.BulletShooter.ShootDirection">
            <summary>
            Which direction to shoot
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.BulletShooter.Shoot">
            <summary>
            Perform a shoot
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.BulletShooter.OnBulletShoot(AngeliA.Bullet)">
            <summary>
            This function is called when a bullet shoot
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Burner`1">
            <summary>
            Entity that spawn a file entity repeately
            </summary>
            <typeparam name="F">Type of the fire entity</typeparam>
        </member>
        <member name="P:AngeliA.Platformer.Burner`1.FireFrequency">
            <summary>
            How many frame does it take to spawn another file
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Burner`1.FireDuration">
            <summary>
            How long does a single file stay
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Burner`1.Direction">
            <summary>
            Direction of the file
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Burner`1.AllowFireFromMapElement">
            <summary>
            Read fire type from overlaping map element block
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.ChainCrusher">
            <summary>
            Entity holds a rotating chained ball to attack player
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ChainCrusher.Clockwise">
            <summary>
            True if the chained ball rotate in clockwise
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ChainCrusher.ChainLength">
            <summary>
            Length of the chain in global space
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ChainCrusher.RotateFrequency">
            <summary>
            How many frames does the rotation takes for a loop
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ChainCrusher.DamageAmount">
            <summary>
            Amount of damage it deals at once
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ChainCrusher.AttackTargetTeam">
            <summary>
            Which teams should be attack by the bullet
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ChainCrusher.SpikeBallSize">
            <summary>
            Size of the ball in global space
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ChainCrusher.ReleaseBallOnCircuitTrigger">
            <summary>
            True if the ball release when this entity being triggered by circuit
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ChainCrusher.ReleaseBallOnDamaged">
            <summary>
            True if the ball release when this entity take damage
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.ChainCrusher.CalculateCurrentSpikeBallTransform">
            <summary>
            Calculate current ball position in global space and rotation
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.ChainCrusher.OnReleaseBall">
            <summary>
            This function is called when the ball is released
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Conveyor">
            <summary>
            Entity that move the objects on top horizontaly
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Conveyor.MoveSpeed">
            <summary>
            Speed apply on object on top
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Conveyor.ArtCodeLeft">
            <summary>
            Artwork sprite ID for left facing block
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Conveyor.ArtCodeMid">
            <summary>
            Artwork sprite ID for middle block
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Conveyor.ArtCodeRight">
            <summary>
            Artwork sprite ID for right facing block
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Conveyor.ArtCodeSingle">
            <summary>
            Artwork sprite ID for isolated block
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Conveyor.ReloadPose">
            <summary>
            Reload fitting pose from map or stage
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Launcher">
            <summary>
            Entity that spawn a given target entity repeately
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Launcher.LaunchOffset">
            <summary>
            Starting position offset in global space for the launched entity
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Launcher.LaunchVelocity">
            <summary>
            Starting velocity for the launched entity
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Launcher.TargetEntityID">
            <summary>
            Launching entity type ID
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Launcher.FailbackEntityID">
            <summary>
            Launching entity with this type ID when the "TargetEntityID" is invalid
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Launcher.MaxLaunchCount">
            <summary>
            How many entities can it launch every time after the launcher spawned on stage
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Launcher.LaunchFrequency">
            <summary>
            How many frames does it takes to launch another entity
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Launcher.ItemCountPerLaunch">
            <summary>
            How many entity does it launch at once
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Launcher.AllowingAutoLaunch">
            <summary>
            True if the launcher perform launch every "LaunchFrequency" frames
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Launcher.LaunchOverlappingElement">
            <summary>
            True if launcher search entity target ID from overlapping map element
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Launcher.LaunchWhenEntranceBlocked">
            <summary>
            True if launcher can launch when the starting position is blocked by other entity
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Launcher.KeepLaunchedEntityInMap">
            <summary>
            True if the launched entities can reposition and save into the map
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Launcher.LaunchTowardsPlayer">
            <summary>
            True if the launcher always launch towards player horizontal location
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Launcher.UseMomentum">
            <summary>
            True if the entity is move by monentum instead of velocity
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Launcher.OnEntityLaunched(AngeliA.Entity,System.Int32,System.Int32)">
            <summary>
            This function is called when an entity is launched
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Launcher.ValidForLaunch">
            <summary>
            True if the launcher is currently able to launch
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Launcher.LaunchEntity">
            <summary>
            Perform launch for once
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Launcher.LaunchToRightSide">
            <summary>
            True if the launcher should launch to right currently
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.MomentumBooster">
            <summary>
            Entity that force character on top run in given direction or their current facing direction
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MomentumBooster.BoostSpeed">
            <summary>
            Target moving speed
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MomentumBooster.BoostDirection">
            <summary>
            Target moving direction. Set to None to make target run to their facing direction
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MomentumBooster.MomentumDecay">
            <summary>
            Decay value for target momentum
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.MomentumBooster.OnBoosting(AngeliA.Rigidbody)">
            <summary>
            This function is called when target is getting boost
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Oneway">
            <summary>
            Entity that do not allow rigidbody pass through on given direction
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Oneway.GateDirection">
            <summary>
            Target moving opposite with this direction get blocked
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Spring">
            <summary>
            Entity that bounce the touching targets
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Spring.Horizontal">
            <summary>
            True if the spring bounce horizontaly
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Spring.Power">
            <summary>
            Initial speed this spring gives when bounce
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Spring.BounceWhenInsideGround">
            <summary>
            True if the spring perform bounce when stuck inside ground
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Spring.ArtworkRotation">
            <summary>
            Current rotation of the artwork sprite
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Track">
            <summary>
            Entity that make IAutoTrackWalker walks along it
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Track.Speed">
            <summary>
            Speed of the targets on it
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Track.HangGap">
            <summary>
            Position offset Y for targets on it
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Track.AllowStraightConnection">
            <summary>
            True if tracks can connect straight directions
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Track.AllowTiltConnection">
            <summary>
            True if tracks can connect from diagonal directions
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Track.TurnBackWhenReachEnd">
            <summary>
            True if targets turn back when walks into edge
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Track.SlowDownWhenWalkerOverlap">
            <summary>
            True if one of the targets slow down when overlap each other
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Track.LoadItemFromMapElement">
            <summary>
            True if map element overlapping will be spawned
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Track.BodySprite">
            <summary>
            Artwork sprite for rendering the body
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Track.BodyTiltSprite">
            <summary>
            Artwork sprite for rendering the tilted body
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Track.CenterSprite">
            <summary>
            Artwork sprite for rendering the center knob
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Track.OnWalking(AngeliA.Platformer.IAutoTrackWalker)">
            <summary>
            This function is called when a walker is walking on the track
            </summary>
            <param name="walker"></param>
        </member>
        <member name="M:AngeliA.Platformer.Track.IsConnected(AngeliA.Direction8)">
            <summary>
            True if there is track connecting to given direction
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.TrapDoor">
            <summary>
            Entity that drops characters on top when getting step on
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.TrapDoor.TriggerWhenStepOn">
            <summary>
            True if trap door get trigger when target step on
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.TrapDoor.TriggerByCircuit">
            <summary>
            True if trap door get trigger by circuit system
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.TrapDoor.OpenDelay">
            <summary>
            Frames between target step on and get trigger
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.TrapDoor.OpenDuration">
            <summary>
            How long does the door stay open before closed again
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.TrapDoor.IsOpening">
            <summary>
            True if the door is currently opening
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.TrapDoor.LastSwitchFrame">
            <summary>
            Last time this door switch state in frame
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.TrapDoor.Open">
            <summary>
            Make the door open
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.TrapDoor.Close">
            <summary>
            Make the door close
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.TrapDoor.HitCheck">
            <summary>
            Return true when the door is step on
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Breakable">
            <summary>
            Entity that can be break by taking damage
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Breakable.SpawnItemFromMapWhenBreak">
            <summary>
            True if this entity spawn item from map element overlaps on it
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Breakable.IgnoreDamageType">
            <summary>
            This entity do not take damage with this tags
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Breakable.OnBreak">
            <summary>
            This function is called when entity breaks
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.CarryingPipe">
            <summary>
            This entity carry the player when they get in
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CarryingPipe.EdgeSprite">
            <summary>
            Artwork sprite for rendering the edge part
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CarryingPipe.MidSprite">
            <summary>
            Artwork sprite for rendering the middle part
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CarryingPipe.BottomSprite">
            <summary>
            Artwork sprite for rendering the bottom part
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CarryingPipe.InsertSprite">
            <summary>
            Artwork sprite for rendering the extra expanded part
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CarryingPipe.Direction">
            <summary>
            Direction this pipe is facing
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CarryingPipe.CarryingPoseAnimationID">
            <summary>
            ID of the pose-style animation applys on pose character
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.CarryingPipe.IsEdge(System.Boolean)">
            <summary>
            True if the pipe is on the edge as entrance
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.CarryingPipe.OnPlayerEnter(AngeliA.Character)">
            <summary>
            This function is called when player enter the pipe
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.CarryingPipe.OnPlayerExit(AngeliA.Character)">
            <summary>
            This function is called when player exit the pipe
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.CircleFlamePortal">
            <summary>
            Portal that looks like magic thing circling around
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CircleFlamePortal.CircleCode">
            <summary>
            Artwork sprite ID for rendering the circle part
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CircleFlamePortal.FlameCode">
            <summary>
            Artwork sprite ID for rendering the flame part
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CircleFlamePortal.LightCode">
            <summary>
            Artwork sprite ID for rendering the light part
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CircleFlamePortal.CircleSize">
            <summary>
            Size of the circle in global space
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Collectable">
            <summary>
            Entity that get collect when player touchs
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Collectable.ItemID">
            <summary>
            Item it give to player when get collected
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Collectable.ItemCount">
            <summary>
            How many item does it give at once
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Collectable.OnCollect(AngeliA.Character)">
            <summary>
            Make this collectable be collect by given character
            </summary>
            <returns>True if sucessfuly collected</returns>
        </member>
        <member name="M:AngeliA.Platformer.Collectable.AllowCollect(AngeliA.Character)">
            <summary>
            True if given character can collect this collectable
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.DonutBlock">
            <summary>
            Entity that drops when being step on for a well
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.DonutBlock.BreakMode">
            <summary>
            How this entity broke
            </summary>
        </member>
        <member name="F:AngeliA.Platformer.DonutBlock.BreakMode.BreakOnTouchGround">
            <summary>
            Break on drop onto ground
            </summary>
        </member>
        <member name="F:AngeliA.Platformer.DonutBlock.BreakMode.BreakOnFall">
            <summary>
            Break when start to fall
            </summary>
        </member>
        <member name="F:AngeliA.Platformer.DonutBlock.BreakMode.DoNotBreak">
            <summary>
            Do not auto break
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.DonutBlock.BreakCondition">
            <summary>
            How this entity break
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.DonutBlock.HoldDuration">
            <summary>
            How long does it takes to make it fall by standing on it
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.DonutBlock.FallingVelocity">
            <summary>
            Speed downward when falling
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.DonutBlock.IsFalling">
            <summary>
            True if this entity is falling
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.DonutBlock.IsHolding">
            <summary>
            True if this entity is being step on
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.DonutBlock.HoldStartFrame">
            <summary>
            When does this entity begin to be step on
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.DonutBlock.Break">
            <summary>
            Make this donut block break
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Door">
            <summary>
            Entity that teleport player into next-front/behind layer of the map
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Door.IsFrontDoor">
            <summary>
            True if the door teleport player to next front layer
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Door.KeyItemID">
            <summary>
            ID of required key item. 0 means no key required.
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Door.UnlockedDoorID">
            <summary>
            Entity type id for the unlocked version of this door
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Door.Invoke(AngeliA.Character)">
            <summary>
            Use this door
            </summary>
            <returns>True if successfuly used</returns>
        </member>
        <member name="M:AngeliA.Platformer.Door.AllowInvoke(AngeliA.Entity)">
            <summary>
            True if the door allow the target to use
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Fire">
            <summary>
            Entity that burns on target ICombustible
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Fire.PowerAmount">
            <summary>
            How fast the fire burn down the target ICombustible
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Fire.WeakenDuration">
            <summary>
            Duration in frames that this fire appears to be weaken
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Fire.SpreadDuration">
            <summary>
            Frames this fire takes to spread itself
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Fire.SpreadRange">
            <summary>
            ICombustible in this range will be on fire when this fire spread
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Fire.UseAdditiveShader">
            <summary>
            True if the fire use additive shader to render
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Fire.DamageCooldown">
            <summary>
            How long does it takes to damage a IDamageReceiver again
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Fire.DefaultDirection">
            <summary>
            Direction of the fire is facing when it get spawned
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Fire.IlluminateUnitRadius">
            <summary>
            Lighting illuminate distance in unit space
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Fire.IlluminateAmount">
            <summary>
            Amount of lighting it gives
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Fire.Direction">
            <summary>
            Direction of the fire is currently facing
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Fire.Setup(System.Int32,AngeliA.Direction4,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Make this fire start to burn on no target
            </summary>
            <param name="burnDuration">How long does it burn</param>
            <param name="direction">Direction it facing</param>
            <param name="width">Size in global space</param>
            <param name="height">Size in global space</param>
            <param name="damageImmediately">Deal damage immediately after spawn</param>
        </member>
        <member name="M:AngeliA.Platformer.Fire.Setup(AngeliA.ICombustible)">
            <summary>
            Make this fire burn on a ICombustible
            </summary>
            <param name="com"></param>
        </member>
        <member name="M:AngeliA.Platformer.Fire.Spread">
            <summary>
            Make the fire spread
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Fire.Putout(System.Boolean)">
            <summary>
            Make the fire stop burning
            </summary>
            <param name="manually">True if the fire is stopped by something else instead by it own</param>
        </member>
        <member name="T:AngeliA.Platformer.FrozenZone">
            <summary>
            Entity that freeze nearby buff carriers
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.FrozenZone.Duration">
            <summary>
            Time in frame that target keep being freeze
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.FrozenZone.Fullscreen">
            <summary>
            True if all buff carriers on screen will be freeze while this entity is on stage
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.FrozenZone.OnTouchingZone(AngeliA.Rigidbody)">
            <summary>
            This function is called when a target is touching this zone
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.FrozenZone.SpreadFrozenZone(System.Int32,AngeliA.IRect,System.Int32)">
            <summary>
            Spawn a frozen zone
            </summary>
            <param name="zoneID">Type of the zone</param>
            <param name="range">Size of the zone</param>
            <param name="duration">Time in frame that target keep being freeze</param>
        </member>
        <member name="T:AngeliA.Platformer.Liquid">
            <summary>
            Entity that behave like liquid in AngeliA style
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Liquid.ArtworkID">
            <summary>
            Artwork sprite ID for rendering
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Liquid.ProduceID">
            <summary>
            Entity type ID for the new liquid it spawn when flow
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Liquid.ReproduceVolume">
            <summary>
            When "Volume" greater than this, the liquid will repdoduce itself for flow behavior
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Liquid.ReproduceFrequency">
            <summary>
            Frames it takes for checking reproduce again
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Liquid.VanishSpeed">
            <summary>
            Volume lost per frame when liquid vanishing
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Liquid.Volume">
            <summary>
            Current volume of the liquid. 0 means no liquid, 1000 means full volume.
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Portal">
            <summary>
            Entity that teleport player to any given position when player touchs
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Portal.TargetGlobalPosition">
            <summary>
            Position in global space to teleport the target
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Portal.DontSpawnAfterUsed">
            <summary>
            True if the portal get remove from map after teleport
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Portal.Invoke(AngeliA.Character)">
            <summary>
            Perform teleport for given target
            </summary>
            <returns>True if successfuly performed</returns>
        </member>
        <member name="T:AngeliA.Platformer.Slope">
            <summary>
            Entity that have a 45° diagonal surface to interact with objects on stage
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Slope.DirectionVertical">
            <summary>
            Up means ◿ or ◺, Down means ◹ or ◸
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Slope.DirectionHorizontal">
            <summary>
            Left means ◿ or ◹, Right means ◺ or ◸
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Slope.CollisionMask">
            <summary>
            Which physics layers is include for the hit check
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Tornado">
            <summary>
            Entity that move in given speed and carry objects it touch
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Tornado.Velocity">
            <summary>
            Target moving speed
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Tornado.ArtworkPart">
            <summary>
            Artwork sprite for rendering
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Tornado.StrengthGrounded">
            <summary>
            Sucking power when touching ground. 0 means no power, 1000 means general power.
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Tornado.StrengthInAir">
            <summary>
            Sucking power when not touching ground. 0 means no power, 1000 means general power.
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Tornado.StiffFrameGap">
            <summary>
            How frequently does it shakes the target left and right.
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Wallpaper">
            <summary>
            Entity that load from map and keep exists to rendering the content between sky and map-behind layer.
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Wallpaper.Amount">
            <summary>
            Current weight of this wallpaper
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Wallpaper.DrawBackground(AngeliA.IRect)">
            <summary>
            Use this function to handle the rendering logic
            </summary>
            <param name="backgroundRect">Range in global space this wallpaper need to render in</param>
        </member>
        <member name="M:AngeliA.Platformer.Wallpaper.GetSkyTint(System.Int32)">
            <summary>
            Get sky tint at given Y position
            </summary>
            <param name="y">(in global space)</param>
        </member>
        <member name="T:AngeliA.Platformer.ActionFurniture">
            <summary>
            Furniture that allows the user to perform given logic as IActionTarget
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.ActionFurniture.Invoke">
            <summary>
            Perform the internal logic
            </summary>
            <returns></returns>
        </member>
        <member name="M:AngeliA.Platformer.ActionFurniture.AllowInvoke">
            <summary>
            True if the user can perform the logic currently
            </summary>
            <returns></returns>
        </member>
        <member name="T:AngeliA.Platformer.Bed">
            <summary>
            Furniture that player can sleep on and gain the reward from full-asleep
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Bed.GetTargetOnBed(AngeliA.Character)">
            <summary>
            Make given character on bed and sleep
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.CabinetIdol">
            <summary>
            Furniture that show an idol statue on it
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Chair">
            <summary>
            Furniture that makes the player sit on
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Chair.SitPoseAnimationID">
            <summary>
            Pose animation apply to the target character when sitting
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Chair.MakeTargetSit(AngeliA.Entity)">
            <summary>
            Make the given entity sit on this chair
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.MapChest">
            <summary>
            Furniture that allow the player to spawn a chain of items from map element below
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MapChest.ItemPlaceHolder">
            <summary>
            Replace items in map with this id after spawn them
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.MapChest.IsChestOpened(AngeliA.Platformer.MapChest)">
            <summary>
            True if the given chest is already opened
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Clock">
            <summary>
            Furniture that display the current in-game time
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.CraftingTable">
            <summary>
            Furniture that allow the player to combine items into another item
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CraftingTable.UseInventoryThumbnail">
            <summary>
            True if display a thumbnail for this entity in the inventory UI
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.CraftingTable.DrawInventoryThumbnail(AngeliA.IRect,System.Boolean)">
            <summary>
            Render the thumbnail for this entity in the inventory UI
            </summary>
            <param name="itemRect"></param>
            <param name="singleRow"></param>
        </member>
        <member name="T:AngeliA.Platformer.CraftingUI">
            <summary>
            UI for the crafting table
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CraftingUI.ItemFieldSize">
            <summary>
            Unified size of a single item field
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.CraftingUI.FrameCode">
            <summary>
            Artwork sprite ID for the item field frame
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.CraftingUI.SetColumnAndRow(System.Int32,System.Int32)">
            <summary>
            Set inventory column and row count
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.FireSprinkler">
            <summary>
            Furniture that detect and put out fire automatically
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.FireSprinkler.CheckFrequency">
            <summary>
            How many frames does it takes to check for fire again
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.FireSprinkler.RespondDelay">
            <summary>
            How many frames does it wait from fire detected to start putting it out
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.FireSprinkler.DetectionRadius">
            <summary>
            How far does the fire checking goes in global space
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.FireSprinkler.SprinklingDuration">
            <summary>
            How long does a single water splash takes in frame
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.FireSprinkler.SprinklingRange">
            <summary>
            How far does the water splash goes in global space
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.FireSprinkler.AlarmLightSpriteCode">
            <summary>
            Artwork sprite ID for the alarm light
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.FireSprinkler.SprinklingWaterSpriteCount">
            <summary>
            How many water sprites does it renders at same time
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.FireSprinkler.SprinklingWaterSpriteGroupCode">
            <summary>
            Artwork sprite group ID for a single water drop
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Furniture">
            <summary>
            Entity that function as a furniture
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Furniture.ModuleType">
            <summary>
            Which direction does this entity expand as map block. (eg. Beds goes horizontaly. Fridge goes verticaly)
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Furniture.FurnitureLeftOrDown">
            <summary>
            Instance of the nearby furniture with same type
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Furniture.FurnitureRightOrUp">
            <summary>
            Instance of the nearby furniture with same type
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Furniture.Pose">
            <summary>
            Which direction this furniture find it's nearby connection
            </summary>
        </member>
        <member name="F:AngeliA.Platformer.Furniture.ColliderBorder">
            <summary>
            Border in global space from artwork sprite
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Furniture.GetIsHighlighted">
            <summary>
            True if this furniture is highlighted as IActionTarget
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Furniture.GetSpriteFromPose">
            <summary>
            Get the artwork sprite from current rendering sheet
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.GrandfatherClock">
            <summary>
            Furniture that works as a combustible and verticaly expanding GrandfatherClock
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.InventoryFurniture`1">
            <summary>
            A type of furniture that player can put items inside
            </summary>
            <typeparam name="UI">Which type of UI does this furniture shows</typeparam>
        </member>
        <member name="T:AngeliA.Platformer.InventoryFurniture">
            <summary>
            A type of furniture that player can put items inside
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.InventoryFurniture.PartnerID">
            <summary>
            Type ID of the UI entity
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.InventoryFurniture.InventoryID">
            <summary>
            ID for inventory system
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.InventoryFurniture.InventoryColumn">
            <summary>
            Column count of the inventory UI
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.InventoryFurniture.InventoryRow">
            <summary>
            Row count of the inventory UI
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.InventoryFurniture.UnlockItemInside">
            <summary>
            True if items inside become unlocked for the player
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.InventoryFurniture.Invoke">
            <summary>
            Open the inventory UI
            </summary>
            <returns>True if the UI successfuly opens</returns>
        </member>
        <member name="M:AngeliA.Platformer.InventoryFurniture.AllowInvoke">
            <summary>
            True if the player can open the inventory UI
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.InventoryFurniture.TryGetInventoryUI(System.Int32,AngeliA.InventoryPartnerUI@)">
            <summary>
            Get the instance of the inventory UI from given furniture ID
            </summary>
            <param name="typeID">Type ID of the furniture</param>
            <param name="result"></param>
            <returns>True if the result is founded</returns>
        </member>
        <member name="M:AngeliA.Platformer.InventoryFurniture.IsInventoryFurniture(System.Int32,System.Int32@)">
            <summary>
            True if the given type ID refers to a valid inventory furniture
            </summary>
            <param name="typeID"></param>
            <param name="capacity">Inventory size limit</param>
        </member>
        <member name="T:AngeliA.Platformer.Light">
            <summary>
            Furniture that give illuminate from 6:00 to 18:00 during in-game time
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Light.LightSprite">
            <summary>
            Artwork sprite for the light
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Light.LightRange">
            <summary>
            Size of the light sprite in global space
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Light.IlluminateRange">
            <summary>
            Range of the illuminate in global space
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.OpenableFurniture">
            <summary>
            Furniture that opens when player triggers
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.OpenableFurniture.Open">
            <summary>
            True if the furniture is currently opening
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.OpenableFurniture.Invoke">
            <summary>
            Open the furniture
            </summary>
            <returns>True if it successfuly opened</returns>
        </member>
        <member name="M:AngeliA.Platformer.OpenableFurniture.SetOpen(System.Boolean)">
            <summary>
            Set opening state of this furniture
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Table">
            <summary>
            Furniture that functions as a horizontal expanding table
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Wardrobe">
            <summary>
            Furniture that functions as a vertical expanding wardrobe
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.IAutoTrackWalker">
            <summary>
            Interace that provide logic for auto walking on tracks
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.IAutoTrackWalker.OnTrack">
            <summary>
            True if this object is currently on track
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.IAutoTrackWalker.LastWalkingFrame">
            <summary>
            Last frame for this object when it's walking on track
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.IAutoTrackWalker.WalkStartFrame">
            <summary>
            Last frame for this object when it start to walk on track
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.IAutoTrackWalker.TrackWalkSpeedRate">
            <summary>
            Value scale for speed from track. (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.IAutoTrackWalker.IsTypeAutoTrackWalker(System.Int32)">
            <summary>
            True if given type ID refers to a valid track walker
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.IPingPongWalker">
            <summary>
            Interface that makes object auto walks and turn around when collide on a solid block. (like Goomba in Mario games)
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.IPingPongWalker.WalkOffEdge">
            <summary>
            True if the target fall off edge
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.IPingPongWalker.TurningCooldown">
            <summary>
            Frames it takes to turn around again
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.IPingPongWalker.OnlyWalkWhenGrounded">
            <summary>
            True if object don't walk when not touching ground
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.IPingPongWalker.TurningCheckMask">
            <summary>
            Which physics layers is included for solid block checking
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.IPingPongWalker.WalkingRight">
            <summary>
            True if the object should walk to right 
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.IPingPongWalker.OnActivated(AngeliA.Platformer.IPingPongWalker)">
            <summary>
            Call this method when entity activated
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.IPingPongWalker.PingPongWalk(AngeliA.Platformer.IPingPongWalker)">
            <summary>
            Call this method every frame
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.ISlimeWalker">
            <summary>
            Interface that makes the object walk on ground/wall/ceilling
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ISlimeWalker.AttachingDirection">
            <summary>
            When this value is "Up" the walker will be upside-down. "Center" means not attaching anything.
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ISlimeWalker.WalkingDirection">
            <summary>
            Direction this objects currently walking to
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ISlimeWalker.LocalPosition">
            <summary>
            Local position from attaching block to object
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ISlimeWalker.AttachingTarget">
            <summary>
            Target that this object attaching on
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ISlimeWalker.AttachingID">
            <summary>
            Block/entity ID this object attaching on
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ISlimeWalker.AttachingRect">
            <summary>
            Rect position in global space this object attaching on
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ISlimeWalker.FacingPositive">
            <summary>
            True if the object walkings to right when facing up.
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.ISlimeWalker.ActiveWalker(AngeliA.Platformer.ISlimeWalker)">
            <summary>
            Call this method when entity activated
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.IUnitable">
            <summary>
            Map blocks that connect to each other and forms a group
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.IUnitable.UniteMode">
            <summary>
            Which direction will be connected
            </summary>
        </member>
        <member name="F:AngeliA.Platformer.IUnitable.UniteMode.Horizontal">
            <summary>
            Left and right
            </summary>
        </member>
        <member name="F:AngeliA.Platformer.IUnitable.UniteMode.Vertical">
            <summary>
            Up and down
            </summary>
        </member>
        <member name="F:AngeliA.Platformer.IUnitable.UniteMode.FourDirection">
            <summary>
            Left right up and down
            </summary>
        </member>
        <member name="F:AngeliA.Platformer.IUnitable.UniteMode.EightDirection">
            <summary>
            Left right up down and diagonal
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.IUnitable.UniteTempParam">
            <summary>
            Custom object that comes from ForAllUnitedEntity call. Only use this inside the "System.Action{E} results" function.
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.IUnitable.ForAllUnitedEntity(System.Int32,System.Int32,AngeliA.IRect,AngeliA.OperationMode,AngeliA.Platformer.IUnitable.UniteMode,System.Action{AngeliA.Platformer.IUnitable},System.Object)">
            <summary>
            Iterate through all connected IUnitable as a group
            </summary>
            <param name="physicsMask">Which physics layer is include for entity searching</param>
            <param name="entityID">Target entity type ID</param>
            <param name="rect">Rect position in global space</param>
            <param name="mode"></param>
            <param name="uniteMode">Which direction count as connected</param>
            <param name="results">Invoke this action for all founded result</param>
            <param name="param">Custom data for the "result" action. Use IUnitable.UniteTempParam inside result action to get this data.</param>
        </member>
        <member name="T:AngeliA.Platformer.MiniGame">
            <summary>
            A game that user can play with an extra in-game window
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MiniGame.WindowSize">
            <summary>
            Size of UI window in global space
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MiniGame.RequireMouseCursor">
            <summary>
            True if the game require mouse cursor display
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MiniGame.DisplayName">
            <summary>
            Name of the game in English
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MiniGame.BadgeCount">
            <summary>
            Total badge count the user can get
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MiniGame.RequireQuitConfirm">
            <summary>
            True if show confirm window when user trying to quit
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MiniGame.ShowRestartOption">
            <summary>
            True if show restart button on pause menu
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MiniGame.WindowRect">
            <summary>
            UI window position in global space
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MiniGame.IsPlaying">
            <summary>
            True if the game is currently playing by the player
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MiniGame.BadgeHints">
            <summary>
            Text hint for how to get badges
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.MiniGame.StartMiniGame">
            <summary>
            Open the window UI and start game
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.MiniGame.RestartGame">
            <summary>
            Start the game again
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.MiniGame.CloseMiniGame">
            <summary>
            Quit the game and close the window UI
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.MiniGame.Unify(System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.Unify(System.Int32)"/>
        </member>
        <member name="M:AngeliA.Platformer.MiniGame.GiveBadge(System.Int32,System.Boolean)">
            <summary>
            Give target badge to player
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.MiniGame.DrawBadges(AngeliA.IRect)">
            <inheritdoc cref="M:AngeliA.Platformer.MiniGame.DrawBadges(AngeliA.IRect,AngeliA.Color32)"/>
        </member>
        <member name="M:AngeliA.Platformer.MiniGame.DrawBadges(AngeliA.IRect,AngeliA.Color32)">
            <summary>
            Draw the badge list panel on screen
            </summary>
            <param name="panelRect">Rect position in global space</param>
            <param name="backgroundColor"></param>
        </member>
        <member name="T:AngeliA.Platformer.MiniGameTask">
            <summary>
            Task to make gameplay occupied during minigame playing
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Platform">
            <summary>
            A moving entity that carry things on top
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Platform.OneWay">
            <summary>
            True if the entity fill upward oneway gate into physics system
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Platform.TouchedByPlayer">
            <summary>
            True if the platform has been touched by selecting player after spawned
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Platform.TouchedByCharacter">
            <summary>
            True if the platform has been touched by a character after spawned
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Platform.TouchedByRigidbody">
            <summary>
            True if the platform has been touched by a rigidbody after spawned
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Platform.Move">
            <summary>
            This function handles the movement logic of this platform
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Platform.OnRigidbodyTouched(AngeliA.Rigidbody)">
            <summary>
            This function is called when a rigidbody touchs this platform
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Platform.OnCharacterTouched(AngeliA.Character)">
            <summary>
            This function is called when a character touchs this platform
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Platform.OnPlayerTouched(AngeliA.Character)">
            <summary>
            This function is called when the selecting player touchs this platform
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Platform.SetTouch(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Mark the platform as touched. (do not trigger the callback functions)
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Platform.RenderPlatformBlock(System.Int32)">
            <summary>
            Draw the platform block on screen
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.StepTriggerPlatform">
            <summary>
            Platform that triggers when target step on it
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.StepTriggerPlatform.TriggerOnRigidbodyTouch">
            <summary>
            True if rigidbody can trigger this platform
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.StepTriggerPlatform.TriggerOnCharacterTouch">
            <summary>
            True if characters can trigger this platform
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.StepTriggerPlatform.TriggerOnPlayerTouch">
            <summary>
            True if selecting player can trigger this platform
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.TriggerablePlatform">
            <summary>
            Platform that can be trigger and perform some specified logic
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.TriggerablePlatform.TriggerMode">
            <summary>
            How does the platforms get trigger in a group
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.TriggerablePlatform.AllowMultipleTrigger">
            <summary>
            True if a triggered platform can be trigger again
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.TriggerablePlatform.TriggeredData">
            <summary>
            Custom data from the trigger function.
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.TriggerablePlatform.OnTriggered(System.Object)">
            <summary>
            This function is called when the platform is triggered
            </summary>
            <param name="data">Custom data. Use TriggerablePlatform.TriggeredData to get this value</param>
        </member>
        <member name="M:AngeliA.Platformer.TriggerablePlatform.Trigger(System.Object)">
            <summary>
            Trigger the platform
            </summary>
            <param name="data">Custom data</param>
        </member>
        <member name="T:AngeliA.Platformer.FloatingCombatText">
            <summary>
            Displays text information with flowing up movement. 
            </summary>
        </member>
        <member name="F:AngeliA.Platformer.FloatingCombatText.Duration">
            <summary>
            Total existing time in frame
            </summary>
        </member>
        <member name="F:AngeliA.Platformer.FloatingCombatText.FontID">
            <summary>
            Which font does it use
            </summary>
        </member>
        <member name="F:AngeliA.Platformer.FloatingCombatText.FloatSpeed">
            <summary>
            How far does it flow up in one frame
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.FloatingCombatText.Spawn(System.Int32,System.Int32,System.String,System.Int32,System.Nullable{AngeliA.Color32},System.Nullable{AngeliA.Color32},AngeliA.GUIStyle)">
            <summary>
            Spawn a FCT with given infomation
            </summary>
            <param name="x">Start position in global space</param>
            <param name="y">Start position in global space</param>
            <param name="text">Text string content</param>
            <param name="chars">Text string content</param>
            <param name="fontID">Which font does it use</param>
            <param name="color">Text color</param>
            <param name="backgroundColor"></param>
            <param name="style"></param>
            <returns>Instance of the spawned FCT entity. Null if failed.</returns>
        </member>
        <member name="M:AngeliA.Platformer.FloatingCombatText.Spawn(System.Int32,System.Int32,System.Char[],System.Int32,System.Nullable{AngeliA.Color32},System.Nullable{AngeliA.Color32},AngeliA.GUIStyle)">
            <inheritdoc cref="M:AngeliA.Platformer.FloatingCombatText.Spawn(System.Int32,System.Int32,System.String,System.Int32,System.Nullable{AngeliA.Color32},System.Nullable{AngeliA.Color32},AngeliA.GUIStyle)"/>
        </member>
        <member name="T:AngeliA.Platformer.Leaf">
            <summary>
            Represent a breakable leaf on stage
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Leaf.LeafCount">
            <summary>
            Artwork sprite count
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Leaf.LeafExpand">
            <summary>
            How far does artwork sprite expands
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Leaf.LeafArtworkCode">
            <summary>
            Artwork sprite ID for rendering
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Leaf.OnLeafBreak">
            <summary>
            This function is called when leaf break by something
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Plant">
            <summary>
            Represent a breakable plant on stage
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Plant.OnPlantBreak">
            <summary>
            This function is called when the plant is break by something
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.BarrelMovement">
            <summary>
            Movement for rolling on a barrel
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.BarrelVehicle">
            <summary>
            A barrel that roll to opposite direction when character walk on it
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.BarrelVehicle.BarrelSize">
            <summary>
            Diameter of the barrel in global space
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.IRider">
            <summary>
            Interface to mark an entity as can be ride by characters
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.IRider.ReadyToRide">
            <summary>
            True if the entity can be ride currently
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.RideableMovement">
            <summary>
            Movement behavior for rideable vehicles
            </summary>
            <param name="rig"></param>
        </member>
        <member name="M:AngeliA.Platformer.RideableMovement.#ctor(AngeliA.Rigidbody)">
            <summary>
            Movement behavior for rideable vehicles
            </summary>
            <param name="rig"></param>
        </member>
        <member name="T:AngeliA.Platformer.RideableVehicle`1">
            <summary>
            Vehicles that characters can ride on
            </summary>
            <typeparam name="RM">Type of the movement behavior</typeparam>
        </member>
        <member name="P:AngeliA.Platformer.RideableVehicle`1.AllowFreeWandering">
            <summary>
            True if the vehicle run around when not being drive
            </summary>
        </member>
        <member name="F:AngeliA.Platformer.RideableVehicle`1.Navigation">
            <summary>
            Navigation behavior for free wandering
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.RideableVehicle`1.OverrideDriverAnimation(AngeliA.PoseCharacterRenderer)">
            <summary>
            Apply riding pose animation on driver
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Vehicle`1">
            <summary>
            Entity that allow characters to drive with
            </summary>
            <typeparam name="M">Type of the movement</typeparam>
        </member>
        <member name="T:AngeliA.Platformer.Vehicle">
            <summary>
            Entity that allow characters to drive with
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Vehicle.Movement">
            <summary>
            Movement that override to the driver
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Vehicle.Driver">
            <summary>
            Character that driving this vehcle. Null when no driver.
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Vehicle.LastDriveChangedFrame">
            <summary>
            Last time driving state change in global frame.
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Vehicle.DriverLocalPosition">
            <summary>
            Position from the vehcile to driver
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Vehicle.DriverLeaveLocalPosition">
            <summary>
            Position from the vehcile to driver when they leave
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Vehicle.StartDriveCooldown">
            <summary>
            How long does it takes to ride again in frames
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Vehicle.FillPyhsicsForDriver">
            <summary>
            True if driver fill physics collider
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Vehicle.TakeDriver">
            <summary>
            Make driver move with the vehicle
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Vehicle.StartDrive(AngeliA.Character)">
            <summary>
            Make driver start to drive this vehcile
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Vehicle.StopDrive">
            <summary>
            Stop current driver from driving this vehicle
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Vehicle.CheckForStartDrive(AngeliA.Character@)">
            <summary>
            Update function for checking if a driver should start to drive
            </summary>
            <returns>True if any driver start to drive</returns>
        </member>
        <member name="M:AngeliA.Platformer.Vehicle.CheckForStopDrive">
            <summary>
            Update function for checking if the current driver should stop driving
            </summary>
            <returns>True if stop driving</returns>
        </member>
        <member name="M:AngeliA.Platformer.Vehicle.OnDamaged(AngeliA.Damage)">
            <summary>
            This function is called when vehicle take damage
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.VehicleMovement">
            <summary>
            Movement behavior for vehicle override to their driver
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.VehicleMovement.Driver">
            <summary>
            Target character that drive the vehicle
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.VehicleMovement.InitializeMeta">
            <summary>
            Initialize config for the movement
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Armor`2">
            <summary>
            Equipment as body protection
            </summary>
            <typeparam name="P">Type of the item this armor will become after take damage for once</typeparam>
            <typeparam name="N">Type of the item this armor will become after being repair for once</typeparam>
        </member>
        <member name="P:AngeliA.Platformer.Armor`2.RepairMaterials">
            <summary>
            Items required for repair this armor. System will find any available item from start to end inside this array, and only consume one item to repair for once.
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Armor`2.Scale">
            <summary>
            Size scale for rendering only
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Armor`2.HideEar">
            <summary>
            True if the armor hide ear gadget 
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Armor`2.HideHorn">
            <summary>
            True if the armor hide horn gadget
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Armor`2.HideHair">
            <summary>
            True if the armor hide hair gadget
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Armor`2.HideTail">
            <summary>
            True if the armor hide tail gadget
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Armor`2.HideFace">
            <summary>
            True if the armor hide face gadget
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.Armor`2.HideWing">
            <summary>
            True if the armor hide wing gadget
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Armor`2.DrawArmor(AngeliA.PoseCharacterRenderer)">
            <summary>
            Render the armor onto given character
            </summary>
        </member>
        <member name="M:AngeliA.Platformer.Armor`2.RepairArmor(AngeliA.Character,System.Int32)">
            <summary>
            Repair the armor for once
            </summary>
            <param name="character">Character that holding this armor</param>
            <param name="materialID">Item that will get consume</param>
            <returns>True if the armor get repair for once</returns>
        </member>
        <member name="T:AngeliA.Platformer.BodyArmor`2">
            <summary>
            Armor on body of the character
            </summary>
            <typeparam name="P">Type of the item this armor will become after take damage for once</typeparam>
            <typeparam name="N">Type of the item this armor will become after being repair for once</typeparam>
        </member>
        <member name="T:AngeliA.Platformer.Gloves`2">
            <summary>
            Armor on character's both hands
            </summary>
            <typeparam name="P">Type of the item this armor will become after take damage for once</typeparam>
            <typeparam name="N">Type of the item this armor will become after being repair for once</typeparam>
        </member>
        <member name="T:AngeliA.Platformer.HelmetWearingMode">
            <summary>
            How an helmet wear on head
            </summary>
        </member>
        <member name="F:AngeliA.Platformer.HelmetWearingMode.Attach">
            <summary>
            Put onto the head
            </summary>
        </member>
        <member name="F:AngeliA.Platformer.HelmetWearingMode.Cover">
            <summary>
            Wrapped around the head
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Helmet`2">
            <summary>
            Armor on character's head
            </summary>
            <typeparam name="P">Type of the item this armor will become after take damage for once</typeparam>
            <typeparam name="N">Type of the item this armor will become after being repair for once</typeparam>
        </member>
        <member name="P:AngeliA.Platformer.Helmet`2.WearingMode">
            <summary>
            How an helmet wear on head
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.Shoes`2">
            <summary>
            Armor on character's both foot
            </summary>
            <typeparam name="P">Type of the item this armor will become after take damage for once</typeparam>
            <typeparam name="N">Type of the item this armor will become after being repair for once</typeparam>
        </member>
        <member name="T:AngeliA.Platformer.AuraItem`1">
            <summary>
            Item that broadcast given buff to nearby object when being put into inventory
            </summary>
            <typeparam name="B">Type of the buff</typeparam>
        </member>
        <member name="P:AngeliA.Platformer.AuraItem`1.Radius">
            <summary>
            Broadcast radius in global space
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.DollItem">
            <summary>
            Item that draw a doll sprite onto character's hip when carry inside inventory
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.DollItem.DollSize">
            <summary>
            Size of the doll sprite in global space
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.SummonItem`1">
            <summary>
            Item that create summon character when carry in inventory
            </summary>
            <typeparam name="T">Type of the summon character</typeparam>
        </member>
        <member name="M:AngeliA.Platformer.SummonItem`1.SpawnSummonFromItem(AngeliA.Character)">
            <summary>
            Spawn the target summon character
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.HealWeapon`1">
            <summary>
            Weapon that shoot bullet to heal friendly forces
            </summary>
            <typeparam name="B">Type of bullet to spawn</typeparam>
        </member>
        <member name="P:AngeliA.Platformer.HealWeapon`1.AutoAttackFrequency">
            <summary>
            Frames it takes to auto attack again. Set to 0 for no auto attack
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.HealWeapon`1.AllowManuallyAttack">
            <summary>
            True if this weapon allows manually attack from character
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.MeleeWeapon">
            <summary>
            Weapon that spawn invisible bullet that follows the character
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MeleeWeapon.RangeXLeft">
            <summary>
            Bullet width in global space when attack facing left
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MeleeWeapon.RangeXRight">
            <summary>
            Bullet width in global space when attack facing right
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MeleeWeapon.RangeY">
            <summary>
            Bullet height in global space
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.MeleeWeapon.Damage">
            <summary>
            Damage amount it deals
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.MissileWeapon`1">
            <summary>
            Weapon that shoot a missile to attack
            </summary>
            <typeparam name="B">Type of the missile bullet</typeparam>
        </member>
        <member name="T:AngeliA.Platformer.ProjectileWeapon`1">
            <summary>
            Weapon that shoot projectile to attack
            </summary>
            <typeparam name="B">Type of the bullet</typeparam>
        </member>
        <member name="P:AngeliA.Platformer.ProjectileWeapon`1.BulletCountInOneShot">
            <summary>
            How many bullet does it shoot at once
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ProjectileWeapon`1.BulletPivotY">
            <summary>
            Bullet start position Y. (0 means bottom of character hitbox. 1000 means top of character hitbox)
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ProjectileWeapon`1.AdditionalBulletSpeedForward">
            <summary>
            Extra speed apply to forward direction
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ProjectileWeapon`1.AdditionalBulletSpeedSide">
            <summary>
            Extra speed apply to side direction
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ProjectileWeapon`1.AngleSpeedDelta">
            <summary>
            How multiple bullets spread when spawned at once
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.ProjectileWeapon`1.ForceBulletCountNextShot">
            <summary>
            Set this value to make "BulletCountInOneShot" different.
            </summary>
        </member>
        <member name="T:AngeliA.Platformer.OpeningTask">
            <summary>
            Task that handles the logic for game restart
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.OpeningTask.TargetViewX">
            <summary>
            Camera view position X that the task trying to move to
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.OpeningTask.TargetViewY">
            <summary>
            Camera view position Y that the task trying to move to
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.OpeningTask.TargetViewZ">
            <summary>
            Z position of the stage
            </summary>
        </member>
        <member name="P:AngeliA.Platformer.OpeningTask.FadeOut">
            <summary>
            True if the task make fade out effect
            </summary>
        </member>
    </members>
</doc>

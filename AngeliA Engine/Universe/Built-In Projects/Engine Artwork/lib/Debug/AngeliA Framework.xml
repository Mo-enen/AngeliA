<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AngeliA Framework</name>
    </assembly>
    <members>
        <member name="T:AngeliA.ToolApplicationAttribute">
            <summary>
            If application with current assembly should be treat as a "tool" rather than "game"
            </summary>
        </member>
        <member name="T:AngeliA.IgnoreArtworkPixelsAttribute">
            <summary>
            Current application do not load pixel data from sheet
            </summary>
        </member>
        <member name="T:AngeliA.DefaultKeyboardGamekeyAttribute">
            <summary>
            Default keyboard binding for the given gamekey
            </summary>
            <param name="gamekey"></param>
            <param name="inputKey"></param>
        </member>
        <member name="M:AngeliA.DefaultKeyboardGamekeyAttribute.#ctor(AngeliA.Gamekey,AngeliA.KeyboardKey)">
            <summary>
            Default keyboard binding for the given gamekey
            </summary>
            <param name="gamekey"></param>
            <param name="inputKey"></param>
        </member>
        <member name="T:AngeliA.DefaultGamepadGamekeyAttribute">
            <summary>
            Default gamepad binding for the given gamekey
            </summary>
            <param name="gamekey"></param>
            <param name="inputKey"></param>
        </member>
        <member name="M:AngeliA.DefaultGamepadGamekeyAttribute.#ctor(AngeliA.Gamekey,AngeliA.GamepadKey)">
            <summary>
            Default gamepad binding for the given gamekey
            </summary>
            <param name="gamekey"></param>
            <param name="inputKey"></param>
        </member>
        <member name="T:AngeliA.EntityLayerCapacityAttribute">
            <summary>
            Max entity count for the layer
            </summary>
            <param name="layer"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:AngeliA.EntityLayerCapacityAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Max entity count for the layer
            </summary>
            <param name="layer"></param>
            <param name="capacity"></param>
        </member>
        <member name="T:AngeliA.RendererLayerCapacityAttribute">
            <summary>
            Max rendering cell count for the layer
            </summary>
            <param name="layer"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:AngeliA.RendererLayerCapacityAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Max rendering cell count for the layer
            </summary>
            <param name="layer"></param>
            <param name="capacity"></param>
        </member>
        <member name="T:AngeliA.GlobalGravityAttribute">
            <summary>
            The gravity value applys on all rigidbody
            </summary>
            <param name="gravity"></param>
        </member>
        <member name="M:AngeliA.GlobalGravityAttribute.#ctor(System.Int32)">
            <summary>
            The gravity value applys on all rigidbody
            </summary>
            <param name="gravity"></param>
        </member>
        <member name="T:AngeliA.EnablePlayerSystemAttribute">
            <summary>
            Indicates whether the current application uses the player system or not
            </summary>
        </member>
        <member name="T:AngeliA.BodySetAttribute">
            <summary>
            Treat specified sprites as bodyset for pose-characters
            </summary>
            <param name="name">The name of the bodyset</param>
        </member>
        <member name="M:AngeliA.BodySetAttribute.#ctor(System.String)">
            <summary>
            Treat specified sprites as bodyset for pose-characters
            </summary>
            <param name="name">The name of the bodyset</param>
        </member>
        <member name="T:AngeliA.DontUseBuiltInMapAsFailbackAttribute">
            <summary>
            When not having map file in user map folder, create an empty map instead of copy from built-in map folder.
            </summary>
        </member>
        <member name="T:AngeliA.CharacterAttribute">
            <summary>
            Attribute for character class
            </summary>
        </member>
        <member name="T:AngeliA.CharacterAttribute.DefaultSelectedPlayerAttribute">
            <summary>
            Make the character the default selected player
            </summary>
            <param name="priority"></param>
        </member>
        <member name="M:AngeliA.CharacterAttribute.DefaultSelectedPlayerAttribute.#ctor(System.Int32)">
            <summary>
            Make the character the default selected player
            </summary>
            <param name="priority"></param>
        </member>
        <member name="T:AngeliA.EntityAttribute">
            <summary>
            Attribute for entities
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.ExcludeInMapEditorAttribute">
            <summary>
            Do not show this entity inside the palette panel of map editor.
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.MapEditorGroupAttribute">
            <summary>
            Which map editor palette group should this entity in 
            </summary>
            <param name="groupName"></param>
            <param name="order"></param>
        </member>
        <member name="M:AngeliA.EntityAttribute.MapEditorGroupAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Which map editor palette group should this entity in 
            </summary>
            <param name="groupName"></param>
            <param name="order"></param>
        </member>
        <member name="T:AngeliA.EntityAttribute.LayerAttribute">
            <summary>
            Which layer should this entity spawn inside.
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:AngeliA.EntityAttribute.LayerAttribute.#ctor(System.Int32)">
            <summary>
            Which layer should this entity spawn inside.
            </summary>
            <param name="layer"></param>
        </member>
        <member name="T:AngeliA.EntityAttribute.CapacityAttribute">
            <summary>
            Spawn limit count of this entity 
            </summary>
            <param name="capacity"></param>
            <param name="preSpawn">Create this many instance of the entity when game initialize</param>
        </member>
        <member name="M:AngeliA.EntityAttribute.CapacityAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Spawn limit count of this entity 
            </summary>
            <param name="capacity"></param>
            <param name="preSpawn">Create this many instance of the entity when game initialize</param>
        </member>
        <member name="T:AngeliA.EntityAttribute.DontDespawnOutOfRangeAttribute">
            <summary>
            Do not despawn this entity when it's out of view rect
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.DontSpawnFromWorld">
            <summary>
            Do not spawn this entity when it's painted into the map
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.UpdateOutOfRangeAttribute">
            <summary>
            This entity will update when it's outside view rect
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.DontDrawBehindAttribute">
            <summary>
            This entity will not display on the behind layer
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.DontDestroyOnZChangedAttribute">
            <summary>
            This entity do not despawn when player enter another map layer
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.StageOrderAttribute">
            <summary>
            The order in which this entity gets updated in it's layer
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:AngeliA.EntityAttribute.StageOrderAttribute.#ctor(System.Int32)">
            <summary>
            The order in which this entity gets updated in it's layer
            </summary>
            <param name="order"></param>
        </member>
        <member name="T:AngeliA.EntityAttribute.RepositionWhenInactiveAttribute">
            <summary>
            When the entity despawn, reset the position in map. So next time it will be load from the position where it last appeared
            </summary>
            <param name="requireReposition">Disable reposition by setting this to False</param>
        </member>
        <member name="M:AngeliA.EntityAttribute.RepositionWhenInactiveAttribute.#ctor(System.Boolean)">
            <summary>
            When the entity despawn, reset the position in map. So next time it will be load from the position where it last appeared
            </summary>
            <param name="requireReposition">Disable reposition by setting this to False</param>
        </member>
        <member name="T:AngeliA.EntityAttribute.SpawnWithCheatCodeAttribute">
            <summary>
            Player can use "Spawn---" to spawn this entity to stage.
            </summary>
        </member>
        <member name="T:AngeliA.ItemDropAttribute`1">
            <summary>
            Register item drop for the entity, use ItemSystem.DropItemFor(Entity) to perform the item drop.
            </summary>
            <typeparam name="I">Which item does it drops</typeparam>
            <param name="dropChance">Probability of dropping this item. 0 means 0%, 1000 means 100%</param>
            <param name="dropCount">How many items does it drop at once</param>
        </member>
        <member name="M:AngeliA.ItemDropAttribute`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Register item drop for the entity, use ItemSystem.DropItemFor(Entity) to perform the item drop.
            </summary>
            <typeparam name="I">Which item does it drops</typeparam>
            <param name="dropChance">Probability of dropping this item. 0 means 0%, 1000 means 100%</param>
            <param name="dropCount">How many items does it drop at once</param>
        </member>
        <member name="T:AngeliA.ItemDropAttribute">
            <inheritdoc cref="T:AngeliA.ItemDropAttribute`1" />
        </member>
        <member name="M:AngeliA.ItemDropAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="T:AngeliA.ItemDropAttribute`1" />
        </member>
        <member name="T:AngeliA.ItemCombinationAttribute">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.ItemCombinationAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.ItemCombinationAttribute`1">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.ItemCombinationAttribute`1.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.ItemCombinationAttribute`2">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.ItemCombinationAttribute`2.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.ItemCombinationAttribute`3">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.ItemCombinationAttribute`3.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.ItemCombinationAttribute`4">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.ItemCombinationAttribute`4.#ctor(System.Int32,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.GlobalItemCombinationAttribute">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.GlobalItemCombinationAttribute.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.GlobalItemCombinationAttribute`1">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.GlobalItemCombinationAttribute`1.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.GlobalItemCombinationAttribute`2">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.GlobalItemCombinationAttribute`2.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.GlobalItemCombinationAttribute`3">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.GlobalItemCombinationAttribute`3.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.GlobalItemCombinationAttribute`4">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.GlobalItemCombinationAttribute`4.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.BasicItemCombinationAttribute">
            <summary>
            Define an item combination to craft the item.
            </summary>
            <param name="count">How many item does it craft at once</param>
            <param name="keepId0">Do not consume this item</param>
            <param name="keepId1">Do not consume this item</param>
            <param name="keepId2">Do not consume this item</param>
            <param name="keepId3">Do not consume this item</param>
            <param name="extraA">Use this if the item is not based on class</param>
            <param name="extraB">Use this if the item is not based on class</param>
            <param name="extraC">Use this if the item is not based on class</param>
            <param name="extraD">Use this if the item is not based on class</param>
            <param name="itemA">An item required to craft the result item</param>
            <param name="itemB">An item required to craft the result item</param>
            <param name="itemC">An item required to craft the result item</param>
            <param name="itemD">An item required to craft the result item</param>
        </member>
        <member name="M:AngeliA.BasicItemCombinationAttribute.#ctor(AngeliA.ItemCombinationParam,AngeliA.ItemCombinationParam,AngeliA.ItemCombinationParam,AngeliA.ItemCombinationParam,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Define an item combination to craft the item.
            </summary>
            <param name="count">How many item does it craft at once</param>
            <param name="keepId0">Do not consume this item</param>
            <param name="keepId1">Do not consume this item</param>
            <param name="keepId2">Do not consume this item</param>
            <param name="keepId3">Do not consume this item</param>
            <param name="extraA">Use this if the item is not based on class</param>
            <param name="extraB">Use this if the item is not based on class</param>
            <param name="extraC">Use this if the item is not based on class</param>
            <param name="extraD">Use this if the item is not based on class</param>
            <param name="itemA">An item required to craft the result item</param>
            <param name="itemB">An item required to craft the result item</param>
            <param name="itemC">An item required to craft the result item</param>
            <param name="itemD">An item required to craft the result item</param>
        </member>
        <member name="T:AngeliA.NoItemCombinationAttribute">
            <summary>
            Indicates to the system that this item does not require crafting combination
            </summary>
        </member>
        <member name="T:AngeliA.OnGameInitializeAttribute">
            <summary>
            The function will be called when game initialize.
            </summary>
            <param name="order">Function with smaller order will be called earlier</param>
            <example><code>
            [OnGameInitialize]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="M:AngeliA.OnGameInitializeAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when game initialize.
            </summary>
            <param name="order">Function with smaller order will be called earlier</param>
            <example><code>
            [OnGameInitialize]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnGameInitializeLaterAttribute">
            <summary>
            The function will be called when game initialize but after all [OnGameInitialize] functions already called
            </summary>
            <example><code>
            [OnGameInitializeLater]
            internal static void ExampleFunction () { }
            </code></example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameInitializeLaterAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when game initialize but after all [OnGameInitialize] functions already called
            </summary>
            <example><code>
            [OnGameInitializeLater]
            internal static void ExampleFunction () { }
            </code></example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.BeforeSavingSlotChangedAttribute">
            <summary>
            The function will be called before user change the saving slot. Universe.BuiltIn.CurrentSavingSlot is still the old value when this function is called.
            </summary>
            <example><code>
            [BeforeSavingSlotChanged]
            internal static void ExampleFunction () { }
            </code></example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.BeforeSavingSlotChangedAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called before user change the saving slot. Universe.BuiltIn.CurrentSavingSlot is still the old value when this function is called.
            </summary>
            <example><code>
            [BeforeSavingSlotChanged]
            internal static void ExampleFunction () { }
            </code></example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnSavingSlotChangedAttribute">
            <summary>
            The function will be called after user change the saving slot. Universe.BuiltIn.CurrentSavingSlot is the new value when this function is called.
            </summary>
            <example><code>
            [OnSavingSlotChanged]
            internal static void ExampleFunction () { }
            </code></example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnSavingSlotChangedAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called after user change the saving slot. Universe.BuiltIn.CurrentSavingSlot is the new value when this function is called.
            </summary>
            <example><code>
            [OnSavingSlotChanged]
            internal static void ExampleFunction () { }
            </code></example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameUpdateAttribute">
            <summary>
            The function will be called every time game update (60 times per second)
            </summary>
            <example><code>
            [OnGameUpdate]
            internal static void ExampleFunction () { }
            </code></example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameUpdateAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called every time game update (60 times per second)
            </summary>
            <example><code>
            [OnGameUpdate]
            internal static void ExampleFunction () { }
            </code></example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameUpdateLaterAttribute">
            <summary>
            The function will be called every time game update (60 times per second), but after all [OnGameUpdate] functions already called.
            </summary>
            <example><code>
            [OnGameUpdateLater]
            internal static void ExampleFunction () { }
            </code></example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameUpdateLaterAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called every time game update (60 times per second), but after all [OnGameUpdate] functions already called.
            </summary>
            <example><code>
            [OnGameUpdateLater]
            internal static void ExampleFunction () { }
            </code></example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameUpdatePauselessAttribute">
            <summary>
            The function will be called every time game update (60 times per second), even when the game is paused.
            </summary>
            <example><code>
            [OnGameUpdatePauseless]
            internal static void ExampleFunction () { }
            </code></example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameUpdatePauselessAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called every time game update (60 times per second), even when the game is paused.
            </summary>
            <example><code>
            [OnGameUpdatePauseless]
            internal static void ExampleFunction () { }
            </code></example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameRestartAttribute">
            <summary>
            The function will be called when game restart.
            </summary>
            <example><code>
            [OnGameRestart]
            internal static void ExampleFunction () { }
            </code></example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameRestartAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when game restart.
            </summary>
            <example><code>
            [OnGameRestart]
            internal static void ExampleFunction () { }
            </code></example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameTryingToQuitAttribute">
            <summary>
            The function will be called when player try to quit the game. Return false will stop the application from quiting.
            </summary>
            <example><code>
            [OnGameTryingToQuit]
            internal static bool ExampleFunction () { return true; }
            </code></example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameTryingToQuitAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when player try to quit the game. Return false will stop the application from quiting.
            </summary>
            <example><code>
            [OnGameTryingToQuit]
            internal static bool ExampleFunction () { return true; }
            </code></example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameQuittingAttribute">
            <summary>
            The function will be called before the application actually quit.
            </summary>
            <example><code>
            [OnGameQuitting]
            internal static void ExampleFunction () { }
            </code></example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameQuittingAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called before the application actually quit.
            </summary>
            <example><code>
            [OnGameQuitting]
            internal static void ExampleFunction () { }
            </code></example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameFocusedAttribute">
            <summary>
            The function will be called when the application window regain focus.
            </summary>
            <example><code>
            [OnGameFocused]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnGameLostFocusAttribute">
            <summary>
            The function will be called when the application window lost focus.
            </summary>
            <example><code>
            [OnGameLostFocus]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnWindowSizeChangedAttribute">
            <summary>
            The function will be called when user change the size of the application window
            </summary>
            <example><code>
            [OnWindowSizeChanged]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnRemoteSettingChanged_IntID_IntDataAttribute">
            <summary>
            The function will be called when engine send remote message to rigged game
            </summary>
            <example><code>
            [OnRemoteSettingChanged_IntID_IntData]
            internal static void ExampleFunction (int id, int data) { }
            </code></example>
        </member>
        <member name="M:AngeliA.OnRemoteSettingChanged_IntID_IntDataAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when engine send remote message to rigged game
            </summary>
            <example><code>
            [OnRemoteSettingChanged_IntID_IntData]
            internal static void ExampleFunction (int id, int data) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnFileDropped_StringPathAttribute">
            <summary>
            The function will be called when user drag and drop a file into the application window
            </summary>
            <example><code>
            [OnFileDropped_StringPath]
            internal static void ExampleFunction (string filePath) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnMainSheetReloadAttribute">
            <summary>
            The function will be called when artwork sheet for rendering loaded from file
            </summary>
            <example><code>
            [OnMainSheetReload]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnViewZChangedAttribute">
            <summary>
            The function will be called when player change the map layer
            </summary>
            <example><code>
            [OnViewZChanged]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="T:AngeliA.BeforeLayerFrameUpdate_IntLayerAttribute">
            <summary>
            The function will be called before rendering layer update
            </summary>
            <example><code>
            [BeforeLayerFrameUpdate_IntLayer]
            internal static void ExampleFunction (int layer) { }
            </code></example>
        </member>
        <member name="T:AngeliA.AfterLayerFrameUpdate_IntLayerAttribute">
            <summary>
            The function will be called after rendering layer update 
            </summary>
            <example><code>
            [AfterLayerFrameUpdate_IntLayer]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="T:AngeliA.BeforeFirstUpdateAttribute">
            <summary>
            The function will be called before any entity.FirstUpdate is called
            </summary>
            <example><code>
            [BeforeFirstUpdate]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="T:AngeliA.BeforeBeforeUpdateAttribute">
            <summary>
            The function will be called before any entity.BeforeUpdate is called 
            </summary>
            <example><code>
            [BeforeBeforeUpdate]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="T:AngeliA.BeforeUpdateUpdateAttribute">
            <summary>
            The function will be called before any entity.Update is called 
            </summary>
            <example><code>
            [BeforeUpdateUpdate]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="T:AngeliA.BeforeLateUpdateAttribute">
            <summary>
            The function will be called before any entity.LateUpdate is called 
            </summary>
            <example><code>
            [BeforeLateUpdate]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="T:AngeliA.AfterLateUpdateAttribute">
            <summary>
            The function will be called after all entity.LateUpdate is called 
            </summary>
            <example><code>
            [AfterLateUpdate]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="T:AngeliA.BeforeLevelRenderedAttribute">
            <summary>
            The function will be called before world squad rendering any level blocks for the current frame
            </summary>
            <example><code>
            [BeforeLevelRendered]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="M:AngeliA.BeforeLevelRenderedAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called before world squad rendering any level blocks for the current frame
            </summary>
            <example><code>
            [BeforeLevelRendered]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="T:AngeliA.AfterLevelRenderedAttribute">
            <summary>
            The function will be called after world squad render all level blocks for the current frame 
            </summary>
            <example><code>
            [AfterLevelRendered]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="M:AngeliA.AfterLevelRenderedAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called after world squad render all level blocks for the current frame 
            </summary>
            <example><code>
            [AfterLevelRendered]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnWorldCreatedBySquad_WorldAttribute">
            <summary>
            The function will be called when a world instance is created by world squad
            </summary>
            <example><code>
            [OnWorldCreatedBySquad_World]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="M:AngeliA.OnWorldCreatedBySquad_WorldAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when a world instance is created by world squad
            </summary>
            <example><code>
            [OnWorldCreatedBySquad_World]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnWorldLoadedBySquad_WorldAttribute">
            <summary>
            The function will be called when a world instance is loaded by world squad 
            </summary>
            <example><code>
            [OnWorldLoadedBySquad_World]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="M:AngeliA.OnWorldLoadedBySquad_WorldAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when a world instance is loaded by world squad 
            </summary>
            <example><code>
            [OnWorldLoadedBySquad_World]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnWorldSavedByMapEditor_WorldAttribute">
            <summary>
            The function will be called when a world instance is saved to file by the world squad
            </summary>
            <example><code>
            [OnWorldSavedByMapEditor_World]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnMapEditorModeChange_ModeAttribute">
            <summary>
            The function will be called when user change map editor editing mode
            </summary>
            <example><code>
            [OnMapEditorModeChange_Mode]
            internal static void ExampleFunction (OnMapEditorModeChange_ModeAttribute.Mode mode) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnMapEditorModeChange_ModeAttribute.Mode">
            <summary></summary>
        </member>
        <member name="F:AngeliA.OnMapEditorModeChange_ModeAttribute.Mode.EnterPlayMode">
            <summary>
            Edit mode to play mode. After map editor internal logic is done
            </summary>
        </member>
        <member name="F:AngeliA.OnMapEditorModeChange_ModeAttribute.Mode.ExitPlayMode">
            <summary>
            Play mode to edit mode. Before map editor internal logic is done
            </summary>
        </member>
        <member name="F:AngeliA.OnMapEditorModeChange_ModeAttribute.Mode.EnterEditMode">
            <summary>
            Play mode to edit mode. After map editor internal logic is done
            </summary>
        </member>
        <member name="F:AngeliA.OnMapEditorModeChange_ModeAttribute.Mode.ExitEditMode">
            <summary>
            Edit mode to play mode. Before map editor internal logic is done
            </summary>
        </member>
        <member name="T:AngeliA.OnLanguageChangedAttribute">
            <summary>
            The function will be called when user change game display language. Language.CurrentLanguage is already set to new value when this function is called.
            </summary>
            <example><code>
            [OnLanguageChanged]
            internal static void ExampleFunction () { }
            </code></example>
        </member>
        <member name="T:AngeliA.CheatCodeAttribute">
            <summary>
            The function will be called when user perform the given cheat code. Cheat code can be perform like those in NES games.
            </summary>
            <example><code>
            [CheatCode]
            internal static void ExampleFunction (string code) { }
            </code></example>
        </member>
        <member name="M:AngeliA.CheatCodeAttribute.#ctor(System.String)">
            <summary>
            The function will be called when user perform the given cheat code. Cheat code can be perform like those in NES games.
            </summary>
            <example><code>
            [CheatCode]
            internal static void ExampleFunction (string code) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnCheatPerformed_StringCodeAttribute">
            <summary>
            The function will be called when user performed any cheat code. Cheat code can be perform like those in NES games.
            </summary>
            <example><code>
            [OnCheatPerformed_StringCode]
            internal static void ExampleFunction (string code) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnItemCollected_Entity_Int2Pos_IntItemID_IntItemCountAttribute">
            <summary>
            The function will be called when a character collect an item
            </summary>
            <example><code>
            [OnItemCollected_Entity_Int2Pos_IntItemID_IntItemCount]
            internal static void ExampleFunction (Entity holder, Int2 pos, int itemID, int itemCount) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnItemLost_Character_IntItemIDAttribute">
            <summary>
            The function will be called when a character lost an item
            </summary>
            <example><code>
            [OnItemLost_Character_IntItemID]
            internal static void ExampleFunction (Character holder, int itemID) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnItemError_Entity_Int2Pos_IntIconID">
            <summary>
            The function will be called when something wrong about an item (like when guns out of ammo)
            </summary>
            <example><code>
            [OnItemError_Entity_Int2Pos_IntIconID]
            internal static void ExampleFunction (Entity holder, Int2 pos, int iconID) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnItemDamage_Character_IntItemBefore_IntItemAfterAttribute">
            <summary>
            The function will be called when an item is damaged into another item
            </summary>
            <example><code>
            [OnItemDamage_Character_IntItemBefore_IntItemAfter]
            internal static void ExampleFunction (Character holder, int itemIdBefore, int itemIdAfter) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnItemUnlocked_IntItemIDAttribute">
            <summary>
            The function will be called when an item is unlocked by player
            </summary>
            <example><code>
            [OnItemUnlocked_IntItemID]
            internal static void ExampleFunction (int itemID) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnCharacterFootStepped_EntityAttribute">
            <summary>
            The function will be called when a character makes a foot step on running
            </summary>
            <example><code>
            [OnCharacterFootStepped_Entity]
            internal static void ExampleFunction (Entity character) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnCharacterSleeping_EntityAttribute">
            <summary>
            The function will be called when a character is sleeping
            </summary>
            <example><code>
            [OnCharacterSleeping_Entity]
            internal static void ExampleFunction (Entity character) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnCharacterJump_EntityAttribute">
            <summary>
            The function will be called when a character jumps
            </summary>
            <example><code>
            [OnCharacterJump_Entity]
            internal static void ExampleFunction (Entity character) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnCharacterPound_EntityAttribute">
            <summary>
            The function will be called when a character ground pound
            </summary>
            <example><code>
            [OnCharacterPound_Entity]
            internal static void ExampleFunction (Entity character) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnCharacterFly_EntityAttribute">
            <summary>
            The function will be called when a character fly
            </summary>
            <example><code>
            [OnCharacterFly_Entity]
            internal static void ExampleFunction (Entity character) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnCharacterSlideStepped_EntityAttribute">
            <summary>
            The function will be called when a character makes a step when sliding
            </summary>
            <example><code>
            [OnCharacterSlideStepped_Entity]
            internal static void ExampleFunction (Entity character) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnCharacterPassOut_EntityAttribute">
            <summary>
            The function will be called when a character pass out
            </summary>
            <example><code>
            [OnCharacterPassOut_Entity]
            internal static void ExampleFunction (Entity character) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnCharacterTeleport_EntityAttribute">
            <summary>
            The function will be called when a character teleport
            </summary>
            <example><code>
            [OnCharacterTeleport_Entity]
            internal static void ExampleFunction (Entity character) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnCharacterCrash_EntityAttribute">
            <summary>
            The function will be called when a character crash
            </summary>
            <example><code>
            [OnCharacterCrash_Entity]
            internal static void ExampleFunction (Entity character) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnObjectBreak_IntSpriteID_IRectAttribute">
            <summary>
            The function will be called when an object break
            </summary>
            <example><code>
            [OnObjectBreak_IntSpriteID_IRect]
            internal static void ExampleFunction (int spriteID, IRect rectPosition) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnObjectFreeFall_IntSpriteID_Int2Pos_IntRot_BoolFlip_Int2Velocity_IntRotSpeed_IntGravityAttribute">
            <summary>
            The function will be called when an object start to free fall
            </summary>
            <example><code>
            [OnObjectFreeFall_IntSpriteID_Int2Pos_IntRot_BoolFlip_Int2Velocity_IntRotSpeed_IntGravity]
            internal static void ExampleFunction (int spriteID, Int2 pos, int startRotation, bool flip, Int2 velocity, int rotationSpeed, int gravity) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnBlockPicked_IntSpriteID_IRectAttribute">
            <summary>
            The function will be called when a map block has been picked
            </summary>
            <example><code>
            [OnBlockPicked_IntSpriteID_IRect]
            internal static void ExampleFunction (int spriteID, IRect rectPosition) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnFallIntoWater_Rigidbody_EntityAttribute">
            <summary>
            The function will be called when a rigidbody fall into water
            </summary>
            <example><code>
            [OnFallIntoWater_Rigidbody_Entity]
            internal static void ExampleFunction (Rigidbody rig, Entity water) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnCameOutOfWater_Rigidbody_EntityAttribute">
            <summary>
            The function will be called when a rigidbody came out of water
            </summary>
            <example><code>
            [OnCameOutOfWater_Rigidbody_Entity]
            internal static void ExampleFunction (Rigidbody rig, Entity water) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnDealDamage_Damage_IDamageReceiverAttribute">
            <summary>
            The function will be called when something deal damage to a damage-receiver
            </summary>
            <example><code>
            [OnDealDamage_Damage_IDamageReceiver]
            internal static void ExampleFunction (Damage damage, IDamageReceiver receiver) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnBulletHitEnvironment_BulletAttribute">
            <summary>
            The function will be called when a bullet hit environment (something not an IDamageReceiver)
            </summary>
            <example><code>
            [OnBulletHitEnvironment_Bullet]
            internal static void ExampleFunction (Bullet bullet) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnTransferArrivedAttribute_IntEntityID_Int3UnitPos_ObjectDataAttribute">
            <summary>
            The function will be called when message from TransferSystem.StartTransfer() arrived
            </summary>
            <example><code>
            [OnTransferArrivedAttribute_IntEntityID_Int3UnitPos_ObjectData]
            internal static void ExampleFunction (int receiverID, Int3 unitPosition, object userData) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnTransferPassAttribute_Int3UnitPos_ObjectDataAttribute">
            <summary>
            The function will be called when message from TransferSystem.StartTransfer() pass through
            </summary>
            <example><code>
            [OnTransferPassAttribute_Int3UnitPos_ObjectData]
            internal static void ExampleFunction (Int3 unitPos, object userData) { }
            </code></example>
        </member>
        <member name="T:AngeliA.CircuitOperate_Int3UnitPos_IntStamp_Direction5FromAttribute">
            <summary>
            The function will be called when CircuitSystem triggers the entity that holds this function
            </summary>
            <example><code>
            [CircuitOperate_Int3UnitPos_IntStamp_Direction5From]
            internal static void ExampleFunction (Int3 unitPos, int stamp, Direction5 from) { }
            </code></example>
        </member>
        <member name="T:AngeliA.OnCircuitWireActived_Int3UnitPosAttribute">
            <summary>
            The function will be called when CircuitSystem's electric current pass through
            </summary>
            <example><code>
            [OnCircuitWireActived_Int3UnitPos]
            internal static void ExampleFunction (Int3 unitPos) { }
            </code></example>
        </member>
        <member name="T:AngeliA.EventAttribute">
            <summary>
            Attribute for link all static methods with a System.Action. When the action is invoked, all methods get called.
            </summary>
        </member>
        <member name="M:AngeliA.EventAttribute.#ctor(System.Int32)">
            <summary>
            Attribute for link all static methods with a System.Action. When the action is invoked, all methods get called.
            </summary>
        </member>
        <member name="T:AngeliA.OrderedAttribute">
            <summary>
            Attribute apply to method and call all of them in given order
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:AngeliA.OrderedAttribute.#ctor(System.Int32)">
            <summary>
            Attribute apply to method and call all of them in given order
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:AngeliA.OrderedAttribute.InvokeAsAutoOrderingTask``1">
            <summary>
            Call all static methods in order with given type of attribute
            </summary>
        </member>
        <member name="T:AngeliA.CharacterAttackness">
            <summary>
            Behavior class that handles attack logic for character
            </summary>
        </member>
        <member name="M:AngeliA.CharacterAttackness.#ctor(AngeliA.Character)">
            <summary>
            Behavior class that handles attack logic for character
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.TargetCharacter">
            <summary>
            Character hosting this attackness
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.AimingDirection">
            <summary>
            Which direction does the character attacks
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.IsAttacking">
            <summary>
            True if the character is attacking at the current frame
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.IsAttackIgnored">
            <summary>
            True if the character is not allow to attack at the current frame
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.IsChargingAttack">
            <summary>
            True if the character is charging attack at the current frame
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.LastAttackFrame">
            <summary>
            The start frame of the last attack
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.AttackChargeStartFrame">
            <summary>
            The start frame of the last attack charging
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.LastAttackCharged">
            <summary>
            True if the last performed attack is charged
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.AttackStyleIndex">
            <summary>
            Attack style index of the current attack, indicate what kind of rendering style should be apply to the current attack
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.AttackStartFacingRight">
            <summary>
            True if character facing right when the current attack start
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.AttackDuration">
            <summary>
            How many frames should be the current attack last
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.AttackCooldown">
            <summary>
            How many frames should be wait from the prev attack end to the next attack start
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.MinimalChargeAttackDuration">
            <summary>
            Charge attack longer than this frame should be count as attack charged
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.RepeatAttackWhenHolding">
            <summary>
            True if the character can hold attack button to keep attacking multiple times
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.HoldingAttack">
            <summary>
            True if the character is holding attack button
            </summary>
        </member>
        <member name="P:AngeliA.CharacterAttackness.LockFacingOnAttack">
            <summary>
            True if the character can not change it's facing direction when attacking
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackComboGap">
            <summary>
            Attack happens between this many frames should be combo attacks
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.HoldAttackPunishFrame">
            <summary>
            If hold attack button to perform multiple attacks, the cooldown will be add this frames longer
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.CancelAttackOnJump">
            <summary>
            When character jumps, unfinished attack will be cancel
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.DefaultSpeedRateOnAttack">
            <summary>
            Moving speed will be mutiply be this rate when character is attacking (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AirSpeedRateOnAttack">
            <summary>
            Moving speed will be mutiply be this rate when character is attacking while not grounded (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.WalkingSpeedRateOnAttack">
            <summary>
            Moving speed will be mutiply be this rate when character is attacking while walking (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.RunningSpeedRateOnAttack">
            <summary>
            Moving speed will be mutiply be this rate when character is attacking while running (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackInAir">
            <summary>
            Allow character attack when not grounded
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackInWater">
            <summary>
            Allow character attack when inside water
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenWalking">
            <summary>
            Allow character attack when walking
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenRunning">
            <summary>
            Allow character attack when running
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenClimbing">
            <summary>
            Allow character attack when climbing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenFlying">
            <summary>
            Allow character attack when flying
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenRolling">
            <summary>
            Allow character attack when rolling
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenSquatting">
            <summary>
            Allow character attack when squatting
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenDashing">
            <summary>
            Allow character attack when dashing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenSliding">
            <summary>
            Allow character attack when sliding
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenGrabbing">
            <summary>
            Allow character attack when grabbing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenRush">
            <summary>
            Allow character attack when rushing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterAttackness.AttackWhenPounding">
            <summary>
            Allow character attack when pounding
            </summary>
        </member>
        <member name="M:AngeliA.CharacterAttackness.OnActivated">
            <summary>
            Callback for character entity get activated
            </summary>
        </member>
        <member name="M:AngeliA.CharacterAttackness.PhysicsUpdate_Attack">
            <summary>
            Callback for update the attackness
            </summary>
        </member>
        <member name="M:AngeliA.CharacterAttackness.Attack(System.Boolean,System.Boolean)">
            <summary>
            Perform an attack
            </summary>
            <param name="facingRight">True if the attack is performed when character facing right</param>
            <param name="charged">True if the attack is charged</param>
            <returns></returns>
        </member>
        <member name="M:AngeliA.CharacterAttackness.CancelAttack">
            <summary>
            Cancel current performing attack
            </summary>
        </member>
        <member name="M:AngeliA.CharacterAttackness.IgnoreAimingDirection(AngeliA.Direction8,System.Int32)">
            <summary>
            Do not allow aiming at given direction for specified frames
            </summary>
        </member>
        <member name="M:AngeliA.CharacterAttackness.IsAimingDirectionIgnored(AngeliA.Direction8)">
            <summary>
            True if the given aiming direction is currently ignored
            </summary>
        </member>
        <member name="M:AngeliA.CharacterAttackness.IgnoreAttack(System.Int32)">
            <summary>
            Do not allow attack for specified frames
            </summary>
        </member>
        <member name="M:AngeliA.CharacterAttackness.CancelIgnoreAttack">
            <summary>
            Allowing attack which ignored by IgnoreAttack function
            </summary>
        </member>
        <member name="T:AngeliA.SummonAttackness">
            <summary>
            Behavior class that handles attack logic for summon type character
            </summary>
        </member>
        <member name="M:AngeliA.SummonAttackness.#ctor(AngeliA.Character)">
            <summary>
            Behavior class that handles attack logic for summon type character
            </summary>
        </member>
        <member name="T:AngeliA.Buff">
            <summary>
            Represent a type of buff
            </summary>
        </member>
        <member name="P:AngeliA.Buff.TypeID">
            <summary>
            Unique angehash of this buff class
            </summary>
        </member>
        <member name="P:AngeliA.Buff.NameID">
            <summary>
            Unique angehash for language system to get the display name of this buff
            </summary>
        </member>
        <member name="P:AngeliA.Buff.DescriptionID">
            <summary>
            Unique angehash for language system to get the description of this buff
            </summary>
        </member>
        <member name="P:AngeliA.Buff.TypeName">
            <summary>
            AngeName of this type of buff
            </summary>
        </member>
        <member name="P:AngeliA.Buff.DefaultDuration">
            <summary>
            How many frames should this buff apply by default
            </summary>
        </member>
        <member name="T:AngeliA.CharacterBuff">
            <summary>
            Behavior class that handles buff logic for characters
            </summary>
        </member>
        <member name="P:AngeliA.CharacterBuff.BuffCount">
            <summary>
            Total count for all buff the character is having
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.HasBuff(System.Int32)">
            <summary>
            True if the character is having the given buff
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.GiveBuff(System.Int32,System.Int32)">
            <summary>
            Give the character given buff for specified frames long
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.ClearBuff(System.Int32)">
            <summary>
            Remove the given buff from character
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.ClearAllBuffs">
            <summary>
            Remove all buff from character
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.PreventBuff(System.Int32,System.Int32)">
            <summary>
            Do not allow the character have given buff for specified frames
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.IsBuffPrevented(System.Int32)">
            <summary>
            True if the given buff is being prevented
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.GetBuffData(System.Int32)">
            <summary>
            Get the user data of the given buff from the character
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.SetBuffData(System.Int32,System.Object)">
            <summary>
            Set user data of the given buff to the character
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.GetBuffEndFrame(System.Int32)">
            <summary>
            Get which frame does the given buff ends
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.ForAllBuffs">
            <summary>
            Iterate thought all buffs this character currently have
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.GetBuffDisplayName(System.Int32)">
            <summary>
            Get display name of the given buff from the language system
            </summary>
        </member>
        <member name="M:AngeliA.CharacterBuff.GetBuffDescription(System.Int32)">
            <summary>
            Get description of the given buff from the language system
            </summary>
        </member>
        <member name="T:AngeliA.CharacterHealth">
            <summary>
            Behavior class that handles health logic for character
            </summary>
        </member>
        <member name="P:AngeliA.CharacterHealth.HP">
            <summary>
            Current health point of the character
            </summary>
        </member>
        <member name="P:AngeliA.CharacterHealth.LastDamageFrame">
            <summary>
            The frame when character took damage last time
            </summary>
        </member>
        <member name="P:AngeliA.CharacterHealth.InvincibleEndFrame">
            <summary>
            The frame when character's invincibility ends
            </summary>
        </member>
        <member name="P:AngeliA.CharacterHealth.IsFullHealth">
            <summary>
            True if the character is full of health
            </summary>
        </member>
        <member name="P:AngeliA.CharacterHealth.IsEmptyHealth">
            <summary>
            True if the character have no health point
            </summary>
        </member>
        <member name="P:AngeliA.CharacterHealth.IsInvincible">
            <summary>
            True if the character is currently invincible
            </summary>
        </member>
        <member name="P:AngeliA.CharacterHealth.TakingDamage">
            <summary>
            True if the character is currently taking damage
            </summary>
        </member>
        <member name="F:AngeliA.CharacterHealth.MaxHP">
            <summary>
            Upper limit of the HP
            </summary>
        </member>
        <member name="F:AngeliA.CharacterHealth.InvincibleDuration">
            <summary>
            How many frames does the character's Invincibility last
            </summary>
        </member>
        <member name="F:AngeliA.CharacterHealth.DamageStunDuration">
            <summary>
            How many frames does the character stun when they take damage
            </summary>
        </member>
        <member name="F:AngeliA.CharacterHealth.KnockbackSpeed">
            <summary>
            How fast should the character get knock back when they take damage
            </summary>
        </member>
        <member name="F:AngeliA.CharacterHealth.KnockbackDeceleration">
            <summary>
            Movement deceleration when the character is knocking back after take damage
            </summary>
        </member>
        <member name="F:AngeliA.CharacterHealth.InvincibleOnDash">
            <summary>
            Should character be invincible when dashing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterHealth.InvincibleOnRush">
            <summary>
            Should character be invincible when rushing
            </summary>
        </member>
        <member name="M:AngeliA.CharacterHealth.OnActivated">
            <summary>
            Callback when character entity get activated
            </summary>
        </member>
        <member name="M:AngeliA.CharacterHealth.Heal(System.Int32)">
            <summary>
            Add given amount of HP for the character
            </summary>
            <returns>True when character get healed</returns>
        </member>
        <member name="M:AngeliA.CharacterHealth.MakeInvincible(System.Int32)">
            <summary>
            Let the character become invincible for given frames
            </summary>
        </member>
        <member name="T:AngeliA.CharacterMovement">
            <summary>
            Behavior class that handles movement logic for character
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.#ctor(AngeliA.Rigidbody)">
            <summary>
            Behavior class that handles movement logic for character
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.MovementWidth">
            <summary>
            Default with of the character
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.MovementHeight">
            <summary>
            Height of the character in global space when character is 160cm
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.WalkAvailable">
            <summary>
            Allow character to walk
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.WalkSpeed">
            <summary>
            How fast should the character walk
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.WalkAcceleration">
            <summary>
            Speed acceleration when character is walking
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.WalkBrakeAcceleration">
            <summary>
            Speed acceleration when character is trying to walk to the opposite direction
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.WalkDeceleration">
            <summary>
            Speed deceleration when character is walking
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RunAvailable">
            <summary>
            Allow character to run
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RunSpeed">
            <summary>
            How fast should the character run
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RunAcceleration">
            <summary>
            Speed acceleration when character is running
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RunBrakeAcceleration">
            <summary>
            Speed acceleration when character is trying to run to the opposite direction
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RunDeceleration">
            <summary>
            Speed deceleration when character is running
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.JumpCount">
            <summary>
            How many times can the character jump without touching ground
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.JumpSpeed">
            <summary>
            Initial speed when character start to jump
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.JumpReleaseSpeedRate">
            <summary>
            When character stop trying to jump (player release the jump button), and the character is still moving up, then the current speed will be multiply to this rate (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.JumpRiseGravityRate">
            <summary>
            Gravity applys on the character will multiply this rate when character moving up in air (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.JumpBoostFromMoveRate">
            <summary>
            When character start jump, if it's moving, the running speed will multiply this rate and add into the initial jump speed. (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FirstJumpWithRoll">
            <summary>
            When character jump from ground, does it jump with rolling in air
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SubsequentJumpWithRoll">
            <summary>
            When character jump from air, does it jump with rolling in air
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.JumpBreakRush">
            <summary>
            Allow character jump when rushing and stop the rush
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.JumpBreakDash">
            <summary>
            Allow character jump when dashing and stop the dash
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.AllowSquatJump">
            <summary>
            Allow character jump when squatting, and keep squatting when jump in air
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.JumpDownThroughOneway">
            <summary>
            Allow character jump down and go through oneway gate (player holding down button and press jump button once)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SquatAvailable">
            <summary>
            Allow character to squat
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SquatHeightAmount">
            <summary>
            Character hitbox height multiply this rate when squatting (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SquatMoveSpeed">
            <summary>
            Move speed when character squatting, set to 0 when not allow squat move
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SquatAcceleration">
            <summary>
            Movement acceleration when squat moving
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SquatDeceleration">
            <summary>
            Movement deceleration when squat moving
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.DashAvailable">
            <summary>
            Allow character to dash (player hold down button and press jump button for once)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.DashHeightAmount">
            <summary>
             Character hitbox height multiply this rate when dashing (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.DashWithRoll">
            <summary>
            Character roll when dashing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.DashPutoutFire">
            <summary>
            Allow character dash through fire to put it out
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.DashSpeed">
            <summary>
            Movement speed for dashing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.DashDuration">
            <summary>
            How many frames does dash last
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.DashCooldown">
            <summary>
            Frames length between prev dash end and next dash start
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.DashAcceleration">
            <summary>
            Speed acceleration when dashing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.DashCancelLoseRate">
            <summary>
            Speed multiply this rate when dash being cancel (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushAvailable">
            <summary>
            Allow character to rush
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushHeightAmount">
            <summary>
             Character hitbox height multiply this rate when rushing (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushInAir">
            <summary>
            Allow character rush when not grounded
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushInWater">
            <summary>
            Allow character rush when inside water
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushWhenClimb">
            <summary>
            character rush when climb
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushWhenSquat">
            <summary>
            character rush when squat
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushPutoutFire">
            <summary>
            Allow character rush through fire to put it out
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushSpeed">
            <summary>
            Movement speed when rushing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushStopSpeed">
            <summary>
            Movement speed when rush end
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushDuration">
            <summary>
            How many frames does rush last
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushStiff">
            <summary>
            How many frames does character not allow to move after rush end
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushCooldown">
            <summary>
            How many frames does character has to wair after prev rush end to rush again
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushAcceleration">
            <summary>
            Speed acceleration when rushing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.RushDeceleration">
            <summary>
            Speed deceleration when rushing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SlipAvailable">
            <summary>
            Allow character slip when run on slippery ground
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SlipAcceleration">
            <summary>
            Speed acceleration when moving on slippery ground
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SlipDeceleration">
            <summary>
            Speed deceleration when moving on slippery ground
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.PoundAvailable">
            <summary>
            Allow character ground pound in air (player press down button in air)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.PoundPutoutFire">
            <summary>
            Allow character pound on fire to put it out
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.PoundSpeed">
            <summary>
            Movement speed when pounding
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SwimAvailable">
            <summary>
            Allow character swim in water
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.InWaterSpeedRate">
            <summary>
            When character inside water, the movement speed will multiply this rate (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SwimWidthAmount">
            <summary>
             Character hitbox width multiply this rate when swimming (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SwimHeightAmount">
            <summary>
             Character hitbox height multiply this rate when swimming (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SwimSpeed">
            <summary>
            Movement speed when character swimming
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SwimJumpSpeed">
            <summary>
            Movement speed when character jump inside water
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SwimAcceleration">
            <summary>
            Speed acceleration when chracter inside water
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SwimDeceleration">
            <summary>
            Speed deceleration when chracter inside water
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.ClimbAvailable">
            <summary>
            Allow character to climb
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.AllowJumpWhenClimbing">
            <summary>
            Allow character jump when climbing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.ClimbSpeedX">
            <summary>
            Horizontal speed when climbing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.ClimbSpeedY">
            <summary>
            Vertical speed when climbing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyAvailable">
            <summary>
            Allow character to fly (player press jump button when no jump count left)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyHeightAmount">
            <summary>
            Character hitbox height multiply this rate when flying (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GlideOnFlying">
            <summary>
            When glide flying, character always move to the direction it facing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyCooldown">
            <summary>
            Character has to wait this many frames to fly again
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyRiseSpeed">
            <summary>
            Initial speed when fly start
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyGravityRiseRate">
            <summary>
            Gravity multiply this rate when flying and moving up (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyGravityFallRate">
            <summary>
            Gravity multiply this rate when flying and moving down (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyFallSpeed">
            <summary>
            Fall down speed shen flying
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyMoveSpeed">
            <summary>
            Horizontal move speed when flying
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyAcceleration">
            <summary>
            Speed acceleration when flying
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.FlyDeceleration">
            <summary>
            Speed deceleration when flying
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SlideAvailable">
            <summary>
            Allow character to slide on wall
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SlideOnAnyBlock">
            <summary>
            Allow character to slide on all type of blocks
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.ResetJumpCountWhenSlide">
            <summary>
            Set jump count to 0 when slide
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SlideJumpKickSpeed">
            <summary>
            Horizontal initial speed when character jump when slide
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.SlideDropSpeed">
            <summary>
            Drop down speed when sliding
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabTopAvailable">
            <summary>
            Allow character grab on the bottom of blocks with Tag.GrabTop
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabSideAvailable">
            <summary>
            Allow character grab on the side of blocks with Tag.GrabSide
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabTopHeightAmount">
            <summary>
            Character hitbox height multiply this rate when top-grabbing (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabSideHeightAmount">
            <summary>
            Character hitbox height multiply this rate when side-grabbing (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.ResetJumpCountWhenGrab">
            <summary>
            Set jump count to 0 when character grabbing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabFlipThroughDownAvailable">
            <summary>
            Allow character to flip through block downward (player press down when standing on top-grabable blocks)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabFlipThroughUpAvailable">
            <summary>
            Allow character to flip through block upward (player press up when top-grabbing)
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabFlipThroughDuration">
            <summary>
            How long does flip through takes in frames
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabMoveSpeedX">
            <summary>
            Horizontal move speed when top-grabbing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabMoveSpeedY">
            <summary>
             Vertical move speed when side-grabbing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.GrabSideJumpKickSpeed">
            <summary>
            Horizontal initial speed when character jump when side-grabbing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.CrashAvailable">
            <summary>
            Allow character crash
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.CrashWhenSlippy">
            <summary>
            Make character crash when running too long on slippery ground or rush on slippery ground
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.CrashDuration">
            <summary>
            How many frames does it takes for one crash
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.CrashRunDurationRequire">
            <summary>
            How many frames does it takes to make character crash
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.CrashDeceleration">
            <summary>
            Speed deceleration when character crashing
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.PushAvailable">
            <summary>
            Allow character push other rigidbody
            </summary>
        </member>
        <member name="F:AngeliA.CharacterMovement.PushSpeed">
            <summary>
            Movement speed when character pushing
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastMoveDirection">
            <summary>
            Direction for last movement
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IntendedX">
            <summary>
            1 if character want to move right, -1 for left
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IntendedY">
            <summary>
            1 if character want to move up, -1 for down
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.CurrentJumpCount">
            <summary>
            How many times does character jumps after touching ground
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.FacingRight">
            <summary>
            True if character currently facing right
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.FacingFront">
            <summary>
            True if character currently facing front
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.ShouldRun">
            <summary>
            True if character want to run instead of walk when move
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.SyncFromConfigFile">
            <summary>
            Does movement config sync with json file in game universe folder
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastGroundFrame">
            <summary>
            Last frame when character start touching ground
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastGroundingFrame">
            <summary>
            Last frame when character is touching ground
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastStartMoveFrame">
            <summary>
            Last frame when character start to move
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastEndMoveFrame">
            <summary>
            Last frame when character moving ends
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastJumpFrame">
            <summary>
            Last frame when character start to jump
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastClimbFrame">
            <summary>
            Last frame when character climb
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastDashFrame">
            <summary>
            Last frame when character start to dash
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastRushStartFrame">
            <summary>
            Last frame when character start to rush
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastCrashFrame">
            <summary>
            Last frame when character crash
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastSlippyMoveStartFrame">
            <summary>
            Last frame when character start to move on slippery ground
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastSquatStartFrame">
            <summary>
            Last frame when character start to squat
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastSquattingFrame">
            <summary>
            Last frame when character is squatting
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastPoundingFrame">
            <summary>
            Last frame when character is pounding
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastSlidingFrame">
            <summary>
            Last frame when character is sliding on wall
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastGrabbingFrame">
            <summary>
            Last frame when character is grabbing
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastFlyFrame">
            <summary>
            Last frame when character start to fly
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastGrabFlipUpFrame">
            <summary>
            Last frame when character start to grab flip upward
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastGrabFlipDownFrame">
            <summary>
            Last frame when character start to grab flip downward
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastGrabCancelFrame">
            <summary>
            Last frame when character stop grabbing
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastStartRunFrame">
            <summary>
            Last frame when character start to run
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.LastFacingChangeFrame">
            <summary>
            Last frame when character change horizontal facing
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.MovementState">
            <summary>
            Current movement type
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsGrabFlipping">
            <summary>
            True if character flipping through blocks
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsGrabFlippingUp">
            <summary>
            True if character flipping through blocks upward
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsGrabFlippingDown">
            <summary>
            True if character flipping through blocks downward
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsMoving">
            <summary>
            True if character is moving
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsWalking">
            <summary>
            True if character is walking
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsRunning">
            <summary>
            True if character is running
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsRolling">
            <summary>
            True if character is rolling
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsDashing">
            <summary>
            True if character is dashing
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsRushing">
            <summary>
            True if character is rushing
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsCrashing">
            <summary>
            True if character is crashing
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsSquatting">
            <summary>
            True if character is squatting
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsPounding">
            <summary>
            True if character is pounding
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsClimbing">
            <summary>
            True if character is climbing
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsFlying">
            <summary>
            True if character is flying
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsSliding">
            <summary>
            True if character is sliding on wall
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsGrabbingTop">
            <summary>
            True if character is top-grabbing
            </summary>
        </member>
        <member name="P:AngeliA.CharacterMovement.IsGrabbingSide">
            <summary>
            True if character is side-grabbing
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.ReloadMovementConfigFromFile">
            <summary>
            Load movement data from json file inside game universe folder
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.Move(AngeliA.Direction3,AngeliA.Direction3,System.Boolean)">
            <summary>
            Move the character
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="walk">True if character want to walk instead of run</param>
        </member>
        <member name="M:AngeliA.CharacterMovement.Stop">
            <summary>
            Stop current movement
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.HoldJump(System.Boolean)">
            <summary>
            Is character holding jump (call this every frame no matter character is jumpping or not)
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.Jump(System.Boolean)">
            <summary>
            Perform jump (call this once when jump start)
            </summary>
            <param name="isSquatJump">Is this jump a squat jump or not</param>
        </member>
        <member name="M:AngeliA.CharacterMovement.Dash">
            <summary>
            Perform dash (call this once when dash start)
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.StopDash">
            <summary>
            Stop current dashing 
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.Pound">
            <summary>
            Perform pound (call this once when pound start)
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.Rush">
            <summary>
            Perform rush (call this once when rush start)
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.StopRush">
            <summary>
            Stop current rush
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.Crash">
            <summary>
            Perform crash (call this once when crash start)
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.StopCrash">
            <summary>
            Stop current crash
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.LockFacingRight(System.Boolean,System.Int32)">
            <summary>
            Force character facing right or left for given frames
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.LockSquat(System.Int32)">
            <summary>
            Force character to squat for given frames
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.SetSpeedRate(System.Int32,System.Int32)">
            <summary>
            Force movement speed rate for given frames
            </summary>
            <param name="newRate">0 means 0%, 1000 means 100%</param>
            <param name="duration"></param>
        </member>
        <member name="M:AngeliA.CharacterMovement.CalculateMovementState(AngeliA.CharacterMovement)">
            <summary>
            Get current movement type base on current cached data
            </summary>
        </member>
        <member name="M:AngeliA.CharacterMovement.GetMovementState">
            <summary>
            Get current movement type base on current cached data
            </summary>
        </member>
        <member name="T:AngeliA.CharacterRenderer">
            <summary>
            Behaviour class handles rendering of character
            </summary>
        </member>
        <member name="M:AngeliA.CharacterRenderer.#ctor(AngeliA.Character)">
            <summary>
            Behaviour class handles rendering of character
            </summary>
        </member>
        <member name="P:AngeliA.CharacterRenderer.SpinOnGroundPound">
            <summary>
            Does character spin when ground pound
            </summary>
        </member>
        <member name="P:AngeliA.CharacterRenderer.Tint">
            <summary>
            Final color tint
            </summary>
        </member>
        <member name="P:AngeliA.CharacterRenderer.Scale">
            <summary>
             Final size scaling (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="M:AngeliA.CharacterRenderer.OnActivated">
            <summary>
            Callback function for character entity get activated
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.CM_PER_PX">
            <summary>
            How many cm does one artwork pixel represents
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.BasicRootY">
            <summary>
            Mid-Bottom local position of character hip y position
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.PoseRootX">
            <summary>
            Total offset X for pose rendering
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.PoseRootY">
            <summary>
            Total offset Y for pose rendering
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.HeadTwist">
            <summary>
            Make head rotate like shaking head 
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.BodyTwist">
            <summary>
            Make body rotate left or right
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.CharacterHeight">
            <summary>
            Character body height in cm
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.RenderedCellZ">
            <summary>
            Basic rendering Z value for last time character get rendered
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.BlendDuration">
            <summary>
            How many frames does it takes the character to transition from one pose to another
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.BodyParts">
            <summary>
            All body parts of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.Head">
            <summary>
            Head of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.Body">
            <summary>
            Body of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.Hip">
            <summary>
            Hip of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.ShoulderL">
            <summary>
            Left shoulder of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.ShoulderR">
            <summary>
            Right shoulder of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.UpperArmL">
            <summary>
            Left upper arm of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.UpperArmR">
            <summary>
            Right upper arm of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.LowerArmL">
            <summary>
            Left lower arm of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.LowerArmR">
            <summary>
            Right lower arm of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.HandL">
            <summary>
            Left hand of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.HandR">
            <summary>
            Right hand of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.UpperLegL">
            <summary>
            Left upper leg of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.UpperLegR">
            <summary>
            Right upper leg of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.LowerLegL">
            <summary>
            Left lower leg of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.LowerLegR">
            <summary>
            Right lower leg of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.FootL">
            <summary>
            Left foot of the pose character
            </summary>
        </member>
        <member name="P:AngeliA.PoseCharacterRenderer.FootR">
            <summary>
            Right foot of the pose character
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.HandGrabRotationL">
            <summary>
            Rotation of the object grabbing by the left hand
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.HandGrabRotationR">
            <summary>
            Rotation of the object grabbing by the right hand
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.HandGrabScaleL">
            <summary>
            Size scaling of the object grabbing by the left hand (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.HandGrabScaleR">
            <summary>
            Size scaling of the object grabbing by the right hand (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.HandGrabAttackTwistL">
            <summary>
            Angle twist of the object grabbing by the left hand (0 means disappear, 1000 means normal)
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.HandGrabAttackTwistR">
            <summary>
            Angle twist of the object grabbing by the right hand (0 means disappear, 1000 means normal)
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.FaceID">
            <summary>
            ID of current face gadget instance
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.HairID">
            <summary>
            ID of current hair gadget instance
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.EarID">
            <summary>
            ID of current animal-ear gadget instance (like cat-girl's ears, not human ears)
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.TailID">
            <summary>
            ID of current tail gadget instance
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.WingID">
            <summary>
            ID of current wing gadget instance
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.HornID">
            <summary>
            ID of current horn gadget instance
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.ForceFaceExpressionIndex">
            <summary>
            Which face expression does the face need to render
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.SuitHead">
            <summary>
            Current hat suit id
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.SuitBody">
            <summary>
            Current body suit id (cloth with sleeves)
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.SuitHip">
            <summary>
            Current hip suit id (pants or skirt)
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.SuitHand">
            <summary>
            Current gloves suit id
            </summary>
        </member>
        <member name="F:AngeliA.PoseCharacterRenderer.SuitFoot">
            <summary>
            Current shoes suit id
            </summary>
        </member>
        <member name="M:AngeliA.PoseCharacterRenderer.GetGadgetID(AngeliA.BodyGadgetType)">
            <summary>
            Get current body gadget ID the character is using
            </summary>
        </member>
        <member name="M:AngeliA.PoseCharacterRenderer.GetSuitID(AngeliA.ClothType)">
            <summary>
            Get current suit ID the character is using
            </summary>
        </member>
        <member name="M:AngeliA.PoseCharacterRenderer.OverridePoseAnimation(AngeliA.CharacterAnimationType,System.Int32,System.Int32)">
            <summary>
            Override animation for given animation type for specified frames long
            </summary>
        </member>
        <member name="M:AngeliA.PoseCharacterRenderer.ManualPoseAnimate(System.Int32,System.Int32)">
            <summary>
            Make the renderer draw the character based on the given animation for specified frames long
            </summary>
        </member>
        <member name="T:AngeliA.AngePath">
            <summary>
            Utility class for path-related logic in an AngeliA project
            </summary>
        </member>
        <member name="F:AngeliA.AngePath.EQ_INVENTORY_FILE_EXT">
            <summary>
            Inventory file extension with equipment data
            </summary>
        </member>
        <member name="F:AngeliA.AngePath.EQ_INVENTORY_SEARCH_PATTERN">
            <summary>
            Inventory file search pattern with equipment data
            </summary>
        </member>
        <member name="P:AngeliA.AngePath.BuiltInUniverseRoot">
            <summary>
            Game universe folder path. This folder contents project data for an AngeliA project
            </summary>
        </member>
        <member name="T:AngeliA.AutoValidList`1">
            <summary>
            A list that automatically remove element inside based on the given function
            </summary>
        </member>
        <member name="M:AngeliA.AutoValidList`1.#ctor(System.Int32,System.Func{`0,System.Boolean})">
            <summary>
            A list that automatically remove element inside based on the given function
            </summary>
        </member>
        <member name="P:AngeliA.AutoValidList`1.Count">
            <summary>
            How many elements are currently inside this list
            </summary>
        </member>
        <member name="P:AngeliA.AutoValidList`1.Capacity">
            <summary>
            Max element count
            </summary>
        </member>
        <member name="M:AngeliA.AutoValidList`1.Update">
            <summary>
            Valid all elements in the list based on the given funtion.
            </summary>
        </member>
        <member name="T:AngeliA.BuiltInSprite">
            <summary>
            Utility class to get built-in sprites 
            </summary>
        </member>
        <member name="T:AngeliA.BuiltInText">
            <summary>
            Utility class to get built-in text through language system
            </summary>
        </member>
        <member name="T:AngeliA.Cell">
            <summary>
            Rendering cell
            </summary>
        </member>
        <member name="P:AngeliA.Cell.TextSprite">
            <summary>
            Sprite for rendering text character
            </summary>
        </member>
        <member name="F:AngeliA.Cell.SheetIndex">
            <summary>
            Which sprite sheet does this cell use. -1 means main sheet.
            </summary>
        </member>
        <member name="F:AngeliA.Cell.Z">
            <summary>
            Z position for sorting
            </summary>
        </member>
        <member name="P:AngeliA.Cell.Rotation">
            <summary>
            Rotation of the cell, 0 means up, 90 means right
            </summary>
        </member>
        <member name="F:AngeliA.Cell.Rotation1000">
            <summary>
            Actual rotation data of the cell, 0 means up, 90000 means right
            </summary>
        </member>
        <member name="F:AngeliA.Cell.PivotX">
            <summary>
            Which place of the cell should be align with the X position. 0 means left edge, 1 means right edge.
            </summary>
        </member>
        <member name="F:AngeliA.Cell.PivotY">
            <summary>
            Which place of the cell should be align with the Y position. 0 means bottom edge, 1 means top edge.
            </summary>
        </member>
        <member name="F:AngeliA.Cell.Shift">
            <summary>
            How many edge should be clip off. 0 means no clip off, set left into "width" means clip off all of them
            </summary>
        </member>
        <member name="F:AngeliA.Cell.BorderSide">
            <summary>
            Which side does this cell belongs to when it's rendered in 9-slice mode
            </summary>
        </member>
        <member name="M:AngeliA.Cell.SetRect(AngeliA.IRect)">
            <summary>
            Set X,Y,Width,Height with a rect
            </summary>
        </member>
        <member name="M:AngeliA.Cell.ReturnPivots">
            <summary>
            Set pivot of the cell into (0,0) and let position adapt, so the final position of the cell remain the same
            </summary>
        </member>
        <member name="M:AngeliA.Cell.ReturnPivots(System.Single,System.Single)">
            <summary>
            Set pivot of the cell and let position adapt, so the final position of the cell remain the same
            </summary>
        </member>
        <member name="M:AngeliA.Cell.ReturnPosition(System.Int32,System.Int32)">
            <summary>
            Set position of the cell and let pivot adapt, so the final position of the cell remain the same
            </summary>
        </member>
        <member name="M:AngeliA.Cell.RotateAround(System.Int32,System.Int32,System.Int32)">
            <summary>
            Rotate the cell around the given position
            </summary>
        </member>
        <member name="M:AngeliA.Cell.ScaleFrom(System.Int32,System.Int32,System.Int32)">
            <summary>
            Scale the cell based on the given position
            </summary>
        </member>
        <member name="M:AngeliA.Cell.ScaleFrom(System.Single,System.Int32,System.Int32)">
            <summary>
            Scale the cell based on the given position
            </summary>
        </member>
        <member name="M:AngeliA.Cell.GetGlobalBounds">
            <summary>
            Get the boundary occupied by the cell
            </summary>
        </member>
        <member name="M:AngeliA.Cell.Clamp(AngeliA.IRect)">
            <summary>
            Clamp the content inside the given rect range
            </summary>
        </member>
        <member name="T:AngeliA.Const">
            <summary>
            Utility class for constant values
            </summary>
        </member>
        <member name="F:AngeliA.Const.CEL">
            <summary>
            Global size of a block unit
            </summary>
        </member>
        <member name="F:AngeliA.Const.HALF">
            <summary>
            Global size of a half block unit
            </summary>
        </member>
        <member name="F:AngeliA.Const.QUARTER">
            <summary>
            Global size of a quarter block unit
            </summary>
        </member>
        <member name="F:AngeliA.Const.CEL2">
            <summary>
            Global size of a block unit
            </summary>
        </member>
        <member name="F:AngeliA.Const.HALF2">
            <summary>
            Global size of a half block unit
            </summary>
        </member>
        <member name="F:AngeliA.Const.QUARTER2">
            <summary>
            Global size of a quarter block unit
            </summary>
        </member>
        <member name="F:AngeliA.Const.MAP">
            <summary>
            Unit size of a map file
            </summary>
        </member>
        <member name="F:AngeliA.Const.ART_CEL">
            <summary>
            Global size of a artwork pixel
            </summary>
        </member>
        <member name="F:AngeliA.Const.ART_SCALE">
            <summary>
            Size ratio between global size and artwork pixel
            </summary>
        </member>
        <member name="F:AngeliA.Const.LEVEL_SPAWN_PADDING_UNIT">
            <summary>
            Level block expand distance from view-rect in unit (1 unit = 256 global size)
            </summary>
        </member>
        <member name="F:AngeliA.Const.SPAWN_PADDING_UNIT">
            <summary>
            Entity spawning expand distance from view-rect in unit (1 unit = 256 global size)
            </summary>
        </member>
        <member name="F:AngeliA.Const.ANTI_SPAWN_PADDING_UNIT">
            <summary>
            Entity anti-spawning rect expand distance from view-rect in unit (1 unit = 256 global size)
            </summary>
        </member>
        <member name="F:AngeliA.Const.LEVEL_SPAWN_PADDING">
            <summary>
            Level block expand distance from view-rect in global size
            </summary>
        </member>
        <member name="F:AngeliA.Const.SPAWN_PADDING">
            <summary>
            Entity spawning expand distance from view-rect in global size
            </summary>
        </member>
        <member name="F:AngeliA.Const.ANTI_SPAWN_PADDING">
            <summary>
            Entity anti-spawning rect expand distance from view-rect in global size
            </summary>
        </member>
        <member name="F:AngeliA.Const.TEAM_ENVIRONMENT">
            <summary>
            Attack target team for environment
            </summary>
        </member>
        <member name="F:AngeliA.Const.TEAM_NEUTRAL">
            <summary>
            Attack target team for neutral
            </summary>
        </member>
        <member name="F:AngeliA.Const.TEAM_PLAYER">
            <summary>
            Attack target team for player
            </summary>
        </member>
        <member name="F:AngeliA.Const.TEAM_ENEMY">
            <summary>
            Attack target team for enemy
            </summary>
        </member>
        <member name="F:AngeliA.Const.TEAM_ALL">
            <summary>
            Attack target team for all
            </summary>
        </member>
        <member name="F:AngeliA.Const.TEAM_COUNT">
            <summary>
            Attack target team total count
            </summary>
        </member>
        <member name="F:AngeliA.Const.ORIGINAL_SIZE">
            <summary>
            Use the original size of the sprite from artwork sheet
            </summary>
        </member>
        <member name="F:AngeliA.Const.ORIGINAL_PIVOT">
            <summary>
            Use the original pivot of the sprite from artwork sheet
            </summary>
        </member>
        <member name="F:AngeliA.Const.ORIGINAL_SIZE_NEGATAVE">
            <summary>
            Use the original size * -1 of the sprite from artwork sheet
            </summary>
        </member>
        <member name="F:AngeliA.Const.PIXEL">
            <summary>
            Sprite ID of the 1x1 white pixel
            </summary>
        </member>
        <member name="F:AngeliA.Const.SCREEN_EFFECT_TINT">
            <summary>
            Screen effect index for the tint effect
            </summary>
        </member>
        <member name="F:AngeliA.Const.SCREEN_EFFECT_RETRO_DARKEN">
            <summary>
            Screen effect index for the retro-darken effect
            </summary>
        </member>
        <member name="F:AngeliA.Const.SCREEN_EFFECT_RETRO_LIGHTEN">
            <summary>
            Screen effect index for the retro-lighten effect
            </summary>
        </member>
        <member name="F:AngeliA.Const.SCREEN_EFFECT_VIGNETTE">
            <summary>
            Screen effect index for the vignette effect
            </summary>
        </member>
        <member name="F:AngeliA.Const.SCREEN_EFFECT_GREYSCALE">
            <summary>
            Screen effect index for the grey-scale effect
            </summary>
        </member>
        <member name="F:AngeliA.Const.SCREEN_EFFECT_INVERT">
            <summary>
            Screen effect index for the invert effect
            </summary>
        </member>
        <member name="F:AngeliA.Const.SCREEN_EFFECT_COUNT">
            <summary>
            Screen effect total count
            </summary>
        </member>
        <member name="F:AngeliA.Const.CURSOR_NONE">
            <summary>
            No mouse cursor
            </summary>
        </member>
        <member name="F:AngeliA.Const.CURSOR_DEFAULT">
            <summary>
            Default mouse cursor
            </summary>
        </member>
        <member name="F:AngeliA.Const.CURSOR_ARROW">
            <summary>
            Pointing arrow mouse cursor
            </summary>
        </member>
        <member name="F:AngeliA.Const.CURSOR_BEAM">
            <summary>
            Texting beam mouse cursor for input field
            </summary>
        </member>
        <member name="F:AngeliA.Const.CURSOR_CROSSHAIR">
            <summary>
            Cross shape mouse cursor with no arrow on the edge
            </summary>
        </member>
        <member name="F:AngeliA.Const.CURSOR_HAND">
            <summary>
            Point hand mouse cursor
            </summary>
        </member>
        <member name="F:AngeliA.Const.CURSOR_RESIZE_HORIZONTAL">
            <summary>
            Mouse cursor with arrows pointing left and right
            </summary>
        </member>
        <member name="F:AngeliA.Const.CURSOR_RESIZE_VERTICAL">
            <summary>
            Mouse cursor with arrows pointing up and down
            </summary>
        </member>
        <member name="F:AngeliA.Const.CURSOR_RESIZE_TOPLEFT">
            <summary>
            Mouse cursor with arrows pointing top-left and bottom-right (like \)
            </summary>
        </member>
        <member name="F:AngeliA.Const.CURSOR_RESIZE_TOPRIGHT">
            <summary>
            Mouse cursor with arrows pointing top-right and bottom-left (like /)
            </summary>
        </member>
        <member name="F:AngeliA.Const.CURSOR_RESIZE_CROSS">
            <summary>
            Mouse cursor with arrows pointing left, right, up and down.
            </summary>
        </member>
        <member name="F:AngeliA.Const.CURSOR_PROHIBIT">
            <summary>
            Forbidden symbol mouse cursor
            </summary>
        </member>
        <member name="F:AngeliA.Const.CURSOR_COUNT">
            <summary>
            Total count of mouse cursor styles
            </summary>
        </member>
        <member name="M:AngeliA.Const.EmptyMethod">
            <summary>
            Literally an empty method
            </summary>
        </member>
        <member name="M:AngeliA.Const.EmptyBoolMethod">
            <summary>
            Literally an empty method that returns a bool value (It returns "true" if you wonder)
            </summary>
        </member>
        <member name="T:AngeliA.Damage">
            <summary>
            Data structure for a single damage performed
            </summary>
            <param name="amount">How many damage it deals</param>
            <param name="targetTeam">What team does it attacks</param>
            <param name="bullet">Which bullet does it came from</param>
            <param name="type">What special type does it holds</param>
        </member>
        <member name="M:AngeliA.Damage.#ctor(System.Int32,System.Int32,AngeliA.Entity,AngeliA.Tag)">
            <summary>
            Data structure for a single damage performed
            </summary>
            <param name="amount">How many damage it deals</param>
            <param name="targetTeam">What team does it attacks</param>
            <param name="bullet">Which bullet does it came from</param>
            <param name="type">What special type does it holds</param>
        </member>
        <member name="F:AngeliA.Damage.IgnoreInvincible">
            <summary>
            Do not make target become invincible after take this damage
            </summary>
        </member>
        <member name="F:AngeliA.Damage.IgnoreStun">
            <summary>
            Do not make target stun after take this damage
            </summary>
        </member>
        <member name="T:AngeliA.Debug">
            <summary>
            Log debug messages to the console or screen
            </summary>
        </member>
        <member name="M:AngeliA.Debug.LogLabel(System.Object[])">
            <inheritdoc cref="M:AngeliA.Debug.LogLabel(System.String)"/>
        </member>
        <member name="M:AngeliA.Debug.LogLabel(System.Object)">
            <inheritdoc cref="M:AngeliA.Debug.LogLabel(System.String)"/>
        </member>
        <member name="M:AngeliA.Debug.LogLabel(System.String)">
            <summary>
            Draw a label on top-right of the screen for the current frame
            </summary>
        </member>
        <member name="T:AngeliA.DebugTool">
            <summary>
            Provide extra tools for debugging. eg. Drag with mouse middle button to move player.
            </summary>
        </member>
        <member name="F:AngeliA.DebugTool.DragPlayerInMiddleButtonToMove">
            <summary>
            True if allow user use middle mouse button to move player for debug. This feature is not include after the game publish.
            </summary>
        </member>
        <member name="F:AngeliA.DebugTool.UseDebugHotkey">
            <summary>
            True if use hotkeys to debug. eg. Ctrl+Alt+I to make player invincible
            </summary>
        </member>
        <member name="T:AngeliA.EntityLayer">
            <summary>
            Layer for entity spawning
            </summary>
        </member>
        <member name="F:AngeliA.EntityLayer.GAME">
            <summary>
            Default option
            </summary>
        </member>
        <member name="F:AngeliA.EntityLayer.DECORATE">
            <summary>
            Particles, Effects etc...
            </summary>
        </member>
        <member name="T:AngeliA.WrapMode">
            <summary>
            How text wrap when reach edge
            </summary>
        </member>
        <member name="T:AngeliA.OperationMode">
            <summary>
            What type of cells are included for the operation
            </summary>
        </member>
        <member name="T:AngeliA.Extension">
            <summary>
            Extension method for AngeliA projects
            </summary>
        </member>
        <member name="M:AngeliA.Extension.AngeName(System.Type)">
            <summary>
            Name of this type that used inside AngeliA
            </summary>
        </member>
        <member name="M:AngeliA.Extension.AngeHash(System.Type)">
            <summary>
            Hash code that used inside AngeliA
            </summary>
        </member>
        <member name="M:AngeliA.Extension.AngeHash(System.String)">
            <summary>
            Hash code that used inside AngeliA
            </summary>
        </member>
        <member name="M:AngeliA.Extension.AngeHash(System.String,System.Int32,System.Int32)">
            <summary>
            Hash code that used inside AngeliA
            </summary>
        </member>
        <member name="M:AngeliA.Extension.AngeReverseHash(System.Char[],System.Int32,System.Int32)">
            <summary>
            Hash code that used inside AngeliA but generate with the reversed string data
            </summary>
        </member>
        <member name="M:AngeliA.Extension.IsLyingDown(AngeliA.CharacterAnimationType)">
            <summary>
            True if the character should be rendered lying down
            </summary>
        </member>
        <member name="M:AngeliA.Extension.MouseInside(AngeliA.IRect)">
            <summary>
            True if mouse currently inside the given rectangle
            </summary>
        </member>
        <member name="M:AngeliA.Extension.SlideLeft(AngeliA.IRect@,System.Int32)">
            <summary>
            Move the rect left by it's width.
            </summary>
            <param name="rect"></param>
            <param name="padding">Extra distance to move</param>
        </member>
        <member name="M:AngeliA.Extension.SlideRight(AngeliA.IRect@,System.Int32)">
            <summary>
            Move the rect right by it's width.
            </summary>
            <param name="rect"></param>
            <param name="padding">Extra distance to move</param>
        </member>
        <member name="M:AngeliA.Extension.SlideDown(AngeliA.IRect@,System.Int32)">
            <summary>
            Move the rect down by it's height.
            </summary>
            <param name="rect"></param>
            <param name="padding">Extra distance to move</param>
        </member>
        <member name="M:AngeliA.Extension.SlideUp(AngeliA.IRect@,System.Int32)">
            <summary>
            Move the rect up by it's height.
            </summary>
            <param name="rect"></param>
            <param name="padding">Extra distance to move</param>
        </member>
        <member name="T:AngeliA.FrameBasedValue">
            <summary>
            A data that can be override for specified frames
            </summary>
        </member>
        <member name="T:AngeliA.FrameBasedValue`1">
            <inheritdoc cref="T:AngeliA.FrameBasedValue"/>
        </member>
        <member name="T:AngeliA.FrameBasedInt">
            <inheritdoc cref="T:AngeliA.FrameBasedValue"/>
        </member>
        <member name="M:AngeliA.FrameBasedInt.#ctor(System.Int32)">
            <inheritdoc cref="T:AngeliA.FrameBasedValue"/>
        </member>
        <member name="T:AngeliA.FrameBasedBool">
            <inheritdoc cref="T:AngeliA.FrameBasedValue"/>
        </member>
        <member name="M:AngeliA.FrameBasedBool.#ctor(System.Boolean)">
            <inheritdoc cref="T:AngeliA.FrameBasedValue"/>
        </member>
        <member name="T:AngeliA.FrameBasedColor">
            <inheritdoc cref="T:AngeliA.FrameBasedValue"/>
        </member>
        <member name="M:AngeliA.FrameBasedColor.#ctor(AngeliA.Color32)">
            <inheritdoc cref="T:AngeliA.FrameBasedValue"/>
        </member>
        <member name="T:AngeliA.PhysicsLayer">
            <summary>
            A single physics layer
            </summary>
        </member>
        <member name="T:AngeliA.PhysicsMask">
            <summary>
            A group of physics layera
            </summary>
        </member>
        <member name="F:AngeliA.PhysicsMask.DAMAGE">
            <summary>
            Colliders inside damage layer will deal damage when overlape with IDamageReceiver
            </summary>
        </member>
        <member name="F:AngeliA.PhysicsMask.ENTITY">
            <summary>
            ENVIRONMENT | CHARACTER
            </summary>
        </member>
        <member name="F:AngeliA.PhysicsMask.DYNAMIC">
            <summary>
            ENVIRONMENT | ITEM | CHARACTER
            </summary>
        </member>
        <member name="F:AngeliA.PhysicsMask.SOLID">
            <summary>
            LEVEL | ENVIRONMENT | CHARACTER
            </summary>
        </member>
        <member name="F:AngeliA.PhysicsMask.MAP">
            <summary>
            LEVEL | ENVIRONMENT
            </summary>
        </member>
        <member name="T:AngeliA.Pipe`1">
            <summary>
            A linked list that can add/remove from head/tail. No heap pressure.
            </summary>
        </member>
        <member name="M:AngeliA.Pipe`1.#ctor(System.Int32)">
            <summary>
            A linked list that can add/remove from head/tail. No heap pressure.
            </summary>
        </member>
        <member name="P:AngeliA.Pipe`1.Item(System.Int32)">
            <summary>
            Get filled data at index
            </summary>
            <param name="index">Local index from "Start"</param>
        </member>
        <member name="P:AngeliA.Pipe`1.Data">
            <summary>
            Raw data of this pipe
            </summary>
        </member>
        <member name="P:AngeliA.Pipe`1.Capacity">
            <summary>
            Total length of the data
            </summary>
        </member>
        <member name="P:AngeliA.Pipe`1.Start">
            <summary>
            Head index of the filled data
            </summary>
        </member>
        <member name="P:AngeliA.Pipe`1.Length">
            <summary>
            Length of the filled data
            </summary>
        </member>
        <member name="P:AngeliA.Pipe`1.IsFull">
            <summary>
            True if the pipe reached max capacity
            </summary>
        </member>
        <member name="M:AngeliA.Pipe`1.TryPeekHead(`0@)">
            <summary>
            Get data at head without remove the data from pipe
            </summary>
            <returns>True if length of pipe is not 0</returns>
        </member>
        <member name="M:AngeliA.Pipe`1.TryPeekTail(`0@)">
            <summary>
            Get data at tail without remove the data from pipe
            </summary>
            <returns>True if length of pipe is not 0</returns>
        </member>
        <member name="M:AngeliA.Pipe`1.LinkToHead(`0)">
            <summary>
            Add data before head
            </summary>
            <returns>True if the data is added</returns>
        </member>
        <member name="M:AngeliA.Pipe`1.LinkToTail(`0)">
            <summary>
            Add data after tail
            </summary>
            <returns>True if the data is added</returns>
        </member>
        <member name="M:AngeliA.Pipe`1.TryPopHead(`0@)">
            <summary>
            Get and remove data at head
            </summary>
            <returns>True if pipe is not empty</returns>
        </member>
        <member name="M:AngeliA.Pipe`1.TryPopTail(`0@)">
            <summary>
            Get and remove data at tail
            </summary>
            <returns>True if pipe is not empty</returns>
        </member>
        <member name="M:AngeliA.Pipe`1.Reorganize">
            <summary>
            Move data at head to the first of the internal array
            </summary>
        </member>
        <member name="T:AngeliA.PixelPerfect">
            <summary>
            Class that makes rendering cells pixel perfect
            </summary>
        </member>
        <member name="F:AngeliA.PixelPerfect.Enable">
            <summary>
            True if require pixel perfect for current frame
            </summary>
        </member>
        <member name="P:AngeliA.PixelPerfect.IncludeUiLayer">
            <summary>
            True if require pixel perfect for UI rendering layer
            </summary>
        </member>
        <member name="F:AngeliA.PixelPerfect.PixelScale">
            <summary>
            Global unit / pixel. Default 16.
            </summary>
        </member>
        <member name="T:AngeliA.QTest">
            <summary>
            Utility tool for quick testing ⚠Debug only. Do not work after game release.⚠
            </summary>
        </member>
        <member name="F:AngeliA.QTest.MAX_WINDOW_COUNT">
            <summary>
            Limit of testing window panels
            </summary>
        </member>
        <member name="P:AngeliA.QTest.Testing">
            <summary>
            True if the QTest is operating with window on screen
            </summary>
        </member>
        <member name="P:AngeliA.QTest.ShowNotUpdatedData">
            <summary>
            True if the window include the fields that not update in current frame
            </summary>
        </member>
        <member name="P:AngeliA.QTest.FieldHeight">
            <summary>
            Unified height of a field
            </summary>
        </member>
        <member name="P:AngeliA.QTest.CurrentInvokingParam">
            <summary>
            User data for QTest.Func
            </summary>
        </member>
        <member name="M:AngeliA.QTest.SetCurrentWindow(System.Int32,System.String)">
            <summary>
            Set which window should include the fields comes after
            </summary>
        </member>
        <member name="M:AngeliA.QTest.LoadAllDataFromFile(System.String,System.Boolean)">
            <summary>
            Load testing data from file. This will override current data.
            </summary>
            <param name="path">Path of the data file (not a folder)</param>
            <param name="ignorePanelOffset">True if this function do not adjust position of window panels</param>
        </member>
        <member name="M:AngeliA.QTest.SaveAllDataToFile(System.String)">
            <summary>
            Save current testing data into file
            </summary>
            <param name="path">Path of a file with any extension you want (not a folder)</param>
        </member>
        <member name="M:AngeliA.QTest.Bool(System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            Require a toggle inside the current test window
            </summary>
            <param name="key">Unique key to identify this field</param>
            <param name="defaultValue"></param>
            <param name="displayLabel">Text content for rendering only</param>
            <param name="overrideLabel">Force firld use this label</param>
            <param name="windowIndex">Force field into given window instead of current window</param>
            <returns>The current data of this field</returns>
        </member>
        <member name="M:AngeliA.QTest.Int(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,AngeliA.QTest.IntFieldType,System.Int32)">
            <summary>
            Require a intager slider inside the current test window
            </summary>
            <param name="key">Unique key to identify this field</param>
            <param name="defaultValue"></param>
            <param name="min">Minimal limitation of this value</param>
            <param name="max">Maximal limitation of this value</param>
            <param name="step">Step count when dragging the slider. 0 means no step.</param>
            <param name="displayLabel">Text content for rendering only</param>
            <param name="overrideLabel">Force firld use this label</param>
            <param name="windowIndex">Force field into given window instead of current window</param>
            <param name="useSlider">True if use slider UI for this int</param>
            <returns>The current data of this field</returns>
        </member>
        <member name="M:AngeliA.QTest.Float(System.String,System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Int32)">
            <summary>
            Require a float slider inside the current test window
            </summary>
            <param name="key">Unique key to identify this field</param>
            <param name="defaultValue"></param>
            <param name="min">Minimal limitation of this value</param>
            <param name="max">Maximal limitation of this value</param>
            <param name="step">Step count when dragging the slider. 0 means no step.</param>
            <param name="displayLabel">Text content for rendering only</param>
            <param name="overrideLabel">Force firld use this label</param>
            <param name="windowIndex">Force field into given window instead of current window</param>
            <returns>The current data of this field</returns>
        </member>
        <member name="M:AngeliA.QTest.String(System.String,System.String,System.String,System.Int32)">
            <summary>
            Require a text input field inside the current test window
            </summary>
            <param name="key">Unique key to identify this field</param>
            <param name="defaultValue"></param>
            <param name="windowIndex">Force field into given window instead of current window</param>
            <param name="overrideLabel">Force firld use this label</param>
            <returns>The current data of this field</returns>
        </member>
        <member name="M:AngeliA.QTest.Button(System.String,System.Action,System.Object,System.Object,System.Int32,System.Action,System.String,System.String,System.Action,System.String,System.Action,System.String)">
            <summary>
            Require a set of buttons that invoke the given System.Action when pressed
            </summary>
            <param name="key">Unique key to identify this field</param>
            <param name="action">First button's logic</param>
            <param name="icon">Icon for rendering. This should be a texture instance.</param>
            <param name="param">Custom user data for this field. (Use Qtest.CurrentInvokingParam inside the "action" to get this data)</param>
            <param name="windowIndex">Force field into given window instead of current window</param>
            <param name="action1">Second button's logic</param>
            <param name="action2">Third button's logic</param>
            <param name="action3">Fourth button's logic</param>
            <param name="label">First button's label content</param>
            <param name="label1">Second button's label content</param>
            <param name="label2">Third button's label content</param>
            <param name="label3">Fourth button's label content</param>
        </member>
        <member name="M:AngeliA.QTest.Func(System.String,System.Func{AngeliA.IRect,System.Int32},System.Object,System.Boolean,System.Int32)">
            <summary>
            GUI box that display custom content inside a given window area
            </summary>
            <param name="key">Unique key to identify this field</param>
            <param name="func">GUI rendering function. The param is the rect position that this element should rendering content into. Return value is the height of this field.</param>
            <param name="param">Custom user data for this field. (Use Qtest.CurrentInvokingParam inside the "action" to get this data)</param>
            <param name="showLabel">True if this content require the label name on left side.</param>
            <param name="windowIndex">Force field into given window instead of current window</param>
        </member>
        <member name="M:AngeliA.QTest.ClearAll(System.Int32)">
            <summary>
            Reset all data.
            </summary>
            <param name="windowIndex">Force reset given window instead of current window. Set to -1 to reset all windows.</param>
        </member>
        <member name="M:AngeliA.QTest.SetBool(System.String,System.Boolean,System.Int32)">
            <summary>
            Set a bool value without requiring any field.
            </summary>
            <param name="key">Unique key to identify the data</param>
            <param name="value"></param>
            <param name="windowIndex">Force value set for given window instead of current window</param>
        </member>
        <member name="M:AngeliA.QTest.SetInt(System.String,System.Int32,System.Int32)">
            <summary>
            Set a intager value without requiring any field.
            </summary>
            <param name="key">Unique key to identify the data</param>
            <param name="value"></param>
            <param name="windowIndex">Force value set for given window instead of current window</param>
        </member>
        <member name="M:AngeliA.QTest.SetFloat(System.String,System.Single,System.Int32)">
            <summary>
            Set a float value without requiring any field.
            </summary>
            <param name="key">Unique key to identify the data</param>
            <param name="value"></param>
            <param name="windowIndex">Force value set for given window instead of current window</param>
        </member>
        <member name="M:AngeliA.QTest.SetString(System.String,System.String,System.Int32)">
            <summary>
            Set a string value without requiring any field.
            </summary>
            <param name="key">Unique key to identify the data</param>
            <param name="value"></param>
            <param name="windowIndex">Force value set for given window instead of current window</param>
        </member>
        <member name="M:AngeliA.QTest.SetGroupFolding(System.String,System.Boolean,System.Int32)">
            <summary>
            Make given group fold or unfold
            </summary>
            <param name="key">Unique key to identify the group</param>
            <param name="folding">True if the group should fold</param>
            <param name="windowIndex">Force value set for given window instead of current window</param>
        </member>
        <member name="M:AngeliA.QTest.GetBool(System.String,System.Boolean,System.Int32)">
            <summary>
            Get a bool value without requiring any field.
            </summary>
            <param name="key">Unique key to identify the data</param>
            <param name="defaultValue"></param>
            <param name="windowIndex">Force value set for given window instead of current window</param>
        </member>
        <member name="M:AngeliA.QTest.GetInt(System.String,System.Int32,System.Int32)">
            <summary>
            Get a intager value without requiring any field.
            </summary>
            <param name="key">Unique key to identify the data</param>
            <param name="defaultValue"></param>
            <param name="windowIndex">Force value set for given window instead of current window</param>
        </member>
        <member name="M:AngeliA.QTest.GetFloat(System.String,System.Single,System.Int32)">
            <summary>
            Get a float value without requiring any field.
            </summary>
            <param name="key">Unique key to identify the data</param>
            <param name="defaultValue"></param>
            <param name="windowIndex">Force value set for given window instead of current window</param>
        </member>
        <member name="M:AngeliA.QTest.GetString(System.String,System.String,System.Int32)">
            <summary>
            Get a string value without requiring any field.
            </summary>
            <param name="key">Unique key to identify the data</param>
            <param name="defaultValue"></param>
            <param name="windowIndex">Force value set for given window instead of current window</param>
        </member>
        <member name="M:AngeliA.QTest.StartDrawColumn(System.String,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Start to draw 1D pixel column
            </summary>
            <param name="key">Unique key to identify the field</param>
            <param name="size">Horizontal size in pixel</param>
            <param name="clearPrevPixels">True if the existing pixels should be reset into clear</param>
            <param name="windowIndex">Force start inside for given window instead of current window</param>
        </member>
        <member name="M:AngeliA.QTest.StartDrawPixels(System.String,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Start to draw 2D pixel texture
            </summary>
            <param name="key">Unique key to identify the field</param>
            <param name="width">Width in pixel</param>
            <param name="height">Height in pixel</param>
            <param name="clearPrevPixels">True if the existing pixels should be reset into clear</param>
            <param name="windowIndex">Force start inside for given window instead of current window</param>
        </member>
        <member name="M:AngeliA.QTest.DrawColumn(System.Int32,System.Single,AngeliA.Color32,AngeliA.Color32,System.Int32)">
            <summary>
            Draw a pixel column. Only call this after QTest.StartDrawColumn
            </summary>
            <param name="x">Position X in local pixel space</param>
            <param name="value01">Height of the column. 0 is no size, 1 is full size.</param>
            <param name="color">Color of this column</param>
            <param name="bgColor">Color of the background</param>
            <param name="windowIndex">Force paint into given window instead of current window</param>
        </member>
        <member name="M:AngeliA.QTest.DrawPixel(System.Int32,System.Int32,AngeliA.Color32,System.Int32)">
            <summary>
            Draw a pixel. Only call this after QTest.StartDrawPixels
            </summary>
            <param name="x">Position X in local pixel space</param>
            <param name="y">Position Y in local pixel space</param>
            <param name="pixel">Color of this pixel</param>
            <param name="windowIndex">Force paint into given window instead of current window</param>
        </member>
        <member name="M:AngeliA.QTest.GetPngByteFromPixels(System.Int32,System.Object@)">
            <summary>
            Get png texture file byte array from given window's current drawing cache.
            </summary>
            <param name="windowIndex">Index of the window</param>
            <param name="texture">Result texture instance</param>
            <returns>The png byte array. Return null if currently don't have any pixels data</returns>
        </member>
        <member name="M:AngeliA.QTest.Mark(AngeliA.Int2,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.QTest.Mark(System.Int32,System.Int32,AngeliA.Color32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.QTest.Mark(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.QTest.Mark(System.Int32,System.Int32,AngeliA.Color32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.QTest.Mark(AngeliA.Int2,AngeliA.Color32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.QTest.Mark(System.Int32,System.Int32,AngeliA.Color32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.QTest.Mark(System.Int32,System.Int32,AngeliA.Color32,System.Int32,System.Int32)">
            <summary>
            Paint a circle mark at screen for given frames long
            </summary>
            <param name="pos">Position in global space</param>
            <param name="x">Position X in global space</param>
            <param name="y">Position Y in global space</param>
            <param name="color">Color tint of the circle</param>
            <param name="duration">Length in frame</param>
            <param name="size">Diameter in global space</param>
        </member>
        <member name="M:AngeliA.QTest.SetObject``1(System.String,``0,System.Int32)">
            <summary>
            Create/set the value of an object in given type
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="key">Unique key to identify the data</param>
            <param name="obj">Value of the object</param>
            <param name="windowIndex">Force value set for given window instead of current window</param>
            <returns>Instance of the object</returns>
        </member>
        <member name="M:AngeliA.QTest.TryGetObject``1(System.String,``0@,System.Int32)">
            <summary>
            Get an existing object data
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="key">Unique key to identify the data</param>
            <param name="result">Instance of the result object</param>
            <param name="windowIndex">Force value set for given window instead of current window</param>
            <returns>True if the object is found</returns>
        </member>
        <member name="M:AngeliA.QTest.HideTest">
            <summary>
            Hide the testing windows
            </summary>
        </member>
        <member name="M:AngeliA.QTest.ShowTest">
            <summary>
            Show the testing windows
            </summary>
        </member>
        <member name="M:AngeliA.QTest.Group(System.String,System.Boolean,System.Int32)">
            <summary>
            Following field requires will be inside this group
            </summary>
            <param name="group">Name/key of the group</param>
            <param name="folding">True if the group is default folding</param>
            <param name="windowIndex">Force value set for given window instead of current window</param>
        </member>
        <member name="T:AngeliA.RenderLayer">
            <summary>
            Layer for rendering
            </summary>
        </member>
        <member name="F:AngeliA.RenderLayer.WALLPAPER">
            <summary>
            Most behind rendering layer, only overlap on top of sky color
            </summary>
        </member>
        <member name="F:AngeliA.RenderLayer.BEHIND">
            <summary>
            Behind layer of level blocks
            </summary>
        </member>
        <member name="F:AngeliA.RenderLayer.SHADOW">
            <summary>
            Hold shadow of level blocks and environment entities
            </summary>
        </member>
        <member name="F:AngeliA.RenderLayer.COLOR">
            <summary>
            Render cells with pure color, ignore sprite content
            </summary>
        </member>
        <member name="F:AngeliA.RenderLayer.MULT">
            <summary>
            Render cells with multiply shader
            </summary>
        </member>
        <member name="F:AngeliA.RenderLayer.ADD">
            <summary>
            Render cells with additive shader
            </summary>
        </member>
        <member name="T:AngeliA.Universe">
            <summary>
            Representation of game asset folder
            </summary>
        </member>
        <member name="P:AngeliA.Universe.BuiltIn">
            <summary>
            Built-in universe of the current game
            </summary>
        </member>
        <member name="P:AngeliA.Universe.BuiltInInfo">
            <summary>
            Info.json of the built-in universe
            </summary>
        </member>
        <member name="P:AngeliA.Universe.UniverseRoot">
            <summary>
            Root folder path of this universe
            </summary>
        </member>
        <member name="P:AngeliA.Universe.SheetRoot">
            <summary>
            Artwork sheets root folder path
            </summary>
        </member>
        <member name="P:AngeliA.Universe.BuiltInSheetPath">
            <summary>
            Built-in artwork sheet file path. This file is generated by the game engine.
            </summary>
        </member>
        <member name="P:AngeliA.Universe.GameSheetPath">
            <summary>
            Artwork sheet file path. This file is painted by the developer of the game.
            </summary>
        </member>
        <member name="P:AngeliA.Universe.InfoPath">
            <summary>
            Info.json file path
            </summary>
        </member>
        <member name="P:AngeliA.Universe.ConversationRoot">
            <summary>
            Path of the folder that hold conversation files
            </summary>
        </member>
        <member name="P:AngeliA.Universe.UniverseMetaRoot">
            <summary>
            Root meta folder path. This folder hold random text data.
            </summary>
        </member>
        <member name="P:AngeliA.Universe.BuiltInMapRoot">
            <summary>
            Map root folder path. Map inside this folder should not be edit by the player.
            </summary>
        </member>
        <member name="P:AngeliA.Universe.LanguageRoot">
            <summary>
            Folder that holds the localization files
            </summary>
        </member>
        <member name="P:AngeliA.Universe.MusicRoot">
            <summary>
            Folder that holds BGM audio files
            </summary>
        </member>
        <member name="P:AngeliA.Universe.SoundRoot">
            <summary>
            Folder that holds SFX audio files
            </summary>
        </member>
        <member name="P:AngeliA.Universe.FontRoot">
            <summary>
            Folder that holds font files
            </summary>
        </member>
        <member name="P:AngeliA.Universe.CharacterMovementConfigRoot">
            <summary>
            Folder that holds character movement config json files
            </summary>
        </member>
        <member name="P:AngeliA.Universe.Info">
            <summary>
            Data from Info.json file
            </summary>
        </member>
        <member name="P:AngeliA.Universe.CurrentSavingSlot">
            <summary>
            Current selected saving slot index
            </summary>
        </member>
        <member name="P:AngeliA.Universe.SavingRoot">
            <summary>
            Root of the saving folder
            </summary>
        </member>
        <member name="P:AngeliA.Universe.SlotRoot">
            <summary>
            Folder path of the current selected slot
            </summary>
        </member>
        <member name="P:AngeliA.Universe.SlotMetaRoot">
            <summary>
            Meta root folder path of the current selected slot
            </summary>
        </member>
        <member name="P:AngeliA.Universe.SlotUserMapRoot">
            <summary>
            Map root folder of the current selected slot. Maps inside this folder can be edit by player
            </summary>
        </member>
        <member name="P:AngeliA.Universe.SlotCharacterRenderingConfigRoot">
            <summary>
            Root folder path holds the rendering config json files for pose characters
            </summary>
        </member>
        <member name="P:AngeliA.Universe.SlotInventoryRoot">
            <summary>
            Root folder path holds the inventory files
            </summary>
        </member>
        <member name="M:AngeliA.Universe.LoadFromFile(System.String,System.Boolean)">
            <summary>
            Create a new universe instance from file
            </summary>
        </member>
        <member name="M:AngeliA.Universe.ReloadSavingSlot(System.Int32,System.Boolean)">
            <summary>
            Change saving slot
            </summary>
            <param name="newSlot">Slot index</param>
            <param name="forceReload">Perform this function even the "newSlot" is same with current</param>
        </member>
        <member name="M:AngeliA.Universe.SetSavingRoot(System.String,System.Int32)">
            <summary>
            Set saving data of the universe instance
            </summary>
        </member>
        <member name="T:AngeliA.ProjectType">
            <summary></summary>
        </member>
        <member name="F:AngeliA.ProjectType.Game">
            <summary>
            Project with coded logic, pixel artwork and audio etc...
            </summary>
        </member>
        <member name="F:AngeliA.ProjectType.Artwork">
            <summary>
            Project with only pixel artwork
            </summary>
        </member>
        <member name="F:AngeliA.ProjectType.EngineTheme">
            <summary>
            Project with only pixel artwork for theme of AngeliA Engine
            </summary>
        </member>
        <member name="T:AngeliA.UniverseInfo">
            <summary>
            Representation of Info.json in universe folder
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.ProductName">
            <summary>
            Official name of this project in English
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.DeveloperName">
            <summary>
            Developer name of this project in English
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.ProjectType">
            <summary>
            Type of this project
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.MajorVersion">
            <summary>
            Major version of this project
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.MinorVersion">
            <summary>
            Minor version of this project
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.PatchVersion">
            <summary>
            Patch version of this project
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.EngineBuildVersion">
            <summary>
            Which version of AngeliA Engine published this project
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.UseMapEditor">
            <summary>
            Require map editor from AngeliA Engine when under development
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.UseLightingSystem">
            <summary>
            Use the global lighting system
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.ReadonlyMap">
            <summary>
            Save map file changes made by the player
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.AllowCheatCode">
            <summary>
            Use cheat code after release
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.AllowPause">
            <summary>
            Allow player press start button (esc) to pause
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.AllowQuitFromMenu">
            <summary>
            Show quit option inside pause menu
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.AllowRestartFromMenu">
            <summary>
            Show restart option inside pause menu
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.ScaleUiBasedOnMonitor">
            <summary>
            Scale ui elements based on the monitor height instead of application window height
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.ViewRatio">
            <summary>
            Size ratio of the view rect. (1000 means 1:1, 2000 means 2:1)
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.DefaultViewHeight">
            <summary>
            Default view rect height in global size
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.MinViewHeight">
            <summary>
            Minimal view rect height in global size
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.MaxViewHeight">
            <summary>
            Maximal view rect height in global size
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.LightMap_PixelStyle">
            <summary>
            Use pixel style lighting
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.LightMap_SelfLerp">
            <summary>
            Adjust the shadow generating influence between "Solid block itself" and "Global sun light"
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.LightMap_SolidIlluminance">
            <summary>
            How much does solid blocks luminous
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.LightMap_AirIlluminanceDay">
            <summary>
            How much does air luminous during daytime
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.LightMap_AirIlluminanceNight">
            <summary>
            How much does air luminous during nighttime
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.LightMap_BackgroundTint">
            <summary>
            How much does background blocks luminous
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.LightMap_LevelIlluminateRemain">
            <summary>
            How much does light remain after it hit solid blocks
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.WorldBehindParallax">
            <summary>
            Parallax amount of the behind map layer. (1000 means no parallax, 2000 means behind move 2 times faster)
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.WorldBehindAlpha">
            <summary>
            Transparent amount of the behind map layer. (255 means not tramsparent, 0 means full tramsparent)
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.LastOpenAtlasIndex">
            <summary>
            Last opened atlas index by AngeliA Engine
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.LastEdittingViewPos">
            <summary>
            Last edit view rect position from map editor
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.LastEdittingViewHeight">
            <summary>
            Last edit view rect height from map editor
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.LastBackupSavingDate">
            <summary>
            Last time AngeliA Engine backup the saving files
            </summary>
        </member>
        <member name="F:AngeliA.UniverseInfo.UsePixelPerfectRendering">
            <summary>
            True if the game require rendering cell pixel perfect
            </summary>
        </member>
        <member name="T:AngeliA.CellScreenshotSystem">
            <summary>
            Core system to take screenshot based on rendering cells and save them into file
            </summary>
        </member>
        <member name="T:AngeliA.CellScreenshotSystem.Screenshot">
            <summary>
            Data to hold a single screenshot
            </summary>
        </member>
        <member name="F:AngeliA.CellScreenshotSystem.Screenshot.Locked">
            <summary>
            True if the user want to prevent accidental deletion
            </summary>
        </member>
        <member name="F:AngeliA.CellScreenshotSystem.Screenshot.Range">
            <summary>
            Global range of the rendering cells inside this screenshot
            </summary>
        </member>
        <member name="F:AngeliA.CellScreenshotSystem.Screenshot.SkyTop">
            <summary>
            Sky gradient color on top
            </summary>
        </member>
        <member name="F:AngeliA.CellScreenshotSystem.Screenshot.SkyBottom">
            <summary>
            Sky gradient color on bottom
            </summary>
        </member>
        <member name="P:AngeliA.CellScreenshotSystem.Count">
            <summary>
            Screenshot data count inside the current system
            </summary>
        </member>
        <member name="M:AngeliA.CellScreenshotSystem.RequireTakeScreenshot(AngeliA.IRect,System.Int32)">
            <summary>
            Take screenshot at given range in global space when all cells at this frame is rendered. Result will be saved into system list.
            </summary>
            <param name="cameraRange"></param>
            <param name="delay">Time delay in frame</param>
        </member>
        <member name="M:AngeliA.CellScreenshotSystem.TakeScreenshotImmediately(AngeliA.IRect,System.Boolean)">
            <summary>
            Take screenshot at given range in global space no matter rendering cells are all exists for current frame
            </summary>
            <param name="cameraRange"></param>
            <param name="saveToSystem">True if save this screenshot into system list</param>
            <returns></returns>
        </member>
        <member name="M:AngeliA.CellScreenshotSystem.GetScreenshot(System.Int32)">
            <summary>
            Get screenshot from system list at given index.
            </summary>
        </member>
        <member name="M:AngeliA.CellScreenshotSystem.DeleteScreenshot(System.Int32,System.Boolean)">
            <summary>
            Delete screenshot from system list at given index
            </summary>
            <param name="index"></param>
            <param name="dontDeleteLocked">True if skip the locked ones</param>
        </member>
        <member name="M:AngeliA.CellScreenshotSystem.SetScreenshotLock(System.Int32,System.Boolean)">
            <summary>
            Lock/unlock screenshot in system list at given index
            </summary>
        </member>
        <member name="M:AngeliA.CellScreenshotSystem.DrawScreenshot(AngeliA.CellScreenshotSystem.Screenshot,AngeliA.IRect,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AngeliA.CellScreenshotSystem.DrawScreenshot(AngeliA.CellScreenshotSystem.Screenshot,AngeliA.IRect,AngeliA.FRect,AngeliA.Color32,System.Int32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.CellScreenshotSystem.DrawScreenshot(AngeliA.CellScreenshotSystem.Screenshot,AngeliA.IRect,AngeliA.FRect,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AngeliA.CellScreenshotSystem.DrawScreenshot(AngeliA.CellScreenshotSystem.Screenshot,AngeliA.IRect,AngeliA.FRect,AngeliA.Color32,System.Int32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.CellScreenshotSystem.DrawScreenshot(AngeliA.CellScreenshotSystem.Screenshot,AngeliA.IRect,AngeliA.Color32,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AngeliA.CellScreenshotSystem.DrawScreenshot(AngeliA.CellScreenshotSystem.Screenshot,AngeliA.IRect,AngeliA.FRect,AngeliA.Color32,System.Int32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.CellScreenshotSystem.DrawScreenshot(AngeliA.CellScreenshotSystem.Screenshot,AngeliA.IRect,AngeliA.FRect,AngeliA.Color32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Render given screen shot on screen
            </summary>
            <param name="screenshot">Screenshot data</param>
            <param name="rect">Global range to display this screenshot</param>
            <param name="sourceRange">Which part of the screenshot should be display. ((0, 0, 1, 1) means all of them. (0, 0, 0.5, 1) means left half of them)</param>
            <param name="tint">Color tint</param>
            <param name="z">Z value for sort rendering cells</param>
            <param name="layer">Rendering layer to draw into. Use RenderLayer.XXX to get this value.</param>
            <param name="fit">True if resize the result without changing the aspect ratio</param>
        </member>
        <member name="T:AngeliA.CheatSystem">
            <summary>
            Core system to invoke function when user type cheat code during gameplay. Works like NES games. (it does nothing with anti-cheat)
            </summary>
        </member>
        <member name="P:AngeliA.CheatSystem.CurrentParam">
            <summary>
            Custom data from cheat code when it's invoking
            </summary>
        </member>
        <member name="P:AngeliA.CheatSystem.CheatCodeCount">
            <summary>
            Total loaded cheat code
            </summary>
        </member>
        <member name="M:AngeliA.CheatSystem.TryAddCheatAction(System.String,System.Reflection.MethodInfo,System.Object)">
            <summary>
            Add given cheat code into system
            </summary>
            <param name="code">Code that user need to type. Ignore cases</param>
            <param name="method">Method that invokes when cheat code get triggered</param>
            <param name="param">Custom data for this cheat code. Get this data inside the "method" with CheatSystem.CurrentParam</param>
            <returns>True if the data is successfuly added</returns>
        </member>
        <member name="M:AngeliA.CheatSystem.SetCheatCodeEnable(System.String,System.Boolean)">
            <summary>
            Make given cheat code enable or disable
            </summary>
            <param name="code">The target cheat code</param>
            <param name="enable"></param>
        </member>
        <member name="M:AngeliA.CheatSystem.ForAllCheatCodes">
            <summary>
            Interate through all loaded cheat code inside the system
            </summary>
            <returns></returns>
        </member>
        <member name="M:AngeliA.CheatSystem.GetCodeAt(System.Int32)">
            <summary>
            Get cheat code at given index inside system list
            </summary>
        </member>
        <member name="T:AngeliA.Cursor">
            <summary>
            Core system for set appearance of mouse cursor
            </summary>
        </member>
        <member name="M:AngeliA.Cursor.RequireCursor(System.Int32)">
            <summary>
            Need to display the cursor for current frame
            </summary>
        </member>
        <member name="M:AngeliA.Cursor.SetCursor(System.Int32,AngeliA.IRect,System.Int32)">
            <param name="cursorIndex">Get this value with Const.CURSOR_XXX</param>
            <param name="mouseRange">Only work when mouse inside given range in global space</param>
            <param name="priority"></param>
        </member>
        <member name="M:AngeliA.Cursor.SetCursor(System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Cursor.SetCursor(System.Int32,AngeliA.IRect,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Cursor.SetCursorAsNormal(System.Int32)">
            <summary>
            Make cursor to default style
            </summary>
        </member>
        <member name="M:AngeliA.Cursor.SetCursorAsHand(System.Int32)">
            <inheritdoc cref="M:AngeliA.Cursor.SetCursorAsHand(AngeliA.IRect,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Cursor.SetCursorAsHand(AngeliA.IRect,System.Int32)">
            <summary>
            Make cursor to point hand for current frame.
            </summary>
            <param name="mouseRange">Only work when mouse inside given range in global space</param>
            <param name="priority"></param>
        </member>
        <member name="M:AngeliA.Cursor.SetCursorAsBeam(System.Int32)">
            <inheritdoc cref="M:AngeliA.Cursor.SetCursorAsBeam(AngeliA.IRect,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Cursor.SetCursorAsBeam(AngeliA.IRect,System.Int32)">
            <summary>
            Make cursor to typing beam for current frame.
            </summary>
            <param name="mouseRange">Only work when mouse inside given range in global space</param>
            <param name="priority"></param>
        </member>
        <member name="M:AngeliA.Cursor.SetCursorAsMove(System.Int32)">
            <inheritdoc cref="M:AngeliA.Cursor.SetCursorAsMove(AngeliA.IRect,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Cursor.SetCursorAsMove(AngeliA.IRect,System.Int32)">
            <summary>
            Make cursor to cross with arrows for current frame.
            </summary>
            <param name="mouseRange">Only work when mouse inside given range in global space</param>
            <param name="priority"></param>
        </member>
        <member name="M:AngeliA.Cursor.SetCursorAsNone(System.Int32)">
            <summary>
            Set cursor into none
            </summary>
        </member>
        <member name="M:AngeliA.Cursor.GetResizeCursorIndex(AngeliA.Direction8)">
            <summary>
            Get resize cursor index from given direction
            </summary>
        </member>
        <member name="T:AngeliA.Input">
            <summary>
            Frame based core system for user input from keyboard, mouse and gamepad
            </summary>
        </member>
        <member name="P:AngeliA.Input.UsingGamepad">
            <summary>
            True if the user just used the gamepad
            </summary>
        </member>
        <member name="P:AngeliA.Input.UsingLeftStick">
            <summary>
            True if the user just used the list joystick
            </summary>
        </member>
        <member name="P:AngeliA.Input.DirectionX">
            <summary>
            Horizontal direction at current frame from gamekey, d-pad and joystick
            </summary>
        </member>
        <member name="P:AngeliA.Input.DirectionY">
            <summary>
            Vertical direction at current frame from gamekey, d-pad and joystick
            </summary>
        </member>
        <member name="P:AngeliA.Input.Direction">
            <summary>
            Direction at current frame from gamekey, d-pad and joystick
            </summary>
        </member>
        <member name="P:AngeliA.Input.AllowGamepad">
            <summary>
            True if gamepad is allow to use from game setting
            </summary>
        </member>
        <member name="P:AngeliA.Input.HoldingCtrl">
            <summary>
            True if ctrl key is holding at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.HoldingShift">
            <summary>
            True if shift key is holding at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.HoldingAlt">
            <summary>
            True if alt key is holding at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.AnyKeyDown">
            <summary>
            True if any keyboard/gamepad/mouse key start to be holding at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.AnyKeyHolding">
            <summary>
            True if any keyboard/gamepad/mouse key is holding at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.AnyGamepadButtonDown">
            <summary>
            True if any gamepad button start to be holding at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.AnyGamepadButtonHolding">
            <summary>
            True if any gamepad button is holding at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.AnyGamekeyDown">
            <summary>
            True if any game-key key start to be holding at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.AnyGamekeyHolding">
            <summary>
            True if any game-key is holding at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.AnyKeyboardKeyDown">
            <summary>
            True if any keyboard key start to be holding at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.AnyKeyboardKeyHolding">
            <summary>
            True if any keyboard key is holding at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.AnyMouseButtonDown">
            <summary>
            True if any mouse button start to be holding at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.AnyMouseButtonHolding">
            <summary>
            True if any mouse button is holding at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.MouseScreenPosition">
            <summary>
            Position of the mouse at current frame in screen space
            </summary>
        </member>
        <member name="P:AngeliA.Input.MouseScreenPositionDelta">
            <summary>
            Position changed of the mouse at current frame in screen space
            </summary>
        </member>
        <member name="P:AngeliA.Input.MouseGlobalPositionDelta">
            <summary>
            Position changed of the mouse at current frame in global space
            </summary>
        </member>
        <member name="P:AngeliA.Input.UnshiftedMouseGlobalPosition">
            <summary>
            Position changed of the mouse at current frame in global space which is not effect by Input.SetMousePositionShift
            </summary>
        </member>
        <member name="P:AngeliA.Input.MouseGlobalPosition">
            <summary>
            Position of the mouse at current frame in global space
            </summary>
        </member>
        <member name="P:AngeliA.Input.MouseLeftDownGlobalPosition">
            <summary>
            Position of the mouse in global space when last time mouse left button press down 
            </summary>
        </member>
        <member name="P:AngeliA.Input.MouseRightDownGlobalPosition">
            <summary>
            Position of the mouse in global space when last time mouse right button press down 
            </summary>
        </member>
        <member name="P:AngeliA.Input.MouseMidDownGlobalPosition">
            <summary>
            Position of the mouse in global space when last time mouse middle button press down 
            </summary>
        </member>
        <member name="P:AngeliA.Input.MouseMove">
            <summary>
            True if mouse moved at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.MouseLeftButtonHolding">
            <summary>
            True if mouse left button is holding at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.MouseRightButtonHolding">
            <summary>
            True if mouse right button is holding at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.MouseMidButtonHolding">
            <summary>
            True if mouse middle button is holding at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.MouseLeftButtonDown">
            <summary>
            True if mouse left button start to be holding at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.MouseRightButtonDown">
            <summary>
            True if mouse right button start to be holding at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.MouseMidButtonDown">
            <summary>
            True if mouse middle button start to be holding at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Input.LastActionFromMouse">
            <summary>
            True if last user action is from mouse instead of keyboard
            </summary>
        </member>
        <member name="P:AngeliA.Input.MouseWheelDelta">
            <summary>
            Mouse wheel scroll value at current frame. Return negative value when the page scrolls down (the content appears to move upward)
            </summary>
        </member>
        <member name="P:AngeliA.Input.IgnoringMouseInput">
            <summary>
            True if the input system do not receive mouse input currently 
            </summary>
        </member>
        <member name="P:AngeliA.Input.IgnoringKeyInput">
            <summary>
            True if the input system do not receive keyboard/game-key input currently 
            </summary>
        </member>
        <member name="M:AngeliA.Input.TryGetHoldingGamepadButton(AngeliA.GamepadKey@)">
            <summary>
            Get the gamepad button that currently holding
            </summary>
            <param name="button">Result holding button</param>
            <returns>True if holding button founded</returns>
        </member>
        <member name="M:AngeliA.Input.TryGetHoldingKeyboardKey(AngeliA.KeyboardKey@)">
            <summary>
            Get the keyboard key that currently holding
            </summary>
            <param name="key">Result holding key</param>
            <returns>True if holding key founded</returns>
        </member>
        <member name="M:AngeliA.Input.GameKeyDown(AngeliA.Gamekey)">
            <summary>
            True if given game-key start to be holding at current frame
            </summary>
        </member>
        <member name="M:AngeliA.Input.GameKeyDownGUI(AngeliA.Gamekey)">
            <summary>
            True if given game-key pressed down repeatedly by holding down
            </summary>
        </member>
        <member name="M:AngeliA.Input.GameKeyHolding(AngeliA.Gamekey)">
            <summary>
            True if given game-key is currently holding
            </summary>
        </member>
        <member name="M:AngeliA.Input.GameKeyUp(AngeliA.Gamekey)">
            <summary>
            True if the given game-key just released at current frame
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AngeliA.Input.KeyboardDown(AngeliA.KeyboardKey)">
            <summary>
            True if given keyboard-key start to be holding at current frame
            </summary>
        </member>
        <member name="M:AngeliA.Input.KeyboardDownGUI(AngeliA.KeyboardKey)">
            <summary>
            True if given keyboard-key pressed down repeatedly by holding down
            </summary>
        </member>
        <member name="M:AngeliA.Input.KeyboardHolding(AngeliA.KeyboardKey)">
            <summary>
            True if given keyboard-key is currently holding
            </summary>
        </member>
        <member name="M:AngeliA.Input.KeyboardUp(AngeliA.KeyboardKey)">
            <summary>
            True if the given keyboard-key just released at current frame
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AngeliA.Input.IsMouseLeftButtonDoubleClick(System.Int32)">
            <summary>
            True if mouse left button performed a double click at current frame
            </summary>
            <param name="clickDeltaFrame">Two clicks inside this time range count as a double click</param>
        </member>
        <member name="M:AngeliA.Input.IsMouseRightButtonDoubleClick(System.Int32)">
            <summary>
            True if mouse right button performed a double click at current frame
            </summary>
            <param name="clickDeltaFrame">Two clicks inside this time range count as a double click</param>
        </member>
        <member name="M:AngeliA.Input.IsMouseMiddleButtonDoubleClick(System.Int32)">
            <summary>
            True if mouse middle button performed a double click at current frame
            </summary>
            <param name="clickDeltaFrame">Two clicks inside this time range count as a double click</param>
        </member>
        <member name="M:AngeliA.Input.MouseKeyUsed(System.Int32)">
            <summary>
            True if the given mouse button is mark as used
            </summary>
            <param name="key">0 means left, 1 means right, 2 means middle</param>
        </member>
        <member name="M:AngeliA.Input.KeyboardKeyUsed(AngeliA.KeyboardKey)">
            <summary>
            True if the given keyboard-key is mark as used
            </summary>
        </member>
        <member name="M:AngeliA.Input.UseGameKey(AngeliA.Gamekey)">
            <summary>
            Mark given game-key as used so it will not be "down" or "holding" at current frame
            </summary>
        </member>
        <member name="M:AngeliA.Input.UseKeyboardKey(AngeliA.KeyboardKey)">
            <summary>
            Mark given keyboard-key as used so it will not be "down" or "holding" at current frame
            </summary>
        </member>
        <member name="M:AngeliA.Input.UseAllHoldingKeys(System.Boolean)">
            <summary>
            Mark all current holding game-keys ans keyboard-keys as used so they will not be "down" or "holding" at current frame
            </summary>
        </member>
        <member name="M:AngeliA.Input.UseAllMouseKey">
            <summary>
            Mark all current holding mouse buttons as used so they will not be "down" or "holding" at current frame
            </summary>
        </member>
        <member name="M:AngeliA.Input.UseMouseKey(System.Int32)">
            <summary>
            Mark given mouse button as used so it will not be "down" or "holding" at current frame
            </summary>
        </member>
        <member name="M:AngeliA.Input.UnuseKeyboardKey(AngeliA.KeyboardKey)">
            <summary>
            Remove the used mark for given keyboard-key
            </summary>
        </member>
        <member name="M:AngeliA.Input.UnuseGameKey(AngeliA.Gamekey)">
            <summary>
            Remove the used mark for given game-key
            </summary>
        </member>
        <member name="M:AngeliA.Input.UnuseMouseKey(System.Int32)">
            <summary>
            Remove the used mark for given mouse button
            </summary>
        </member>
        <member name="M:AngeliA.Input.UnuseAllMouseKey">
            <summary>
            Remove the used mark for all mouse button
            </summary>
        </member>
        <member name="M:AngeliA.Input.IgnoreMouseToActionJump(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Ignore "mouse left to action and mouse right to jump" for given frames long
            </summary>
        </member>
        <member name="M:AngeliA.Input.IgnoreRightStickToMouseWheel(System.Int32)">
            <summary>
            Ignore "gamepad right stick to control mouse wheel" for given frames long
            </summary>
            <param name="duration"></param>
        </member>
        <member name="M:AngeliA.Input.GetKeyboardMap(AngeliA.Gamekey)">
            <summary>
            Get which keyboard key is mapping into given game-key
            </summary>
        </member>
        <member name="M:AngeliA.Input.GetDefaultKeyboardMap(AngeliA.Gamekey)">
            <summary>
            Get which keyboard key is default mapping key for given game-key
            </summary>
        </member>
        <member name="M:AngeliA.Input.GetGamepadMap(AngeliA.Gamekey)">
            <summary>
            Get which gamepad-button is mapping into given game-key
            </summary>
        </member>
        <member name="M:AngeliA.Input.GetDefaultGamepadMap(AngeliA.Gamekey)">
            <summary>
            Get which gamepad-button is default mapping key for given game-key
            </summary>
        </member>
        <member name="M:AngeliA.Input.SetKeyboardMap(AngeliA.Gamekey,AngeliA.KeyboardKey)">
            <summary>
            Map given keyboard-key into given game-key and save it to disk
            </summary>
        </member>
        <member name="M:AngeliA.Input.SetGamepadMap(AngeliA.Gamekey,AngeliA.GamepadKey)">
            <summary>
            Map given gamepad-button into given game-key and save it to disk
            </summary>
        </member>
        <member name="M:AngeliA.Input.MouseButtonHolding(System.Int32)">
            <summary>
            True if the given mouse button is holding at current frame
            </summary>
            <param name="button">0 means left, 1 means right, 2 means middle</param>
        </member>
        <member name="M:AngeliA.Input.GetHoldingMouseButton">
            <summary>
            Get index of the current holding mouse button. (order: left > right > middle)
            </summary>
            <returns>0 means left, 1 means right, 2 means middle, -1 means no button holding</returns>
        </member>
        <member name="M:AngeliA.Input.IgnoreAllInput(System.Int32)">
            <summary>
            Make all user input ignored by the system for given frames long
            </summary>
        </member>
        <member name="M:AngeliA.Input.IgnoreMouseInput(System.Int32)">
            <summary>
            Make all user mouse input ignored by the system for given frames long
            </summary>
        </member>
        <member name="M:AngeliA.Input.IgnoreKeyInput(System.Int32)">
            <summary>
            Make user keyboard/game-key input ignored by the system for given frames long
            </summary>
        </member>
        <member name="M:AngeliA.Input.CancelIgnoreMouseInput">
            <summary>
            Do not ignore mouse input any more
            </summary>
        </member>
        <member name="M:AngeliA.Input.CancelIgnoreKeyInput">
            <summary>
            Do not ignore key input any more
            </summary>
        </member>
        <member name="M:AngeliA.Input.SetMousePositionShift(System.Int32,System.Int32)">
            <summary>
            Shift mouse position for current frame. Only effect internal system not where the cursor appearingly is.
            </summary>
        </member>
        <member name="T:AngeliA.Inventory">
            <summary>
            Core system to handle storage of items
            </summary>
        </member>
        <member name="P:AngeliA.Inventory.PoolReady">
            <summary>
            True if the system is read to use
            </summary>
        </member>
        <member name="M:AngeliA.Inventory.InitializeInventoryData(System.String,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AngeliA.Inventory.InitializeInventoryData(System.Int32,System.String,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Inventory.InitializeInventoryData(System.String,System.Int32,AngeliA.Int3,System.Boolean)">
            <inheritdoc cref="M:AngeliA.Inventory.InitializeInventoryData(System.Int32,System.String,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Inventory.InitializeInventoryData(System.Int32,System.String,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AngeliA.Inventory.InitializeInventoryData(System.Int32,System.String,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Inventory.InitializeInventoryData(System.Int32,System.String,System.Int32,AngeliA.Int3,System.Boolean)">
            <summary>
            Initialize an inventory data for the system
            </summary>
            <param name="basicID">ID of the holder</param>
            <param name="basicName">Name of the holder</param>
            <param name="capacity">Maximal item count the inventory can hold</param>
            <param name="mapUnitPos">Original position in unit space for the map-type inventory. (int.MinValue, int.MinValue, int.MinValue) for other type inventory.</param>
            <param name="hasEquipment">True if this inventory requires equipment part.</param>
            <returns>Inventory ID</returns>
        </member>
        <member name="M:AngeliA.Inventory.GetInventoryIdFromBasicIdAndPos(System.Int32,System.String,AngeliA.Int3)">
            <summary>
            Calculate inventory ID based of the given information
            </summary>
            <param name="basicID">ID of the holder</param>
            <param name="baseName">Name of the holder</param>
            <param name="mapPos">Original position in unit space for the map-type inventory. (int.MinValue, int.MinValue, int.MinValue) for other type inventory.</param>
        </member>
        <member name="M:AngeliA.Inventory.GetInventoryMapPosFromName(System.String,System.String@)">
            <summary>
            Calculate the original holder position from the given inventory file name
            </summary>
        </member>
        <member name="M:AngeliA.Inventory.ResizeInventory(System.Int32,System.Int32)">
            <summary>
            Set capacity of the inventory without changing the content. (items will be clip out if the capacity is not enough to hold)
            </summary>
        </member>
        <member name="M:AngeliA.Inventory.HasInventory(System.Int32)">
            <summary>
            True if the given ID refers to a valid inventory
            </summary>
        </member>
        <member name="M:AngeliA.Inventory.GetInventoryCapacity(System.Int32)">
            <summary>
            Get the item count limit for target inventory
            </summary>
        </member>
        <member name="M:AngeliA.Inventory.RepositionInventory(System.Int32,AngeliA.Int3)">
            <summary>
            Reset the map position for the inventory into a new value
            </summary>
        </member>
        <member name="M:AngeliA.Inventory.UnlockAllItemsInside(System.Int32)">
            <summary>
            Unlock all items inside given inventory for player
            </summary>
        </member>
        <member name="M:AngeliA.Inventory.GetItemAt(System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Inventory.GetItemAt(System.Int32,System.Int32,System.Int32@)"/>
        </member>
        <member name="M:AngeliA.Inventory.GetItemAt(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get ID of the item inside given inventory
            </summary>
            <param name="inventoryID"></param>
            <param name="itemIndex">Index of the item</param>
            <param name="count">Count of the item</param>
        </member>
        <member name="M:AngeliA.Inventory.GetItemCount(System.Int32,System.Int32)">
            <summary>
            Get count of the given item
            </summary>
            <param name="inventoryID"></param>
            <param name="itemIndex">Index of the item</param>
            <returns>Count of the item</returns>
        </member>
        <member name="M:AngeliA.Inventory.SetItemAt(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set item ID at index of the given inventory
            </summary>
            <param name="inventoryID"></param>
            <param name="itemIndex">Index of the item</param>
            <param name="newItem">ID of the item</param>
            <param name="newCount">Count of the item</param>
        </member>
        <member name="M:AngeliA.Inventory.IndexOfItem(System.Int32,System.Int32)">
            <summary>
            Find index of the target item inside given inventory
            </summary>
            <returns>Index of the item. -1 when not found.</returns>
        </member>
        <member name="M:AngeliA.Inventory.HasItem(System.Int32,System.Int32,System.Boolean)">
            <summary>
            True if the given item founded in the target inventory.
            </summary>
            <param name="inventoryID"></param>
            <param name="itemID"></param>
            <param name="includeEquipment">True if search inside equipment part</param>
        </member>
        <member name="M:AngeliA.Inventory.AddItemAt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Add "count" to the given item
            </summary>
            <returns>How many items has been added. 0 means no item added. "count" means all items added.</returns>
        </member>
        <member name="M:AngeliA.Inventory.FindAndAddItem(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Find given item and add "count" to the item
            </summary>
            <param name="inventoryID"></param>
            <param name="targetItemID"></param>
            <param name="count"></param>
            <param name="ignoreEquipment">True if do not search for equipment part</param>
            <returns>How many items has been added. 0 means no item added. "count" means all items added.</returns>
        </member>
        <member name="M:AngeliA.Inventory.TakeItemAt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Take "count" items at given index for target inventory
            </summary>
            <param name="inventoryID"></param>
            <param name="itemIndex"></param>
            <param name="count"></param>
            <returns>How many items has been taken. 0 means no item taken. "count" means all items taken.</returns>
        </member>
        <member name="M:AngeliA.Inventory.FindAndTakeItem(System.Int32,System.Int32,System.Int32)">
            <summary>
            Take "count" items with "targetItemID" from given inventory
            </summary>
            <returns>How many items has been taken. 0 means no item taken. "count" means all items taken.</returns>
        </member>
        <member name="M:AngeliA.Inventory.CollectItem(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc cref="M:AngeliA.Inventory.CollectItem(System.Int32,System.Int32,System.Int32@,System.Int32,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Inventory.CollectItem(System.Int32,System.Int32,System.Int32@,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Add item into given inventory to first free slot founded.
            </summary>
            <param name="inventoryID"></param>
            <param name="item">ID of the item</param>
            <param name="count">Count of the item</param>
            <param name="ignoreEquipment">True if do not add into equipment part</param>
            <param name="ignoreInventory">True if do not add into inventory part (non-equipment part)</param>
            <param name="dontCollectIntoEmptyEquipmentSlot">True if do not add item into empty slot of equipment part</param>
            <param name="collectIndex">Index of which slot collect the item. -1 if not collected.</param>
            <returns>How many items has been collected. 0 means no item collected. "count" means all items collected.</returns>
        </member>
        <member name="M:AngeliA.Inventory.HasEnoughRoomToCollect(System.Int32,System.Int32,System.Int32)">
            <summary>
            True if the inventory have enough room to contain all the target items
            </summary>
        </member>
        <member name="M:AngeliA.Inventory.ItemTotalCount(System.Int32,System.Int32,System.Boolean)">
            <summary>
            How many target items are currently inside the inventory
            </summary>
            <param name="inventoryID"></param>
            <param name="itemID"></param>
            <param name="ignoreStack">True if stacked items count as one</param>
        </member>
        <member name="M:AngeliA.Inventory.ItemTotalCount(System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            How many target items are currently inside the inventory
            </summary>
            <param name="inventoryID"></param>
            <param name="itemID"></param>
            <param name="targetIndex">Index of the special target</param>
            <param name="targetOrder">Order of the special target between all items inside the inventory with same ID</param>
            <param name="ignoreStack">True if stacked items count as one</param>
        </member>
        <member name="M:AngeliA.Inventory.ItemTotalCount``1(System.Int32,System.Boolean)">
            <summary>
            How many target items are currently inside the inventory
            </summary>
            <param name="inventoryID"></param>
            <param name="ignoreStack">True if stacked items count as one</param>
        </member>
        <member name="M:AngeliA.Inventory.ItemTotalCount``1(System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            How many target items are currently inside the inventory
            </summary>
            <param name="inventoryID"></param>
            <param name="targetIndex">Index of the special target</param>
            <param name="targetOrder">Order of the special target between all items inside the inventory with same ID</param>
            <param name="ignoreStack">True if stacked items count as one</param>
        </member>
        <member name="M:AngeliA.Inventory.GiveItemToTarget(AngeliA.Entity,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Add target item to inventory of target entity
            </summary>
            <param name="target"></param>
            <param name="itemID"></param>
            <param name="count"></param>
            <param name="spawnWhenInventoryFull">True if spawn an ItemHolder entity to hold the item</param>
            <returns>True if the item is given</returns>
        </member>
        <member name="M:AngeliA.Inventory.GetEquipment(System.Int32,AngeliA.EquipmentType,System.Int32@)">
            <summary>
            Get ID of equipment for given inventory
            </summary>
            <param name="inventoryID"></param>
            <param name="type">Type of the equipment</param>
            <param name="equipmentCount">Stack count of the equipment</param>
        </member>
        <member name="M:AngeliA.Inventory.SetEquipment(System.Int32,AngeliA.EquipmentType,System.Int32,System.Int32)">
            <summary>
            Set ID of equipment for given inventory
            </summary>
            <param name="inventoryID"></param>
            <param name="type">Type of the equipment</param>
            <param name="equipmentID"></param>
            <param name="equipmentCount">Stack count of the equipment</param>
            <returns>True if the value successfuly setted</returns>
        </member>
        <member name="M:AngeliA.Inventory.ReduceEquipmentCount(System.Int32,System.Int32,AngeliA.EquipmentType)">
            <summary>
            Remove equipment count by "delta" (set delta to 1 means remove 1)
            </summary>
        </member>
        <member name="M:AngeliA.Inventory.FillEquipmentFromInventory(System.Int32,AngeliA.EquipmentType)">
            <summary>
            Make items with same ID inside inventory part stack onto equipment part
            </summary>
        </member>
        <member name="T:AngeliA.Language">
            <summary>
            Core system to handle localization logic
            </summary>
        </member>
        <member name="P:AngeliA.Language.LanguageCount">
            <summary>
            Total count of languages loaded inside the system
            </summary>
        </member>
        <member name="P:AngeliA.Language.CurrentLanguage">
            <summary>
            Current selecting language ISO
            </summary>
        </member>
        <member name="P:AngeliA.Language.PoolReady">
            <summary>
            True if the system is ready to use
            </summary>
        </member>
        <member name="M:AngeliA.Language.Get(System.Int32,System.String)">
            <summary>
            Get display content from given ID
            </summary>
            <param name="id"></param>
            <param name="failback">Default value if content not found in system pool</param>
        </member>
        <member name="M:AngeliA.Language.GetLanguageAt(System.Int32)">
            <summary>
            Get ISO of the language from system list at given index
            </summary>
        </member>
        <member name="M:AngeliA.Language.SetLanguage(System.String)">
            <summary>
            Set current selecting language
            </summary>
            <param name="language">ISO of target language</param>
            <returns>True if successfuly setted</returns>
        </member>
        <member name="T:AngeliA.LightingSystem">
            <summary>
            Core system that handles dynamic lighting of the stage
            </summary>
        </member>
        <member name="F:AngeliA.LightingSystem.SETTING_PIXEL_STYLE">
            <summary>
            ID for remote setting between engine and rigged game
            </summary>
        </member>
        <member name="F:AngeliA.LightingSystem.SETTING_SELF_LERP">
            <summary>
            ID for remote setting between engine and rigged game
            </summary>
        </member>
        <member name="F:AngeliA.LightingSystem.SETTING_SOLID_ILLUMINANCE">
            <summary>
            ID for remote setting between engine and rigged game
            </summary>
        </member>
        <member name="F:AngeliA.LightingSystem.SETTING_AIR_ILLUMINANCE_DAY">
            <summary>
            ID for remote setting between engine and rigged game
            </summary>
        </member>
        <member name="F:AngeliA.LightingSystem.SETTING_AIR_ILLUMINANCE_NIGHT">
            <summary>
            ID for remote setting between engine and rigged game
            </summary>
        </member>
        <member name="F:AngeliA.LightingSystem.SETTING_BACKGROUND_TINT">
            <summary>
            ID for remote setting between engine and rigged game
            </summary>
        </member>
        <member name="F:AngeliA.LightingSystem.SETTING_LEVEL_ILLUMINATE_REMAIN">
            <summary>
            ID for remote setting between engine and rigged game
            </summary>
        </member>
        <member name="F:AngeliA.LightingSystem.SETTING_IN_GAME_DAYTIME">
            <summary>
            ID for remote setting between engine and rigged game
            </summary>
        </member>
        <member name="F:AngeliA.LightingSystem.SETTING_FREE_IN_GAME_DAYTIME">
            <summary>
            ID for remote setting between engine and rigged game
            </summary>
        </member>
        <member name="P:AngeliA.LightingSystem.Enable">
            <summary>
            True if the system is in-use
            </summary>
        </member>
        <member name="M:AngeliA.LightingSystem.Illuminate(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Require light at given circle range in global space
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="radius"></param>
            <param name="amount">0 means no light. 1000 means general amount.</param>
        </member>
        <member name="M:AngeliA.LightingSystem.ForceCameraScale(System.Single,System.Int32)">
            <summary>
            Override the total size scale
            </summary>
            <param name="scale"></param>
            <param name="duration">How long this operation last in frames</param>
        </member>
        <member name="M:AngeliA.LightingSystem.ForceAirLerp(System.Single,System.Int32)">
            <summary>
            Override light amount for air
            </summary>
            <param name="lerp"></param>
            <param name="duration">How long this operation last in frames</param>
        </member>
        <member name="M:AngeliA.LightingSystem.IgnoreLighting(System.Int32)">
            <summary>
            Do not perform any lighting for given frames long
            </summary>
        </member>
        <member name="M:AngeliA.LightingSystem.CancelIgnoreLighting">
            <summary>
            Do not ignore lighting any more
            </summary>
        </member>
        <member name="T:AngeliA.PhysicsCell">
            <summary>
            Basic unit of a physics data structure
            </summary>
        </member>
        <member name="F:AngeliA.PhysicsCell.Rect">
            <summary>
            Rect position in global space
            </summary>
        </member>
        <member name="F:AngeliA.PhysicsCell.Entity">
            <summary>
            Target entity (null if from block)
            </summary>
        </member>
        <member name="F:AngeliA.PhysicsCell.IsTrigger">
            <summary>
            True if this cell is marked as trigger
            </summary>
        </member>
        <member name="F:AngeliA.PhysicsCell.SourceID">
            <summary>
            ID for identify which object filled this cell
            </summary>
        </member>
        <member name="T:AngeliA.PlayerSystem">
            <summary>
            Core system for user character control logic
            </summary>
        </member>
        <member name="P:AngeliA.PlayerSystem.Enable">
            <summary>
            True if the system is online
            </summary>
        </member>
        <member name="P:AngeliA.PlayerSystem.Selecting">
            <summary>
            Instance of the selecting character as player (can be changed or set to null at any moment)
            </summary>
        </member>
        <member name="P:AngeliA.PlayerSystem.RespawnCpUnitPosition">
            <summary>
            Position in unit space for player respawn when game restart
            </summary>
        </member>
        <member name="P:AngeliA.PlayerSystem.HomeUnitPosition">
            <summary>
            Respawn position in unit space when player have no check point activated
            </summary>
        </member>
        <member name="P:AngeliA.PlayerSystem.AllowPlayerMenuUI">
            <summary>
            True if user have access to the player menu UI
            </summary>
        </member>
        <member name="P:AngeliA.PlayerSystem.AllowQuickPlayerMenuUI">
            <summary>
            True if user have access to the quick player UI
            </summary>
        </member>
        <member name="P:AngeliA.PlayerSystem.IgnoringInput">
            <summary>
            True if the system is currently not react to user input
            </summary>
        </member>
        <member name="P:AngeliA.PlayerSystem.IgnoringAction">
            <summary>
            True if the system is currently not react to IActionTarget
            </summary>
        </member>
        <member name="P:AngeliA.PlayerSystem.AimViewX">
            <summary>
            Target view position in global space
            </summary>
        </member>
        <member name="P:AngeliA.PlayerSystem.AimViewY">
            <summary>
            Target view position in global space
            </summary>
        </member>
        <member name="P:AngeliA.PlayerSystem.TargetActionEntity">
            <summary>
            Current highlighting IActionTarget
            </summary>
        </member>
        <member name="P:AngeliA.PlayerSystem.UnlockedPlayerCount">
            <summary>
            Total count of unlocked player characters
            </summary>
        </member>
        <member name="P:AngeliA.PlayerSystem.PlayableCharactersCount">
            <summary>
            Total count of playable characters
            </summary>
        </member>
        <member name="F:AngeliA.PlayerSystem.TargetViewHeight">
            <summary>
            View height in global space the player requiring to have 
            </summary>
        </member>
        <member name="F:AngeliA.PlayerSystem.IgnorePlayerView">
            <summary>
            True if player system should not change the stage view rect
            </summary>
        </member>
        <member name="M:AngeliA.PlayerSystem.SelectCharacterAsPlayer(System.Int32,System.Boolean)">
            <summary>
            Set given ID as selecting player character
            </summary>
            <param name="characterTypeID"></param>
            <param name="failbackToDefault">True if use default character as selected when given one not found</param>
        </member>
        <member name="M:AngeliA.PlayerSystem.SetCharacterAsPlayer(AngeliA.Character)">
            <summary>
            Set given character instance as selected player
            </summary>
        </member>
        <member name="M:AngeliA.PlayerSystem.ForAllUnlockedPlayers">
            <summary>
            Iterate through all unlocked playable characters
            </summary>
        </member>
        <member name="M:AngeliA.PlayerSystem.ForAllPlayables">
            <summary>
            Iterate through all playable characters
            </summary>
        </member>
        <member name="M:AngeliA.PlayerSystem.IsPlayerUnlocked(System.Int32)">
            <summary>
            True if given player character is unlocked
            </summary>
        </member>
        <member name="M:AngeliA.PlayerSystem.UnlockPlayer(System.Int32)">
            <summary>
            Unlock given player character 
            </summary>
        </member>
        <member name="M:AngeliA.PlayerSystem.GetDefaultPlayerID(System.Boolean)">
            <param name="forceSelect">True if return the first founded IPlayable character ID</param>
        </member>
        <member name="M:AngeliA.PlayerSystem.ForceUpdateGroundedForView(System.Int32)">
            <summary>
            Make player always mark as grounded for view position for given frames long
            </summary>
        </member>
        <member name="M:AngeliA.PlayerSystem.GetPlayerFinalRespawnUnitPosition">
            <summary>
            Get the position in unit space for player get respawned when game restart
            </summary>
        </member>
        <member name="M:AngeliA.PlayerSystem.GetCameraShiftOffset(System.Int32)">
            <summary>
            Get the Y position shift in global space from camera center to player center
            </summary>
        </member>
        <member name="M:AngeliA.PlayerSystem.IgnoreInput(System.Int32)">
            <summary>
            Make user input blocked for given frames long. Set to -1 to make ignoring stop.
            </summary>
        </member>
        <member name="M:AngeliA.PlayerSystem.IgnoreAction(System.Int32)">
            <summary>
            Make user not react to IActionTarget for given frames long. Set to -1 to make ignoring stop.
            </summary>
        </member>
        <member name="M:AngeliA.PlayerSystem.IgnorePlayerMenu(System.Int32)">
            <summary>
            Make user have no access to player menu UI for given frames long. Set to -1 to make ignoring stop.
            </summary>
        </member>
        <member name="M:AngeliA.PlayerSystem.IgnorePlayerQuickMenu(System.Int32)">
            <summary>
            Make user have no access to quick player menu UI for given frames long. Set to -1 to make ignoring stop.
            </summary>
        </member>
        <member name="M:AngeliA.PlayerSystem.IgnoreAttack(System.Int32)">
            <summary>
            Make user can not attack for given frames long. Set to -1 to make ignoring stop.
            </summary>
        </member>
        <member name="T:AngeliA.Renderer">
            <summary>
            Core system for draw artwork on screen for current frame
            </summary>
        </member>
        <member name="P:AngeliA.Renderer.CameraRect">
            <summary>
            Current rect position in global space for rendering the screen
            </summary>
        </member>
        <member name="P:AngeliA.Renderer.CameraRange">
            <summary>
            Local range for the actual range for content on screen (black bar appears when window too wide)
            </summary>
        </member>
        <member name="P:AngeliA.Renderer.ScreenRenderRect">
            <summary>
            Rendering rect position in screen position
            </summary>
        </member>
        <member name="P:AngeliA.Renderer.LayerCount">
            <summary>
            Total rendering layer count
            </summary>
        </member>
        <member name="P:AngeliA.Renderer.CurrentSheetIndex">
            <summary>
            Index of current using artwork sheet
            </summary>
        </member>
        <member name="P:AngeliA.Renderer.CurrentLayerIndex">
            <summary>
            Index of current using rendering layer
            </summary>
        </member>
        <member name="P:AngeliA.Renderer.CurrentFontIndex">
            <summary>
            Index of current using font
            </summary>
        </member>
        <member name="P:AngeliA.Renderer.AltSheetCount">
            <summary>
            Total alt sheet count
            </summary>
        </member>
        <member name="P:AngeliA.Renderer.IsReady">
            <summary>
            True if the system is ready to use
            </summary>
        </member>
        <member name="P:AngeliA.Renderer.CurrentSheet">
            <summary>
            Instance of current using artwork sheet
            </summary>
        </member>
        <member name="F:AngeliA.Renderer.MainSheet">
            <summary>
            Instance of main/default artwork sheet
            </summary>
        </member>
        <member name="M:AngeliA.Renderer.ClearCharSpritePool">
            <summary>
            Reset internal pool for rendering character and unload the textures for them
            </summary>
        </member>
        <member name="M:AngeliA.Renderer.TryGetTextureFromSheet``1(System.Int32,System.Int32,``0@)">
            <summary>
            Get texture object for given sprite from sheet
            </summary>
            <typeparam name="T">Type of texture object</typeparam>
            <param name="spriteID"></param>
            <param name="sheetIndex"></param>
            <param name="texture"></param>
            <returns>True if the texture founded</returns>
        </member>
        <member name="M:AngeliA.Renderer.LoadMainSheet">
            <summary>
            Load main sheet from built-in path
            </summary>
        </member>
        <member name="M:AngeliA.Renderer.AddAltSheet(AngeliA.Sheet)">
            <summary>
            Add alt sheet into the system
            </summary>
            <param name="sheet"></param>
            <returns>Index of the added alt sheet</returns>
        </member>
        <member name="M:AngeliA.Renderer.RemoveAltSheet(System.Int32)">
            <summary>
            Remove alt sheet at index from system
            </summary>
        </member>
        <member name="M:AngeliA.Renderer.GetAltSheet(System.Int32)">
            <summary>
            Get instance of the alt sheet at given index
            </summary>
        </member>
        <member name="M:AngeliA.Renderer.SetLayer(System.Int32)">
            <summary>
            Set current using layer. Use RenderLayer.XXX to get this value.
            </summary>
        </member>
        <member name="M:AngeliA.Renderer.ResetLayer(System.Int32)">
            <summary>
            Clear the whole render layer
            </summary>
            <param name="layerIndex">Use RenderLayer.XXX to get this value</param>
        </member>
        <member name="M:AngeliA.Renderer.SortLayer(System.Int32)">
            <summary>
            Sort cells inside layer with default comparer
            </summary>
            <param name="layerIndex">Use RenderLayer.XXX to get this value</param>
        </member>
        <member name="M:AngeliA.Renderer.ReverseUnsortedCells(System.Int32)">
            <summary>
            Sort cells inside layer reversely with default comparer
            </summary>
            <param name="layerIndex">Use RenderLayer.XXX to get this value</param>
        </member>
        <member name="M:AngeliA.Renderer.AbandonLayerSort(System.Int32)">
            <summary>
            Do not sort the unsorted cells inside this layer
            </summary>
            <param name="layerIndex">Use RenderLayer.XXX to get this value</param>
        </member>
        <member name="M:AngeliA.Renderer.GetUsedCellCount">
            <summary>
            Get current cells count inside the using layer
            </summary>
        </member>
        <member name="M:AngeliA.Renderer.GetUsedCellCount(System.Int32)">
            <summary>
            Get current cells count inside given layer
            </summary>
            <param name="layerIndex">Use RenderLayer.XXX to get this value</param>
        </member>
        <member name="M:AngeliA.Renderer.GetLayerCapacity(System.Int32)">
            <summary>
            Get total size of the layer
            </summary>
            <param name="layerIndex">Use RenderLayer.XXX to get this value</param>
        </member>
        <member name="M:AngeliA.Renderer.SetFontID(System.Int32)">
            <summary>
            Set current using font from ID
            </summary>
        </member>
        <member name="M:AngeliA.Renderer.SetFontIndex(System.Int32)">
            <summary>
            Set current using font from index
            </summary>
        </member>
        <member name="M:AngeliA.Renderer.ClearFontIndexIdMap">
            <summary>
            Reset internal cache for font id with index
            </summary>
        </member>
        <member name="M:AngeliA.Renderer.OverrideFontIdAndIndex(System.Int32,System.Int32)">
            <summary>
            Add/set internal cache for font id with index
            </summary>
        </member>
        <member name="M:AngeliA.Renderer.Draw(System.Int32,AngeliA.IRect,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.Draw(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Renderer.Draw(System.Int32,AngeliA.IRect,AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.Draw(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Renderer.Draw(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.Draw(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Renderer.Draw(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.Draw(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Renderer.Draw(AngeliA.SpriteCode,AngeliA.IRect,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.Draw(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Renderer.Draw(AngeliA.SpriteCode,AngeliA.IRect,AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.Draw(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Renderer.Draw(AngeliA.SpriteCode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.Draw(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Renderer.Draw(AngeliA.SpriteCode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.Draw(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Renderer.Draw(AngeliA.AngeSprite,AngeliA.IRect,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.Draw(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Renderer.Draw(AngeliA.AngeSprite,AngeliA.IRect,AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.Draw(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Renderer.Draw(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.Draw(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Renderer.Draw(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32,System.Boolean)">
            <summary>
            Draw a artwork sprite into using render layer
            </summary>
            <param name="sprite">Artwork sprite</param>
            <param name="globalID">Artwork sprite ID</param>
            <param name="rect">Rect position in global space</param>
            <param name="x">Position in global space</param>
            <param name="y">Position in global space</param>
            <param name="pivotX">0 means "x" align with left edge. 1000 means "x" align with right edge.</param>
            <param name="pivotY">0 means "y" align with bottom edge. 1000 means "y" align with top edge.</param>
            <param name="rotation">Rotation in degree. 90 means facing right.</param>
            <param name="width">Size in global space</param>
            <param name="height">Size in global space</param>
            <param name="color">Color tint</param>
            <param name="z">Z value for sorting rendering cells</param>
            <param name="ignoreAttach">True if do not draw attaching sprite</param>
            <returns>Rendering cell for this sprite</returns>
        </member>
        <member name="M:AngeliA.Renderer.DrawPixel(AngeliA.IRect,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawPixel(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawPixel(AngeliA.IRect,AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawPixel(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawPixel(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawPixel(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawPixel(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32)">
            <summary>
            Draw a solid rectangle into using render layer
            </summary>
            <param name="x">Position in global space</param>
            <param name="y">Position in global space</param>
            <param name="pivotX">0 means "x" align with left edge. 1000 means "x" align with right edge.</param>
            <param name="pivotY">0 means "y" align with bottom edge. 1000 means "y" align with top edge.</param>
            <param name="rotation">Rotation in degree. 90 means facing right.</param>
            <param name="width">Size in global space</param>
            <param name="height">Size in global space</param>
            <param name="color">Color tint</param>
            <param name="z">Z value for sorting rendering cells</param>
            <returns>Rendering cell for this sprite</returns>
        </member>
        <member name="M:AngeliA.Renderer.DrawChar(System.Char,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawChar(AngeliA.CharSprite,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawChar(AngeliA.CharSprite,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32)">
            <summary>
            Draw a text character into using render layer
            </summary>
            <param name="sprite"></param>
            <param name="x">Position in global space</param>
            <param name="y">Position in global space</param>
            <param name="width">Size in global space</param>
            <param name="height">Size in global space</param>
            <param name="color">Color tint</param>
            <returns>Rendering cell for this text character</returns>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(System.Int32,AngeliA.IRect)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(System.Int32,AngeliA.IRect,AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(System.Int32,AngeliA.IRect,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(System.Int32,AngeliA.IRect,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(AngeliA.SpriteCode,AngeliA.IRect)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(AngeliA.SpriteCode,AngeliA.IRect,AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(AngeliA.SpriteCode,AngeliA.IRect,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(AngeliA.SpriteCode,AngeliA.IRect,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(AngeliA.SpriteCode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(AngeliA.SpriteCode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(AngeliA.SpriteCode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(AngeliA.SpriteCode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(AngeliA.SpriteCode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,AngeliA.IRect)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,AngeliA.IRect,AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,AngeliA.IRect,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,AngeliA.IRect,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawSlice(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean[],AngeliA.Color32,System.Int32)">
            <summary>
            Proportionally scale the sprite by dividing it into nine sections, protecting the corners and scaling/tiling the edges and center to maintain the image's integrity and prevent distortion.
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="globalID">Artwork sprite ID</param>
            <param name="sprite">Artwork sprite</param>
            <param name="x">Position in global space</param>
            <param name="y">Position in global space</param>
            <param name="pivotX">0 means "x" align with left edge. 1000 means "x" align with right edge.</param>
            <param name="pivotY">0 means "y" align with bottom edge. 1000 means "y" align with top edge.</param>
            <param name="rotation">Rotation in degree. 90 means facing right.</param>
            <param name="width">Size in global space</param>
            <param name="height">Size in global space</param>
            <param name="borderL">Padding left in global space</param>
            <param name="borderR">Padding right in global space</param>
            <param name="borderD">Padding down in global space</param>
            <param name="borderU">Padding up in global space</param>
            <param name="partIgnore">Which part should be ignored. Set to true to exclude that part.</param>
            <param name="color">Color tint</param>
            <param name="z">Z value for sorting rendering cells</param>
            <returns>9 Rendering cells for this sprite</returns>
        </member>
        <member name="M:AngeliA.Renderer.GetAnimationGroupDuration(System.Int32)">
            <summary>
            Get total duration in frame of an animation group
            </summary>
        </member>
        <member name="M:AngeliA.Renderer.GetAnimationGroupDuration(AngeliA.SpriteGroup)">
            <summary>
            Get total duration in frame of an animation group
            </summary>
        </member>
        <member name="M:AngeliA.Renderer.DrawAnimation(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Renderer.DrawAnimation(AngeliA.SpriteGroup,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Renderer.DrawAnimation(AngeliA.SpriteGroup,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw the given animation into using render layer
            </summary>
            <param name="group"></param>
            <param name="x">Position in global space</param>
            <param name="y">Position in global space</param>
            <param name="pivotX">0 means "x" align with left edge. 1000 means "x" align with right edge.</param>
            <param name="pivotY">0 means "y" align with bottom edge. 1000 means "y" align with top edge.</param>
            <param name="rotation">Rotation in degree. 90 means facing right.</param>
            <param name="width">Size in global space</param>
            <param name="height">Size in global space</param>
            <param name="frame">Animation frame</param>
            <param name="z">Z value for sorting rendering cells</param>
            <returns>Rendering cell for this sprite</returns>
        </member>
        <member name="M:AngeliA.Renderer.HasSprite(System.Int32)">
            <summary>
            True if sprite with given ID is founded
            </summary>
        </member>
        <member name="M:AngeliA.Renderer.HasSpriteGroup(System.Int32)">
            <summary>
            True if sprite group with given ID is founded
            </summary>
        </member>
        <member name="M:AngeliA.Renderer.HasSpriteGroup(System.Int32,System.Int32@)">
            <summary>
            True if sprite group with given ID is founded
            </summary>
            <param name="groupID"></param>
            <param name="groupLength"></param>
        </member>
        <member name="M:AngeliA.Renderer.TryGetSprite(System.Int32,AngeliA.AngeSprite@,System.Boolean)">
            <summary>
            Get instance of sprite
            </summary>
            <param name="globalID"></param>
            <param name="sprite"></param>
            <param name="ignoreAnimation">True if ignore animation group with "globalID" as chainID</param>
            <returns>True if sprite founded</returns>
        </member>
        <member name="M:AngeliA.Renderer.TryGetAnimationGroup(System.Int32,AngeliA.SpriteGroup@)">
            <summary>
            Get instance of animation group
            </summary>
            <param name="groupID"></param>
            <param name="group"></param>
            <returns>True if animation group founded</returns>
        </member>
        <member name="M:AngeliA.Renderer.TryGetSpriteGroup(System.Int32,AngeliA.SpriteGroup@)">
            <summary>
            Get instance of sprite group
            </summary>
            <param name="groupID"></param>
            <param name="group"></param>
            <returns>True if sprite group founded</returns>
        </member>
        <member name="M:AngeliA.Renderer.TryGetSpriteFromGroup(System.Int32,System.Int32,AngeliA.AngeSprite@,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get sprite instance from given group ID and index
            </summary>
            <param name="groupID"></param>
            <param name="index"></param>
            <param name="sprite"></param>
            <param name="loopIndex">True if the index loop</param>
            <param name="clampIndex">True if clamp the index when out of range</param>
            <param name="ignoreAnimatedWhenFailback">True if don't use animated sprite when returning the failback sprite</param>
            <returns>True if sprite founded</returns>
        </member>
        <member name="M:AngeliA.Renderer.TryGetSpriteForGizmos(System.Int32,AngeliA.AngeSprite@)">
            <summary>
            Get sprite for rendering UI/icon/gizmos
            </summary>
            <param name="artworkID"></param>
            <param name="sprite"></param>
            <returns>True if sprite founded</returns>
        </member>
        <member name="M:AngeliA.Renderer.ClampCells(AngeliA.IRect,System.Int32,System.Int32)">
            <summary>
            Clamp cells in using layer inside rect range
            </summary>
            <param name="rect">Target range in global space</param>
            <param name="startIndex"></param>
            <param name="endIndex">(excluded)</param>
        </member>
        <member name="M:AngeliA.Renderer.ClampCells(System.Int32,AngeliA.IRect,System.Int32,System.Int32)">
            <summary>
            Clamp cells for given layer inside rect range
            </summary>
            <param name="layerIndex">Use RenderLayer.XXX to get this value</param>
            <param name="rect">Target range in global space</param>
            <param name="startIndex"></param>
            <param name="endIndex">(excluded)</param>
        </member>
        <member name="M:AngeliA.Renderer.ClampCells(AngeliA.Cell[],AngeliA.IRect,System.Int32,System.Int32)">
            <summary>
            Clamp cells inside rect range
            </summary>
            <param name="cells"></param>
            <param name="rect">Target range in global space</param>
            <param name="startIndex"></param>
            <param name="endIndex">(excluded)</param>
        </member>
        <member name="M:AngeliA.Renderer.GetCells(System.Span{AngeliA.Cell}@,System.Int32@)">
            <summary>
            Get cells inside using layer
            </summary>
            <param name="cells"></param>
            <param name="count"></param>
            <returns>True if cells founded</returns>
        </member>
        <member name="M:AngeliA.Renderer.GetCells(System.Int32,System.Span{AngeliA.Cell}@,System.Int32@)">
            <summary>
            Get cells inside given layer
            </summary>
            <param name="layer">Use RenderLayer.XXX to get this value</param>
            <param name="cells"></param>
            <param name="count"></param>
            <returns>True if cells founded</returns>
        </member>
        <member name="M:AngeliA.Renderer.GetLayerTint(System.Int32)">
            <summary>
            Get current color tint for given layer
            </summary>
            <param name="layer">Use RenderLayer.XXX to get this value</param>
        </member>
        <member name="M:AngeliA.Renderer.SetLayerTint(System.Int32,AngeliA.Color32)">
            <summary>
            Set current color tint for given layer
            </summary>
            <param name="layer">Use RenderLayer.XXX to get this value</param>
            <param name="tint"></param>
        </member>
        <member name="M:AngeliA.Renderer.MultLayerTint(System.Int32,AngeliA.Color32)">
            <summary>
            Make current color tint multiply given value for given layer
            </summary>
            <param name="layer">Use RenderLayer.XXX to get this value</param>
            <param name="tint"></param>
        </member>
        <member name="M:AngeliA.Renderer.RequireCharForPool(System.Char,AngeliA.CharSprite@)">
            <summary>
            Require given text character from internal caching
            </summary>
        </member>
        <member name="M:AngeliA.Renderer.RequireCharForPool(System.Char,System.Int32,AngeliA.CharSprite@)">
            <summary>
            Require given text character from internal caching
            </summary>
        </member>
        <member name="T:AngeliA.Sky">
            <summary>
            Core system handles background rendering of the game
            </summary>
        </member>
        <member name="P:AngeliA.Sky.SkyTintTopColor">
            <summary>
            Top color of the sky liner gradient
            </summary>
        </member>
        <member name="P:AngeliA.Sky.SkyTintBottomColor">
            <summary>
            Bottom color of the sky liner gradient
            </summary>
        </member>
        <member name="P:AngeliA.Sky.SunlightTintColor">
            <summary>
            Tint color for day-light
            </summary>
        </member>
        <member name="P:AngeliA.Sky.GradientTop">
            <summary>
            Gradient for "SkyTintTopColor" along in-game time
            </summary>
        </member>
        <member name="P:AngeliA.Sky.GradientBottom">
            <summary>
            Gradient for "SkyTintBottomColor" along in-game time
            </summary>
        </member>
        <member name="P:AngeliA.Sky.SunlightTint">
            <summary>
            Gradient for "SunlightTintColor" along in-game time
            </summary>
        </member>
        <member name="P:AngeliA.Sky.InGameDaytime01">
            <summary>
            Current in-game time (0 means 0:00. 0.5 means 12:00. 1 means 24:00)
            </summary>
        </member>
        <member name="M:AngeliA.Sky.ForceSkyboxTint(AngeliA.Color32,System.Int32)">
            <summary>
            Make both top and bottom sky tint gradient color into given color for specified frames long
            </summary>
        </member>
        <member name="M:AngeliA.Sky.ForceSkyboxTint(AngeliA.Color32,AngeliA.Color32,System.Int32)">
            <summary>
            Make top and bottom sky tint gradient color into given colors for specified frames long
            </summary>
        </member>
        <member name="M:AngeliA.Sky.SetInGameDaytime(System.Single)">
            <summary>
            Set current in-game time. (0 means 0:00. 0.5 means 12:00. 1 means 24:00. -1 means real world time)
            </summary>
        </member>
        <member name="M:AngeliA.Sky.GetInGameDaytimeFromRealTime">
            <summary>
            Get in-game time from current date time in real world
            </summary>
            <returns>(0 means 0:00. 0.5 means 12:00. 1 means 24:00)</returns>
        </member>
        <member name="T:AngeliA.Stage">
            <summary>
            Core system that handles entity spawning and despawning logic
            </summary>
        </member>
        <member name="F:AngeliA.Stage.SETTING_SET_VIEW_X">
            <summary>
            ID for remote setting between engine and rigged game
            </summary>
        </member>
        <member name="F:AngeliA.Stage.SETTING_SET_VIEW_Y">
            <summary>
            ID for remote setting between engine and rigged game
            </summary>
        </member>
        <member name="F:AngeliA.Stage.SETTING_SET_VIEW_Z">
            <summary>
            ID for remote setting between engine and rigged game
            </summary>
        </member>
        <member name="F:AngeliA.Stage.SETTING_SET_VIEW_H">
            <summary>
            ID for remote setting between engine and rigged game
            </summary>
        </member>
        <member name="P:AngeliA.Stage.EntityCounts">
            <summary>
            Current spawned entity count for each layers
            </summary>
        </member>
        <member name="P:AngeliA.Stage.Entities">
            <summary>
            Current spawned entity instances for each layer
            </summary>
        </member>
        <member name="P:AngeliA.Stage.SpawnRect">
            <summary>
            Rect in global space that determine where the entities need to be spawn from map
            </summary>
        </member>
        <member name="P:AngeliA.Stage.AntiSpawnRect">
            <summary>
            Rect in global space that determine where a despawned entity should not respawn from map
            </summary>
        </member>
        <member name="P:AngeliA.Stage.ViewRect">
            <summary>
            Rect in global space that represents player view. Ascpect ratio of this rect keeps the same when user adjust application window size, so the actual rect range for rendering is Renderer.CameraRect.
            </summary>
        </member>
        <member name="P:AngeliA.Stage.ViewZ">
            <summary>
            Current position Z value
            </summary>
        </member>
        <member name="P:AngeliA.Stage.Enable">
            <summary>
            True is the system is required for the game
            </summary>
        </member>
        <member name="P:AngeliA.Stage.IsReady">
            <summary>
            True if the system is ready to use
            </summary>
        </member>
        <member name="M:AngeliA.Stage.SetViewZ(System.Int32,System.Boolean)">
            <summary>
            Set current position Z
            </summary>
            <param name="newZ"></param>
            <param name="immediately">True if the internal data is immediately change instead of change in the end of the frame</param>
        </member>
        <member name="M:AngeliA.Stage.SetViewRectImmediately(AngeliA.IRect,System.Boolean,System.Boolean)">
            <summary>
            Set view rect position in global space
            </summary>
            <param name="newRect"></param>
            <param name="remapAllRenderingCells">True if change position and size for all existing rendering cells</param>
            <param name="resetDelay">True if ignore all existing delay operation of view rect position/size</param>
        </member>
        <member name="M:AngeliA.Stage.SetViewPositionDelay(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set view rect position at the end of current frame
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="lerp">Smooth amount (0 means no motion applys. 1000 means immediately applys)</param>
            <param name="priority"></param>
        </member>
        <member name="M:AngeliA.Stage.SetViewXDelay(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set view rect X at the end of current frame
            </summary>
            <param name="x"></param>
            <param name="lerp">Smooth amount (0 means no motion applys. 1000 means immediately applys)</param>
            <param name="priority"></param>
        </member>
        <member name="M:AngeliA.Stage.SetViewYDelay(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set view rect Y at the end of current frame
            </summary>
            <param name="y"></param>
            <param name="lerp">Smooth amount (0 means no motion applys. 1000 means immediately applys)</param>
            <param name="priority"></param>
        </member>
        <member name="M:AngeliA.Stage.SetViewSizeDelay(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set view rect height at the end of current frame
            </summary>
            <param name="height"></param>
            <param name="lerp"></param>
            <param name="priority"></param>
            <param name="centralized"></param>
        </member>
        <member name="M:AngeliA.Stage.SpawnEntity(System.Int32,System.Int32,System.Int32)">
            <summary>
            Find an entity with given ID from internal pool and make it into the stage
            </summary>
            <param name="typeID">ID of the entity. Can be cached by typeof(YourEntity).AngeHash()</param>
            <param name="x">Initial position in global space</param>
            <param name="y">Initial position in global space</param>
            <returns>Instance of the entity. Null when failed</returns>
        </member>
        <member name="M:AngeliA.Stage.SpawnEntity``1(System.Int32,System.Int32)">
            <summary>
            Find an entity with given ID from internal pool and make it into the stage
            </summary>
            <param name="x">Initial position in global space</param>
            <param name="y">Initial position in global space</param>
            <typeparam name="T">Type of the entity</typeparam>
            <returns>Instance of the entity. Null when failed</returns>
        </member>
        <member name="M:AngeliA.Stage.TrySpawnEntity(System.Int32,System.Int32,System.Int32,AngeliA.Entity@)">
            <summary>
            Find an entity with given ID from internal pool and make it into the stage
            </summary>
            <param name="typeID">ID of the entity. Can be cached by typeof(YourEntity).AngeHash()</param>
            <param name="x">Initial position in global space</param>
            <param name="y">Initial position in global space</param>
            <param name="entity">Instance of the entity</param>
            <returns>True if the entity is spawned</returns>
        </member>
        <member name="M:AngeliA.Stage.TrySpawnEntity``1(System.Int32,System.Int32,``0@)">
            <summary>
            Find an entity with given ID from internal pool and make it into the stage
            </summary>
            <typeparam name="T">Type of the entity</typeparam>
            <param name="x">Initial position in global space</param>
            <param name="y">Initial position in global space</param>
            <param name="entity">Instance of the entity</param>
            <returns>True if the entity is spawned</returns>
        </member>
        <member name="M:AngeliA.Stage.SpawnEntityFromWorld(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Find an entity with given ID from internal pool and make it into the stage.
            This function will make it an entity from map
            </summary>
            <param name="typeID">ID of the entity. Can be cached by typeof(YourEntity).AngeHash()</param>
            <param name="x">Initial position in global space</param>
            <param name="y">Initial position in global space</param>
            <param name="z">Z of the map position</param>
            <param name="reposDeltaX">Offset in global space for entity reposition</param>
            <param name="reposDeltaY">Offset in global space for entity reposition</param>
            <param name="forceSpawn">True if ignore the StagedEntityPool check and AntiSpawnRect check</param>
            <returns>Instance of the entity. Null when failed</returns>
        </member>
        <member name="M:AngeliA.Stage.FindEntity``1">
            <summary>
            Get instance of an spawned entity with type of T
            </summary>
        </member>
        <member name="M:AngeliA.Stage.FindEntity(System.Int32)">
            <summary>
            Get instance of an spawned entity which have given type ID
            </summary>
        </member>
        <member name="M:AngeliA.Stage.TryFindEntity``1(``0@)">
            <summary>
            Get instance of an spawned entity with type of E
            </summary>
            <returns>True if the entity founded</returns>
        </member>
        <member name="M:AngeliA.Stage.TryFindEntity(System.Int32,AngeliA.Entity@)">
            <summary>
            Get instance of an spawned entity which have given type ID
            </summary>
            <returns>True if the entity founded</returns>
        </member>
        <member name="M:AngeliA.Stage.TryFindEntityNearby``1(AngeliA.Int2,``0@,System.Func{``0,System.Boolean})">
            <summary>
            Get nearest instance of an spawned entity from given position with type of E
            </summary>
            <param name="pos">(in global space)</param>
            <param name="finalTarget"></param>
            <param name="condition">Only include the entity target when this function return true. Set to null to not having extra checking</param>
            <returns>True if entity founded</returns>
        </member>
        <member name="M:AngeliA.Stage.TryGetEntities(System.Int32,System.ReadOnlySpan{AngeliA.Entity}@,System.Int32@)">
            <summary>
            Get all entities inside given layer. The result array referenced by the span is cached. No heap pressure.
            </summary>
            <param name="layer">Use EntityLayer.XXX to get this value</param>
            <param name="entities">Result span</param>
            <param name="count">How many entities are inside the result</param>
            <returns>True if the result is founded</returns>
        </member>
        <member name="M:AngeliA.Stage.IsValidEntityID(System.Int32)">
            <summary>
            True if the given ID is a valid entity type ID in internal pool
            </summary>
        </member>
        <member name="M:AngeliA.Stage.ForAllActiveEntities``1(System.Int32)">
            <summary>
            Iterate through all active entities inside given layer
            </summary>
            <typeparam name="E">Type of target entity</typeparam>
            <param name="entityLayer">Use EntityLayer.XXX to get this value. Set to -1 to target all layers</param>
        </member>
        <member name="M:AngeliA.Stage.GetSpawnedEntityCount(System.Int32)">
            <summary>
            Get how many entities of given type is on stage currently
            </summary>
            <param name="id">ID of the entity. Can be cached by typeof(YourEntity).AngeHash()</param>
        </member>
        <member name="M:AngeliA.Stage.TryGetStagedEntity(AngeliA.Int3,AngeliA.Entity@)">
            <summary>
            Get instance of an staged entity by instanceID from StagedEntityPool
            </summary>
            <param name="instanceID">Get this from Entity.InstanceID</param>
            <param name="instance"></param>
            <returns>True if the result is founded</returns>
        </member>
        <member name="M:AngeliA.Stage.DespawnAllEntitiesOfType``1(System.Int32)">
            <param name="targetLayer">Set to -1 to apply on all layers</param>
        </member>
        <member name="M:AngeliA.Stage.RemoveStagedEntity(AngeliA.Int3)">
            <summary>
            Remove entity with given instance ID from StagedEntityPool
            </summary>
        </member>
        <member name="M:AngeliA.Stage.DespawnAllNonUiEntities(System.Boolean)">
            <param name="refreshImmediately">True if refresh the active state inside this function</param>
        </member>
        <member name="M:AngeliA.Stage.PeekOrGetEntity(System.Int32)">
            <summary>
            Get instance of an unspawned entity from pool first, if not found, get a spawned one from the stage
            </summary>
            <returns>The entity instance. Null if not found</returns>
        </member>
        <member name="M:AngeliA.Stage.PeekOrGetEntity``1">
            <summary>
            Get instance of an unspawned entity from pool first, if not found, get a spawned one from the stage
            </summary>
            <returns>True if the instance is founded</returns>
        </member>
        <member name="M:AngeliA.Stage.GetOrSpawnEntity(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get instance of an entity from stage first, if not found, spawn a new one.
            </summary>
            <param name="typeID"></param>
            <param name="x">Initial position in global space when spawn a new one</param>
            <param name="y">Initial position in global space when spawn a new one</param>
            <returns>The entity instance. Null if not found</returns>
        </member>
        <member name="M:AngeliA.Stage.GetOrSpawnEntity``1(System.Int32,System.Int32)">
            <summary>
            Get instance of an entity from stage first, if not found, spawn a new one.
            </summary>
            <param name="x">Initial position in global space when spawn a new one</param>
            <param name="y">Initial position in global space when spawn a new one</param>
            <returns>The entity instance. Null if not found</returns>
        </member>
        <member name="M:AngeliA.Stage.IsEntityRequireDrawBehind(System.Int32)">
            <summary>
            True if entity with given type ID should draw inside behind map layer
            </summary>
        </member>
        <member name="M:AngeliA.Stage.GetEntityCapacity(System.Int32)">
            <summary>
            Get max size limitation of target entity inside it's entity layer
            </summary>
        </member>
        <member name="M:AngeliA.Stage.IsEntityRequireReposition(System.Int32)">
            <summary>
            True if the target entity keep it's position when out of range. This is done by setting the map block data.
            </summary>
        </member>
        <member name="M:AngeliA.Stage.GetCameraCullingPadding">
            <summary>
            Get current expand padding for camera rect in global space
            </summary>
        </member>
        <member name="M:AngeliA.Stage.GetEntityType(System.Int32)">
            <summary>
            Get System.Type for given type ID. Null if ID is invalid
            </summary>
        </member>
        <member name="M:AngeliA.Stage.TryRepositionEntity(AngeliA.Entity,System.Boolean)">
            <summary>
            Perform reposition logic of the entity instance.
            </summary>
            <param name="entity"></param>
            <param name="carryThoughZ">True if the entity is being keep into other map z-layer</param>
        </member>
        <member name="T:AngeliA.Task">
            <summary>
            Single unit to hold logic for TaskSystem. ⚠ Use global single instance from TaskSystem.PeekFromPool ⚠
            </summary>
        </member>
        <member name="P:AngeliA.Task.LocalFrame">
            <summary>
            Frame that start from 0 when the task begins
            </summary>
        </member>
        <member name="P:AngeliA.Task.UserData">
            <summary>
            Custom data for the internal logic
            </summary>
        </member>
        <member name="M:AngeliA.Task.OnStart">
            <summary>
            This function is called when this task start
            </summary>
        </member>
        <member name="M:AngeliA.Task.OnEnd">
            <summary>
            This function is called when this task end
            </summary>
        </member>
        <member name="M:AngeliA.Task.FrameUpdate">
            <summary>
            This function is used to handle the internal logic.
            </summary>
            <returns>"Continue" if the task should keep on after this frame. "End" if the task should end.</returns>
        </member>
        <member name="T:AngeliA.TaskResult">
            <summary>
            Represent result of the task at current frame
            </summary>
        </member>
        <member name="F:AngeliA.TaskResult.Continue">
            <summary>
            The task should keep one
            </summary>
        </member>
        <member name="F:AngeliA.TaskResult.End">
            <summary>
            The task should end
            </summary>
        </member>
        <member name="T:AngeliA.TaskSystem">
            <summary>
            Core system to handle in-game task that interrupt the gameplay
            </summary>
        </member>
        <member name="M:AngeliA.TaskSystem.TryAddToFirst(System.Int32,AngeliA.Task@)">
            <summary>
            Add a new task to first in current queue
            </summary>
            <param name="id">Type ID of the task. Use typeof(YourTask).AngeHash() to cache this ID</param>
            <param name="task">Instance of the task</param>
            <returns>True if successfuly added</returns>
        </member>
        <member name="M:AngeliA.TaskSystem.TryAddToFirst(System.Int32,System.Object,AngeliA.Task@)">
            <summary>
            Add a new task to first in current queue with custom data
            </summary>
            <param name="id">Type ID of the task. Use typeof(YourTask).AngeHash() to cache this ID</param>
            <param name="userData">Custom data of this operation. Use Task.UserData to get this data in the task's internal logic.</param>
            <param name="task">Instance of the task</param>
            <returns>True if successfuly added</returns>
        </member>
        <member name="M:AngeliA.TaskSystem.AddToFirst(System.Int32,System.Object)">
            <inheritdoc cref="M:AngeliA.TaskSystem.TryAddToFirst(System.Int32,System.Object,AngeliA.Task@)"/>
        </member>
        <member name="M:AngeliA.TaskSystem.TryAddToLast(System.Int32,AngeliA.Task@)">
            <summary>
            Add a new task to last in current queue
            </summary>
            <param name="id">Type ID of the task. Use typeof(YourTask).AngeHash() to cache this ID</param>
            <param name="task">Instance of the task</param>
            <returns>True if successfuly added</returns>
        </member>
        <member name="M:AngeliA.TaskSystem.TryAddToLast(System.Int32,System.Object,AngeliA.Task@)">
            <summary>
            Add a new task to last in current queue with custom data
            </summary>
            <param name="id">Type ID of the task. Use typeof(YourTask).AngeHash() to cache this ID</param>
            <param name="userData">Custom data of this operation. Use Task.UserData to get this data in the task's internal logic.</param>
            <param name="task">Instance of the task</param>
            <returns>True if successfuly added</returns>
        </member>
        <member name="M:AngeliA.TaskSystem.AddToLast(System.Int32,System.Object)">
            <inheritdoc cref="M:AngeliA.TaskSystem.TryAddToLast(System.Int32,System.Object,AngeliA.Task@)"/>
        </member>
        <member name="M:AngeliA.TaskSystem.ClearAllTask">
            <summary>
            Reset all current performing tasks
            </summary>
        </member>
        <member name="M:AngeliA.TaskSystem.EndAllTask">
            <summary>
            Make all current performing task ends
            </summary>
        </member>
        <member name="M:AngeliA.TaskSystem.GetTaskAt(System.Int32)">
            <summary>
            Get instance of task inside current performing queue
            </summary>
        </member>
        <member name="M:AngeliA.TaskSystem.GetCurrentTask">
            <summary>
            Get instance of current performing task
            </summary>
        </member>
        <member name="M:AngeliA.TaskSystem.GetWaitingTaskCount">
            <summary>
            Get how many tasks are currently waiting for the current task
            </summary>
        </member>
        <member name="M:AngeliA.TaskSystem.HasTask">
            <summary>
            True if there are any task performing
            </summary>
            <returns></returns>
        </member>
        <member name="M:AngeliA.TaskSystem.HasTask``1">
            <summary>
            True if there are any task in given type performing
            </summary>
        </member>
        <member name="M:AngeliA.TaskSystem.PeekFromPool(System.Int32)">
            <summary>
            Get global single instance of the task for given type ID
            </summary>
        </member>
        <member name="T:AngeliA.Bullet">
            <summary>
            An entity represent bullet from weapons that deal damage to IDamageReceiver
            </summary>
        </member>
        <member name="P:AngeliA.Bullet.AttackIndex">
            <summary>
            Index for style of the attack from the sender
            </summary>
        </member>
        <member name="P:AngeliA.Bullet.AttackCharged">
            <summary>
            True if the attack is charged
            </summary>
        </member>
        <member name="P:AngeliA.Bullet.DamageType">
            <summary>
            What extra type of damage does this bullet deal
            </summary>
        </member>
        <member name="P:AngeliA.Bullet.Sender">
            <summary>
            This entity send the bullet
            </summary>
        </member>
        <member name="P:AngeliA.Bullet.FailbackTargetTeam">
            <summary>
            Default team for checking attack target
            </summary>
        </member>
        <member name="P:AngeliA.Bullet.TargetTeam">
            <summary>
            Team data for checking which group of target should be attack
            </summary>
        </member>
        <member name="P:AngeliA.Bullet.BasicDamage">
            <summary>
            Intrinsic damage value
            </summary>
        </member>
        <member name="P:AngeliA.Bullet.EnvironmentMask">
            <summary>
            Group of physics layers for checking environment that this bullet can react with
            </summary>
        </member>
        <member name="P:AngeliA.Bullet.ReceiverMask">
            <summary>
            Group of physics layers for checking target that this bullet can react with
            </summary>
        </member>
        <member name="P:AngeliA.Bullet.EnvironmentHitCount">
            <summary>
            How many environment collider can this bullet hit without getting despawn
            </summary>
        </member>
        <member name="P:AngeliA.Bullet.ReceiverHitCount">
            <summary>
            How many target collider can this bullet hit without getting despawn
            </summary>
        </member>
        <member name="P:AngeliA.Bullet.RoundHitCheck">
            <summary>
            True if the bullet check for target in a round shaped range
            </summary>
        </member>
        <member name="P:AngeliA.Bullet.Duration">
            <summary>
            How long can this bullet exists on stage in frame
            </summary>
        </member>
        <member name="F:AngeliA.Bullet.Damage">
            <summary>
            Final damage value
            </summary>
        </member>
        <member name="M:AngeliA.Bullet.ReceiverHitCheck(System.Boolean@)">
            <summary>
            Check for hitting any IDamageReceiver
            </summary>
            <param name="requireSelfDestroy">True if this bullet should be despawn</param>
        </member>
        <member name="M:AngeliA.Bullet.EnvironmentHitCheck(System.Boolean@)">
            <summary>
            Check for hitting any environment block
            </summary>
            <param name="requireSelfDestroy">True if this bullet should be despawn</param>
        </member>
        <member name="M:AngeliA.Bullet.BeforeDespawn(AngeliA.IDamageReceiver)">
            <summary>
            This function is called before the bullet get despawn by performing damage logic
            </summary>
            <param name="receiver">The target it hits</param>
        </member>
        <member name="M:AngeliA.Bullet.PerformHitEnvironment(System.Boolean@)">
            <summary>
            This function is called when the bullet hit environment colliders
            </summary>
            <param name="requireSelfDestroy">True if this bullet should be despawn</param>
        </member>
        <member name="M:AngeliA.Bullet.PerformHitReceiver(AngeliA.IDamageReceiver,System.Boolean@)">
            <summary>
            This function is called when the bullet hit IDamageReceiver
            </summary>
            <param name="receiver">The target it hits</param>
            <param name="requireSelfDestroy">True if this bullet should be despawn</param>
        </member>
        <member name="M:AngeliA.Bullet.GroundCheck(AngeliA.Color32@)">
            <summary>
            True if the bullet is touching ground
            </summary>
        </member>
        <member name="M:AngeliA.Bullet.GetDamage">
            <summary>
            Get the damage data using by this bullet to deal damage
            </summary>
            <returns></returns>
        </member>
        <member name="T:AngeliA.BodyGadget">
            <summary>
            Representation of a pose character's extra body part. Always use instance from pool.
            </summary>
            <example><code>
            BodyGadget.TryGetGadget(id, out var result);
            </code></example>
        </member>
        <member name="P:AngeliA.BodyGadget.SheetIndex">
            <summary>
            Which artwork sheet does this body gadget get it's artwork from
            </summary>
        </member>
        <member name="P:AngeliA.BodyGadget.GadgetID">
            <summary>
            Global unique AngeHash of this body gadget
            </summary>
        </member>
        <member name="P:AngeliA.BodyGadget.GadgetName">
            <summary>
            Global unique AngeName of this body gadget 
            </summary>
        </member>
        <member name="P:AngeliA.BodyGadget.GadgetType">
            <summary>
            Type of this body gadget
            </summary>
        </member>
        <member name="P:AngeliA.BodyGadget.SpriteLoaded">
            <summary>
            True if artwork sprite is loaded
            </summary>
        </member>
        <member name="M:AngeliA.BodyGadget.DrawGadget(AngeliA.PoseCharacterRenderer)">
            <summary>
            Render the gadget for the given character
            </summary>
        </member>
        <member name="M:AngeliA.BodyGadget.FillFromSheet(System.String)">
            <summary>
            Load sprite data from Renderer.CurrentSheet
            </summary>
        </member>
        <member name="M:AngeliA.BodyGadget.DrawGadgetGizmos(AngeliA.IRect,AngeliA.Color32,System.Int32)">
            <summary>
            Render the gadget as gizmos
            </summary>
            <param name="rect">Global rect position</param>
            <param name="tint">Color tint</param>
            <param name="z">Z position for sorting</param>
        </member>
        <member name="M:AngeliA.BodyGadget.ForAllGadget">
            <summary>
            Iterate through all body gadgets
            </summary>
            <returns></returns>
        </member>
        <member name="M:AngeliA.BodyGadget.GetDefaultGadgetID(System.Int32,AngeliA.BodyGadgetType)">
            <summary>
            Get body gadget id of the default gadget for the given character
            </summary>
        </member>
        <member name="M:AngeliA.BodyGadget.TryGetGadget(System.Int32,AngeliA.BodyGadget@)">
            <summary>
            Get body gadget instance from system pool
            </summary>
        </member>
        <member name="T:AngeliA.Ear">
            <summary>
            Animal ear body gadget for pose character. (Like cat-girl's ears, not human ears)
            </summary>
        </member>
        <member name="P:AngeliA.Ear.MotionAmount">
            <summary>
            How much ease motion will be apply from the character's movement (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="M:AngeliA.Ear.FrontOfHeadL(AngeliA.PoseCharacterRenderer)">
            <summary>
            True if the left ear should be rendered in front of the head
            </summary>
        </member>
        <member name="M:AngeliA.Ear.FrontOfHeadR(AngeliA.PoseCharacterRenderer)">
            <summary>
            True if the right ear should be rendered in front of the head
            </summary>
        </member>
        <member name="M:AngeliA.Ear.DrawGadgetFromPool(AngeliA.PoseCharacterRenderer)">
            <summary>
            Draw ear gadgets for the given character.
            </summary>
        </member>
        <member name="M:AngeliA.Ear.DrawSpriteAsEar(AngeliA.PoseCharacterRenderer,AngeliA.OrientedSprite,AngeliA.OrientedSprite,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Draw given sprite as ear
            </summary>
            <param name="renderer">Target character</param>
            <param name="spriteLeft">Left ear artwork sprite</param>
            <param name="spriteRight">Right ear artwork sprite</param>
            <param name="frontOfHeadL">Draw left ear in front of head</param>
            <param name="frontOfHeadR">Draw right ear in front of head</param>
            <param name="motionAmount"></param>
            <param name="selfMotion">True if the ear randomly shakes</param>
        </member>
        <member name="T:AngeliA.CharacterFaceExpression">
            <summary>
            Face expression type for pose animation characters
            </summary>
        </member>
        <member name="T:AngeliA.Face">
            <summary>
            Face gadget for pose characters
            </summary>
        </member>
        <member name="M:AngeliA.Face.DrawEye(AngeliA.CharacterFaceExpression,AngeliA.IRect,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Draw one eye for pose-style character
            </summary>
            <param name="expression">Current face expression</param>
            <param name="faceRect">Rect position for the character's face</param>
            <param name="leftEye">True if this eye is the left eye</param>
            <param name="facingRight">True if the character is facing right</param>
            <param name="animationFrame"></param>
        </member>
        <member name="M:AngeliA.Face.DrawMouth(AngeliA.CharacterFaceExpression,AngeliA.IRect,System.Boolean,System.Int32)">
            <summary>
            Draw mouth for pose-style character
            </summary>
            <param name="expression">Current face expression</param>
            <param name="faceRect">Rect position for the character's face</param>
            <param name="facingRight">True if the character is facing right</param>
            <param name="animationFrame"></param>
        </member>
        <member name="M:AngeliA.Face.GetFaceRect(AngeliA.PoseCharacterRenderer,AngeliA.IRect@)">
            <summary>
            Get current rect position for the given character's face
            </summary>
        </member>
        <member name="M:AngeliA.Face.GetScleraRect(AngeliA.PoseCharacterRenderer,System.Boolean)">
            <summary>
            Get rect position of sclera part of the eye
            </summary>
            <param name="renderer">Target character</param>
            <param name="leftEye">True if the eye is left eye</param>
        </member>
        <member name="M:AngeliA.Face.DrawGadgetFromPool(AngeliA.PoseCharacterRenderer)">
            <summary>
            Draw face gadget for given character
            </summary>
        </member>
        <member name="M:AngeliA.Face.DrawSpriteAsHumanEar(AngeliA.PoseCharacterRenderer,AngeliA.OrientedSprite,AngeliA.OrientedSprite,System.Int32,System.Int32)">
            <summary>
            Draw two human style ears on both sides of the face
            </summary>
            <param name="renderer">Target character</param>
            <param name="spriteLeft">Left ear sprite</param>
            <param name="spriteRight">Right ear sprite</param>
            <param name="offsetXL">Horizontal offset for left ear in global space</param>
            <param name="offsetXR">Horizontal offset for right ear in global space</param>
        </member>
        <member name="T:AngeliA.Hair">
            <summary>
            Hair gadget for pose styled characters
            </summary>
        </member>
        <member name="P:AngeliA.Hair.FlowAmountX">
            <summary>
            Amount of the horizontal flow animation generate from character's movements (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="P:AngeliA.Hair.FlowAmountY">
            <summary>
            Amount of the vertical flow animation generate from character's movements (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="P:AngeliA.Hair.SpriteHairForward">
            <summary>
            Artwork sprite rendering in the front-side of character's head
            </summary>
        </member>
        <member name="P:AngeliA.Hair.SpriteHairBackward">
            <summary>
            Artwork sprite rendering in the back-side of character's head
            </summary>
        </member>
        <member name="P:AngeliA.Hair.SpriteBraidLeft">
            <summary>
            Artwork sprite of left braid
            </summary>
        </member>
        <member name="P:AngeliA.Hair.SpriteBraidRight">
            <summary>
            Artwork sprite of right braid
            </summary>
        </member>
        <member name="P:AngeliA.Hair.UseLimbRotateForBraid">
            <summary>
            Make braids perform limb rotate instead of simply rotate the rendering cell
            </summary>
        </member>
        <member name="P:AngeliA.Hair.ForceBackOnFlowForBraid">
            <summary>
            Set to true will make braid rendered in backside when it flows
            </summary>
        </member>
        <member name="P:AngeliA.Hair.MotionAmountForBraid">
            <summary>
            Amount of the braid's rotating animation generate from character's movements (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="P:AngeliA.Hair.FlowMotionAmountForBraid">
            <summary>
            Amount of the braid's motion animation for hairs flowing in air (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="P:AngeliA.Hair.DropMotionAmountForBraid">
            <summary>
            Amount of the braid's animation generate when character rise and drop (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="M:AngeliA.Hair.DrawGadgetFromPool(AngeliA.PoseCharacterRenderer)">
            <summary>
            Draw hair gadget for given character
            </summary>
        </member>
        <member name="M:AngeliA.Hair.DrawSpriteAsHair(AngeliA.PoseCharacterRenderer,AngeliA.OrientedSprite,AngeliA.OrientedSprite,System.Int32,System.Int32)">
            <summary>
            Draw given sprites as hair for given character
            </summary>
            <param name="renderer">Target character</param>
            <param name="spriteForward">Hair artwork sprite for the front-side</param>
            <param name="spriteBackward">Hair artwork sprite for the back-side</param>
            <param name="flowAmountX">Horizontal motion animation amount for hairs flowing in air</param>
            <param name="flowAmountY">Vertical motion animation amount for hairs flowing in air</param>
        </member>
        <member name="M:AngeliA.Hair.DrawBraid(AngeliA.PoseCharacterRenderer,System.Boolean,AngeliA.OrientedSprite,AngeliA.OrientedSprite,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Draw given sprites as braids for given character
            </summary>
            <param name="renderer">Target character</param>
            <param name="forceBackOnFlow">Set to true will make braid rendered in backside when it flows</param>
            <param name="spriteLeft">Artwork sprite on the left side</param>
            <param name="spriteRight">Artwork sprite on the right side</param>
            <param name="motionAmount">Motion animation amount</param>
            <param name="flowMotionAmount">Motion animation amount for hairs flowing in air</param>
            <param name="dropMotionAmount">Motion animation amount from character's rise and drop</param>
            <param name="useLimbRotate">Perform limb rotate instead of simply rotate the rendering cell</param>
            <param name="offsetX">Position offset X</param>
            <param name="offsetY">Position offset Y</param>
        </member>
        <member name="T:AngeliA.Horn">
            <summary>
            Horn body gadget for pose-style character
            </summary>
        </member>
        <member name="P:AngeliA.Horn.AnchorOnFace">
            <summary>
            True if the horn grows from character's face (like Ayame from Hololive)
            </summary>
        </member>
        <member name="M:AngeliA.Horn.FrontOfHeadL(AngeliA.PoseCharacterRenderer)">
            <summary>
            True if the left horn should render in front of character's head
            </summary>
        </member>
        <member name="M:AngeliA.Horn.FrontOfHeadR(AngeliA.PoseCharacterRenderer)">
            <summary>
            True if the right horn should render in front of character's head
            </summary>
        </member>
        <member name="M:AngeliA.Horn.DrawGadgetFromPool(AngeliA.PoseCharacterRenderer)">
            <summary>
            Draw horn gadget for given character
            </summary>
        </member>
        <member name="M:AngeliA.Horn.DrawSpriteAsHorn(AngeliA.PoseCharacterRenderer,AngeliA.OrientedSprite,AngeliA.OrientedSprite,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draw given sprites as horn for given character
            </summary>
            <param name="renderer">Target character</param>
            <param name="spriteLeft">Artwork sprite for left horn</param>
            <param name="spriteRight">Artwork sprite for right horn</param>
            <param name="frontOfHeadL">True if the left horn should render in front of character's head</param>
            <param name="frontOfHeadR">True if the right horn should render in front of character's head</param>
            <param name="onFace">True if the horn grows from character's face (like Ayame from Hololive)</param>
        </member>
        <member name="T:AngeliA.ModularEar">
            <summary>
            Ear body gadget that auto generate from artwork sheet
            </summary>
        </member>
        <member name="T:AngeliA.ModularFace">
            <summary>
            Face body gadget that auto generate from artwork sheet
            </summary>
        </member>
        <member name="T:AngeliA.ModularHair">
            <summary>
            Hair body gadget that auto generate from artwork sheet
            </summary>
        </member>
        <member name="T:AngeliA.ModularHorn">
            <summary>
            Horn body gadget that auto generate from artwork sheet
            </summary>
        </member>
        <member name="T:AngeliA.ModularTail">
            <summary>
            Tail body gadget that auto generate from artwork sheet
            </summary>
        </member>
        <member name="T:AngeliA.ModularWing">
            <summary>
            Wing body gadget that auto generate from artwork sheet
            </summary>
        </member>
        <member name="T:AngeliA.Tail">
            <summary>
            Tail body gadget for pose-style character
            </summary>
        </member>
        <member name="P:AngeliA.Tail.LimbGrow">
            <summary>
            Size-growing amount for limb rotation (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="P:AngeliA.Tail.AngleAmountRoot">
            <summary>
            Total rotating angle amount for limb rotation (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="P:AngeliA.Tail.AngleAmountSubsequent">
            <summary>
            Subsequent sugment's rotating angle amount for limb rotation (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="P:AngeliA.Tail.AngleOffset">
            <summary>
            Total offset angle for the root sugment
            </summary>
        </member>
        <member name="P:AngeliA.Tail.Frequency">
            <summary>
            Motion frequency for the limb rotation, smaller means faster
            </summary>
        </member>
        <member name="P:AngeliA.Tail.FrequencyAlt">
            <summary>
            Motion frequency for the less influential part limb rotation, smaller means faster
            </summary>
        </member>
        <member name="P:AngeliA.Tail.FrameLen">
            <summary>
            Looping duration for the limb rotation
            </summary>
        </member>
        <member name="P:AngeliA.Tail.FrameDelta">
            <summary>
            Looping duration for the less influential part limb rotation
            </summary>
        </member>
        <member name="P:AngeliA.Tail.OffsetX">
            <summary>
            Total position offset X
            </summary>
        </member>
        <member name="P:AngeliA.Tail.OffsetY">
            <summary>
            Total position offset Y
            </summary>
        </member>
        <member name="M:AngeliA.Tail.DrawSpriteAsWhipTail(AngeliA.OrientedSprite,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Draw given artwork sprite as tail at given position
            </summary>
            <param name="oSprite">Artwork sprite</param>
            <param name="x">Position X in global space</param>
            <param name="y">Position Y in global space</param>
            <param name="facingFront">Is character facing front</param>
            <param name="facingRight">Is character facing right</param>
            <param name="facingUp">Is character facing up</param>
            <param name="frequency">Motion frequency for the limb rotation, smaller means faster</param>
            <param name="frequencyAlt">Motion frequency for the less influential part limb rotation, smaller means faster</param>
            <param name="frameLen">Looping duration for the limb rotation</param>
            <param name="frameDelta">Looping duration for the less influential part limb rotation</param>
            <param name="angleAmountRoot">Total rotating angle amount for limb rotation (0 means 0%, 1000 means 100%)</param>
            <param name="angleAmountSubsequent">Subsequent sugment's rotating angle amount for limb rotation (0 means 0%, 1000 means 100%)</param>
            <param name="angleOffset">Total offset angle for the root sugment</param>
            <param name="limbGrow">Size-growing amount for limb rotation (0 means 0%, 1000 means 100%)</param>
            <param name="offsetX">Total position offset X</param>
            <param name="offsetY">Total position offset Y</param>
            <param name="isFlying">Is character flying</param>
            <param name="frameOffset">Current animation frame</param>
            <param name="z">Z value for sorting rendering cell</param>
        </member>
        <member name="M:AngeliA.Tail.DrawSpriteAsSimpleTail(AngeliA.OrientedSprite,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Draw given artwork sprite as tail with only one segment
            </summary>
            <param name="oSprite">Artwork sprite</param>
            <param name="x">Position X in global space</param>
            <param name="y">Position Y in global space</param>
            <param name="facingFront">Is character facing front</param>
            <param name="facingRight">Is character facing right</param>
            <param name="facingUp">Is character facing up</param>
            <param name="z">Z value for sorting rendering cell</param>
        </member>
        <member name="T:AngeliA.Wing">
            <summary>
            Wing body gadget for pose-style character
            </summary>
        </member>
        <member name="P:AngeliA.Wing.IsPropeller">
            <summary>
            True if this wing is in tail-propeller style (like character "Tails" from Sonic)
            </summary>
        </member>
        <member name="P:AngeliA.Wing.Scale">
            <summary>
            Size scale for the wing (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="M:AngeliA.Wing.DrawGadgetFromPool(AngeliA.PoseCharacterRenderer)">
            <summary>
            Draw gadget for given character
            </summary>
        </member>
        <member name="M:AngeliA.Wing.DrawSpriteAsWing(AngeliA.PoseCharacterRenderer,AngeliA.OrientedSprite,System.Boolean,System.Int32)">
            <summary>
            Draw given artwork sprite as wing for given character
            </summary>
            <param name="renderer">Target character</param>
            <param name="oSprite">Artwork sprite</param>
            <param name="isPropeller">True if this wing is in propeller style (like character "Tails" from Sonic)</param>
            <param name="scale">Size scale (0 means 0%, 1000 means 100%)</param>
        </member>
        <member name="M:AngeliA.Wing.IsPropellerWing(System.Int32)">
            <summary>
            True if the given wing is a propeller style wing
            </summary>
        </member>
        <member name="T:AngeliA.CoverMode">
            <summary>
            How cloths is covering the bodypart
            </summary>
        </member>
        <member name="F:AngeliA.BodyPartTransform.X">
            <summary>
            Position X in local space
            </summary>
        </member>
        <member name="F:AngeliA.BodyPartTransform.Y">
            <summary>
            Position Y in local space
            </summary>
        </member>
        <member name="F:AngeliA.BodyPartTransform.Z">
            <summary>
            Z value for sort rendering cells
            </summary>
        </member>
        <member name="F:AngeliA.BodyPartTransform.Rotation">
            <summary>
            Angle of this bodypart
            </summary>
        </member>
        <member name="F:AngeliA.BodyPartTransform.SizeX">
            <summary>
            Artwork sprite Width in global size
            </summary>
        </member>
        <member name="F:AngeliA.BodyPartTransform.SizeY">
            <summary>
            Artwork sprite Height in global size
            </summary>
        </member>
        <member name="F:AngeliA.BodyPartTransform.Width">
            <summary>
            Horizontal size of this bodypart
            </summary>
        </member>
        <member name="F:AngeliA.BodyPartTransform.Height">
            <summary>
            Vertical size of this bodypart
            </summary>
        </member>
        <member name="F:AngeliA.BodyPartTransform.PivotX">
            <summary>
            Current pivot X of this bodypart (0 means left, 1000 means right)
            </summary>
        </member>
        <member name="F:AngeliA.BodyPartTransform.PivotY">
            <summary>
            Current pivot Y of this bodypart (0 means bottom, 1000 means top)
            </summary>
        </member>
        <member name="F:AngeliA.BodyPartTransform.FrontSide">
            <summary>
            True if the bodypart is facing front
            </summary>
        </member>
        <member name="T:AngeliA.BodyPart">
            <summary>
            Representation of a bodypart for a pose-style character
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.ID">
            <summary>
            Global unique id for this bodypart
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.Border">
            <summary>
            Artwork sprite border
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.SpritePivotX">
            <summary>
            Artwork sprite pivot X
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.SpritePivotY">
            <summary>
            Artwork sprite pivot Y
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.FlexableSizeY">
            <summary>
            Height that changes with character's body height
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.UseLimbFlip">
            <summary>
            True if the limb flip horizontaly when rotate over specified angle	
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.LimbParent">
            <summary>
            Which bodypart does this bodypart attached on. Set to null if it's not a limb
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.RotateWithBody">
            <summary>
            True if the limb apply rotation from body of the character
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.IsFullCovered">
            <summary>
            True if this bodypart is totaly covered by cloth
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.FacingSign">
            <summary>
            Return 1 if this bodypart is facing right
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.FacingRight">
            <summary>
            True if this bodypart is facing right
            </summary>
        </member>
        <member name="F:AngeliA.BodyPart.GlobalX">
            <summary>
            Position X in global space
            </summary>
        </member>
        <member name="F:AngeliA.BodyPart.GlobalY">
            <summary>
            Position Y in global space
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.X">
            <summary>
            Position X in local space
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.Y">
            <summary>
            Position Y in local space
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.Z">
            <summary>
            Z value for sort rendering cells
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.Rotation">
            <summary>
            Angle of this bodypart
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.SizeX">
            <summary>
            Artwork sprite Width in global size
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.SizeY">
            <summary>
            Artwork sprite Height in global size
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.Width">
            <summary>
            Horizontal size of this bodypart
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.Height">
            <summary>
            Vertical size of this bodypart
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.PivotX">
            <summary>
            Current pivot X of this bodypart (0 means left, 1000 means right)
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.PivotY">
            <summary>
            Current pivot Y of this bodypart (0 means bottom, 1000 means top)
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.FrontSide">
            <summary>
            True if the bodypart is facing front
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.Tint">
            <summary>
            Color tint
            </summary>
        </member>
        <member name="P:AngeliA.BodyPart.Covered">
            <summary>
            How this bodypart is being covered by cloths
            </summary>
        </member>
        <member name="M:AngeliA.BodyPart.#ctor(AngeliA.BodyPart,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Representation of a bodypart for a pose-style character
            </summary>
            <param name="parent">Which bodypart does this bodypart attached on. Set to null if it's not a limb</param>
            <param name="useLimbFlip">True if the limb flip horizontaly when rotate over specified angle</param>
            <param name="rotateWithBody">True if the limb apply rotation from body of the character</param>
            <param name="defaultPivotX"></param>
            <param name="defaultPivotY"></param>
        </member>
        <member name="M:AngeliA.BodyPart.TryGetSpriteIdFromSheet(System.Type,System.String,System.Boolean,System.Int32@)">
            <summary>
            Get sprite id to rendering bodypart for given type of character
            </summary>
            <param name="characterType">Target type of character</param>
            <param name="bodyPartName">Basic name of this bodypart</param>
            <param name="checkForGroup">True if the sprite can be get from sprite group</param>
            <param name="id">Global ID of the result bodypart</param>
            <returns>True if the id is found</returns>
        </member>
        <member name="M:AngeliA.BodyPart.SetData(System.Int32)">
            <summary>
            Set bodypart data by giving a sprite ID
            </summary>
        </member>
        <member name="M:AngeliA.BodyPart.Imitate(AngeliA.BodyPart)">
            <summary>
            Copy motion data from another bodypart without changing anything about data about source sprite
            </summary>
        </member>
        <member name="M:AngeliA.BodyPart.GetGlobalRect">
            <summary>
            Get current position rect in global space
            </summary>
            <returns></returns>
        </member>
        <member name="M:AngeliA.BodyPart.GetLocalCenter">
            <summary>
            Get current center position in local space
            </summary>
        </member>
        <member name="M:AngeliA.BodyPart.GetGlobalCenter">
            <summary>
            Get current center position in global space
            </summary>
        </member>
        <member name="M:AngeliA.BodyPart.GlobalLerp(System.Single,System.Single,System.Boolean)">
            <summary>
            Get global position that lerp from given value
            </summary>
            <param name="x01">X lerp value (0 means left, 1 means right)</param>
            <param name="y01">Y lerp value (0 means bottom, 1 means top)</param>
            <param name="natural">True if this lerping logic respect character's natural orientation (like Tokino Sora's hairpin should always on her left side)</param>
        </member>
        <member name="M:AngeliA.BodyPart.LimbRotate(System.Int32,System.Int32)">
            <summary>
            Rotate the bodypart with "LimbRotate" logic
            </summary>
            <param name="rotation"></param>
            <param name="grow">How much does the limb grow it's size from the rotation (0 means don't grow. 1000 means general amount)</param>
        </member>
        <member name="T:AngeliA.CharacterState">
            <summary>
            General game state of a character
            </summary>
        </member>
        <member name="F:AngeliA.CharacterState.GamePlay">
            <summary>
            The character is online
            </summary>
        </member>
        <member name="F:AngeliA.CharacterState.Sleep">
            <summary>
            The character is sleeping
            </summary>
        </member>
        <member name="F:AngeliA.CharacterState.PassOut">
            <summary>
            The character is offline
            </summary>
        </member>
        <member name="T:AngeliA.CharacterInventoryType">
            <summary>
            Which type of inventory does this character have
            </summary>
        </member>
        <member name="F:AngeliA.CharacterInventoryType.None">
            <summary>
            No inventory logic should be perform
            </summary>
        </member>
        <member name="F:AngeliA.CharacterInventoryType.Unique">
            <summary>
            All instance of this type of characters share the same inventory data
            </summary>
        </member>
        <member name="F:AngeliA.CharacterInventoryType.Map">
            <summary>
            Every instance of this type of characters have it's own inventory data based on where this character spawn from map
            </summary>
        </member>
        <member name="T:AngeliA.CharacterAnimationType">
            <summary>
            Which type of animation does this character shows
            </summary>
        </member>
        <member name="T:AngeliA.Character">
            <summary>
            General representation of characters in AngeliA games
            </summary>
        </member>
        <member name="P:AngeliA.Character.Teleporting">
            <summary>
            True if the character is teleporting
            </summary>
        </member>
        <member name="P:AngeliA.Character.TeleportEndFrame">
            <summary>
            End frame of the end of teleport
            </summary>
        </member>
        <member name="P:AngeliA.Character.TeleportingWithPortal">
            <summary>
            True if the character is teleporting with a portal
            </summary>
        </member>
        <member name="P:AngeliA.Character.TeleportToFrontSide">
            <summary>
            True if the character is teleporting to front side layer (closer to camera)
            </summary>
        </member>
        <member name="P:AngeliA.Character.CurrentAttackSpeedRate">
            <summary>
            How fast should the character attacks (0 means couldn't attack, 1000 means normal speed)
            </summary>
        </member>
        <member name="P:AngeliA.Character.InventoryType">
            <summary>
            Which type of inventory does this character have
            </summary>
        </member>
        <member name="P:AngeliA.Character.InventoryColumn">
            <summary>
            Column count for this character's inventory
            </summary>
        </member>
        <member name="P:AngeliA.Character.InventoryRow">
            <summary>
            Row count for this character's inventory
            </summary>
        </member>
        <member name="P:AngeliA.Character.FinalCharacterHeight">
            <summary>
            Get the height of this character in global space
            </summary>
        </member>
        <member name="P:AngeliA.Character.DefaultCharacterHeight">
            <summary>
            Intrinsic body height of this character in cm
            </summary>
        </member>
        <member name="P:AngeliA.Character.Team">
            <summary>
            Target team for taking damage from other
            </summary>
        </member>
        <member name="P:AngeliA.Character.AttackTargetTeam">
            <summary>
            Target team for dealing damage to other
            </summary>
        </member>
        <member name="P:AngeliA.Character.IgnoreDamageType">
            <summary>
            Do not take damage in these types
            </summary>
        </member>
        <member name="P:AngeliA.Character.Bouncy">
            <summary>
            How bouncy is this character appears to be (150 by default)
            </summary>
        </member>
        <member name="P:AngeliA.Character.AngeliA#ICarrier#AllowBeingCarry">
            <summary>
            True if this character can be carry by other ICarrier
            </summary>
        </member>
        <member name="P:AngeliA.Character.AngeliA#IDamageReceiver#IsInvincible">
            <summary>
            True if the character is currently invencible from taking damage
            </summary>
        </member>
        <member name="P:AngeliA.Character.AngeliA#IDamageReceiver#TakeDamageFromLevel">
            <summary>
            True if the character take damage from level blocks
            </summary>
        </member>
        <member name="P:AngeliA.Character.AngeliA#IWithCharacterMovement#CurrentMovement">
            <inheritdoc cref="F:AngeliA.Character.Movement"/>
        </member>
        <member name="P:AngeliA.Character.AngeliA#IWithCharacterAttackness#CurrentAttackness">
            <inheritdoc cref="F:AngeliA.Character.Attackness"/>
        </member>
        <member name="P:AngeliA.Character.AngeliA#IWithCharacterHealth#CurrentHealth">
            <inheritdoc cref="F:AngeliA.Character.Health"/>
        </member>
        <member name="P:AngeliA.Character.AngeliA#IWithCharacterBuff#CurrentBuff">
            <inheritdoc cref="F:AngeliA.Character.Buff"/>
        </member>
        <member name="P:AngeliA.Character.AngeliA#IWithCharacterRenderer#CurrentRenderer">
            <inheritdoc cref="F:AngeliA.Character.Rendering"/>
        </member>
        <member name="P:AngeliA.Character.HelmetInteractable">
            <summary>
            True if this character can equip helmet from equipment items (not effect cloths)
            </summary>
        </member>
        <member name="P:AngeliA.Character.BodySuitInteractable">
            <summary>
            True if this character can equip body armor from equipment items (not effect cloths)
            </summary>
        </member>
        <member name="P:AngeliA.Character.GlovesInteractable">
            <summary>
            True if this character can equip gloves from equipment items (not effect cloths)
            </summary>
        </member>
        <member name="P:AngeliA.Character.ShoesInteractable">
            <summary>
            True if this character can equip shoes from equipment items (not effect cloths)
            </summary>
        </member>
        <member name="P:AngeliA.Character.JewelryInteractable">
            <summary>
            True if this character can equip jewelry from equipment items
            </summary>
        </member>
        <member name="P:AngeliA.Character.HandToolInteractable">
            <summary>
            True if this character can equip handtool from equipment items
            </summary>
        </member>
        <member name="P:AngeliA.Character.CharacterState">
            <summary>
            Current general game state of this character
            </summary>
        </member>
        <member name="P:AngeliA.Character.AnimationType">
            <summary>
            Current animation type of this character is showing
            </summary>
        </member>
        <member name="P:AngeliA.Character.SleepStartFrame">
            <summary>
            Frame when character start to sleep
            </summary>
        </member>
        <member name="P:AngeliA.Character.PassOutFrame">
            <summary>
            Frame when character passout
            </summary>
        </member>
        <member name="P:AngeliA.Character.LastRequireBounceFrame">
            <summary>
            Frame when character last start to bounce
            </summary>
        </member>
        <member name="P:AngeliA.Character.DespawnAfterPassoutDelay">
            <summary>
            How many frames does this character despawn after passout. Set to -1 if they don't despawn
            </summary>
        </member>
        <member name="P:AngeliA.Character.InventoryID">
            <summary>
            Unique ID of this character from inventory system
            </summary>
        </member>
        <member name="P:AngeliA.Character.RenderingCellIndex">
            <summary>
            First rendering cell's index for current frame
            </summary>
        </member>
        <member name="F:AngeliA.Character.FullSleepDuration">
            <summary>
            How long does it takes to get into full sleep
            </summary>
        </member>
        <member name="F:AngeliA.Character.TeleportDuration">
            <summary>
            How long does it takes to complete teleport
            </summary>
        </member>
        <member name="F:AngeliA.Character.Movement">
            <summary>
            Instance of the current functioning movement behaviour
            </summary>
        </member>
        <member name="F:AngeliA.Character.Attackness">
            <summary>
            Instance of the current functioning attackness behaviour
            </summary>
        </member>
        <member name="F:AngeliA.Character.Health">
            <summary>
            Instance of the current functioning health behaviour
            </summary>
        </member>
        <member name="F:AngeliA.Character.Rendering">
            <summary>
            Instance of the current functioning rendering behaviour
            </summary>
        </member>
        <member name="F:AngeliA.Character.MovementOverride">
            <summary>
            Instance of the movement behaviour override from outside
            </summary>
        </member>
        <member name="F:AngeliA.Character.AttacknessOverride">
            <summary>
            Instance of the attackness behaviour override from outside
            </summary>
        </member>
        <member name="F:AngeliA.Character.HealthOverride">
            <summary>
            Instance of the health behaviour override from outside
            </summary>
        </member>
        <member name="F:AngeliA.Character.RendererOverride">
            <summary>
            Instance of the rendering behaviour override from outside
            </summary>
        </member>
        <member name="F:AngeliA.Character.NativeMovement">
            <summary>
            Instance of the movement behaviour from the character themselfs
            </summary>
        </member>
        <member name="F:AngeliA.Character.NativeAttackness">
            <summary>
            Instance of the attackness behaviour from the character themselfs
            </summary>
        </member>
        <member name="F:AngeliA.Character.NativeHealth">
            <summary>
            Instance of the health behaviour from the character themselfs
            </summary>
        </member>
        <member name="F:AngeliA.Character.NativeRenderer">
            <summary>
            Instance of the rendering behaviour from the character themselfs
            </summary>
        </member>
        <member name="F:AngeliA.Character.Buff">
            <summary>
            Instance of the buff behaviour
            </summary>
        </member>
        <member name="M:AngeliA.Character.SetCharacterState(AngeliA.CharacterState)">
            <summary>
            Set character's general game state, ignore when state already is the current one
            </summary>
        </member>
        <member name="M:AngeliA.Character.GetCurrentPoseAnimationType">
            <summary>
            Calculate which type of animation should this character shows
            </summary>
        </member>
        <member name="M:AngeliA.Character.OnCharacterRendered">
            <summary>
            This function is called after character is rendered
            </summary>
        </member>
        <member name="M:AngeliA.Character.EnterTeleportState(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Make character apears to be teleported. This will not actually teleport the character.
            </summary>
            <param name="front">True if teleport to front layer</param>
            <param name="portal">True if teleport by a portal</param>
            <param name="lastHalfOnly">True if only shows the last half part of the teleport</param>
        </member>
        <member name="M:AngeliA.Character.LockAnimationType(AngeliA.CharacterAnimationType,System.Int32)">
            <summary>
            Force character to show the given type of animation for specified frames long
            </summary>
        </member>
        <member name="M:AngeliA.Character.GetBonusFromFullSleep">
            <summary>
            Give the character all bonus from full sleep
            </summary>
        </member>
        <member name="M:AngeliA.Character.OnDamaged(AngeliA.Damage)">
            <summary>
            This function is called when character take damage
            </summary>
        </member>
        <member name="M:AngeliA.Character.Bounce">
            <summary>
            Make the character bounce
            </summary>
        </member>
        <member name="M:AngeliA.Character.CancelBounce">
            <summary>
            Stop the character from bouncing
            </summary>
        </member>
        <member name="M:AngeliA.Character.EquipmentAvailable(AngeliA.EquipmentType)">
            <summary>
            True if given type of equipment is available for this character
            </summary>
        </member>
        <member name="M:AngeliA.Character.TryRepairAllEquipments(System.Boolean)">
            <summary>
            Repair equipments once for this character
            </summary>
            <param name="requireMultiple">Set to true to repair all equipments for once</param>
        </member>
        <member name="M:AngeliA.Character.CreateNativeMovement">
            <summary>
            Create new instance for character's intrinsic movement behaviour
            </summary>
        </member>
        <member name="M:AngeliA.Character.CreateNativeAttackness">
            <summary>
            Create new instance for character's intrinsic attackness behaviour
            </summary>
        </member>
        <member name="M:AngeliA.Character.CreateNativeHealth">
            <summary>
            Create new instance for character's intrinsic health behaviour
            </summary>
        </member>
        <member name="M:AngeliA.Character.CreateNativeRenderer">
            <summary>
            Create new instance for character's intrinsic rendering behaviour
            </summary>
        </member>
        <member name="M:AngeliA.Character.OverrideMovement(AngeliA.CharacterMovement,System.Int32)">
            <summary>
            Override the movement behaviour for specified frames
            </summary>
        </member>
        <member name="M:AngeliA.Character.OverrideAttackness(AngeliA.CharacterAttackness,System.Int32)">
            <summary>
            Override the attackness behaviour for specified frames
            </summary>
        </member>
        <member name="M:AngeliA.Character.OverrideHealth(AngeliA.CharacterHealth,System.Int32)">
            <summary>
            Override the health behaviour for specified frames
            </summary>
        </member>
        <member name="M:AngeliA.Character.OverrideRenderer(AngeliA.CharacterRenderer,System.Int32)">
            <summary>
            Override the rendering behaviour for specified frames
            </summary>
        </member>
        <member name="M:AngeliA.Character.IsAttackAllowedByMovement">
            <summary>
            True if character can perform attack under current movement
            </summary>
        </member>
        <member name="M:AngeliA.Character.IsAttackAllowedByEquipment">
            <summary>
            True if character can perform attack unfer current equipment set
            </summary>
        </member>
        <member name="M:AngeliA.Character.IgnoreDamageFromLevel(System.Int32)">
            <summary>
            Make character not taking damage from level blocks for specified frames long
            </summary>
        </member>
        <member name="M:AngeliA.Character.GetDisplayName">
            <summary>
            Get character's display name from language system
            </summary>
        </member>
        <member name="M:AngeliA.Character.GetDescription">
            <summary>
            Get character's description from language system
            </summary>
        </member>
        <member name="T:AngeliA.Cloth">
            <summary>
            Cloth for pose-style character (not for equipment items). Get instance with Cloth.TryGetCloth(id, out var result)
            </summary>
        </member>
        <member name="P:AngeliA.Cloth.ClothID">
            <summary>
            Global unique id for this type of cloth
            </summary>
        </member>
        <member name="P:AngeliA.Cloth.ClothName">
            <summary>
            Type name for this type of cloth
            </summary>
        </member>
        <member name="P:AngeliA.Cloth.ClothType">
            <summary>
            Where should characters wear this cloth 
            </summary>
        </member>
        <member name="P:AngeliA.Cloth.SpriteLoaded">
            <summary>
            True if the artwork sprites are loaded
            </summary>
        </member>
        <member name="P:AngeliA.Cloth.SheetIndex">
            <summary>
            Which artwork sheet does this cloth get it's artwork from
            </summary>
        </member>
        <member name="M:AngeliA.Cloth.DrawCloth(AngeliA.PoseCharacterRenderer)">
            <summary>
            Draw cloth for the given character
            </summary>
        </member>
        <member name="M:AngeliA.Cloth.DrawClothGizmos(AngeliA.IRect,AngeliA.Color32,System.Int32)">
            <summary>
            Draw cloth as gizmos
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="tint">Color tint</param>
            <param name="z">Z value for sort rendering cell</param>
        </member>
        <member name="M:AngeliA.Cloth.FillFromSheet(System.String)">
            <summary>
            Load sprite data from Renderer.CurrentSheet
            </summary>
        </member>
        <member name="M:AngeliA.Cloth.HasCloth(System.Int32)">
            <summary>
            Does cloth with given id exists in the pool
            </summary>
        </member>
        <member name="M:AngeliA.Cloth.TryGetCloth(System.Int32,AngeliA.Cloth@)">
            <summary>
            Get cloth instance from pool
            </summary>
        </member>
        <member name="M:AngeliA.Cloth.GetDefaultClothID(System.Int32,AngeliA.ClothType)">
            <summary>
            Get ID of given character's default cloth. Return 0 if not found
            </summary>
        </member>
        <member name="M:AngeliA.Cloth.ForAllCloth">
            <summary>
            Iterate through all cloth instance in pool
            </summary>
        </member>
        <member name="M:AngeliA.Cloth.AttachClothOn(AngeliA.BodyPart,AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Attach the given artwork sprite as a general cloth to given bodypart. Cloth will use it's own size no matter how big the bodypart is.
            </summary>
            <param name="bodyPart">Target bodypart</param>
            <param name="sprite">Artwork sprite</param>
            <param name="locationX">Position X in bodypart's local space</param>
            <param name="locationY">Position Y in bodypart's local space</param>
            <param name="localZ">Local Z value the sort rendering cells</param>
            <param name="widthAmount">Horizontal size scaling (0 means 0%, 1000 means 100%)</param>
            <param name="heightAmount">Vertical size scaling (0 means 0%, 1000 means 100%)</param>
            <param name="localRotation">Rotation of the cloth in bodypart's local space</param>
            <param name="shiftPixelX">Position offset X</param>
            <param name="shiftPixelY">Position offset Y</param>
            <param name="defaultHideLimb">True if it requires the bodypart to be hiden. Artwork sprite's tag will override this value.</param>
            <returns>Rendering cells which holds the cloth rendering data</returns>
        </member>
        <member name="M:AngeliA.Cloth.CoverClothOn(AngeliA.BodyPart,AngeliA.AngeSprite)">
            <inheritdoc cref="M:AngeliA.Cloth.CoverClothOn(AngeliA.BodyPart,AngeliA.AngeSprite,System.Int32,AngeliA.Color32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Cloth.CoverClothOn(AngeliA.BodyPart,AngeliA.AngeSprite,System.Int32)">
            <inheritdoc cref="M:AngeliA.Cloth.CoverClothOn(AngeliA.BodyPart,AngeliA.AngeSprite,System.Int32,AngeliA.Color32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Cloth.CoverClothOn(AngeliA.BodyPart,AngeliA.AngeSprite,System.Int32,AngeliA.Color32,System.Boolean)">
            <summary>
            Cover the given artwork sprite as a general cloth to given bodypart. Size of the sprite will change based on how big the bodypart is.
            </summary>
            <param name="bodyPart">Target bodypart</param>
            <param name="sprite">Artwork sprite</param>
            <param name="localZ">Local Z value the sort rendering cells</param>
            <param name="tint">Color tint</param>
            <param name="defaultHideLimb">True if it requires the bodypart to be hiden. Artwork sprite's tag will override this value.</param>
            <returns>Rendering cells which holds the cloth rendering data</returns>
        </member>
        <member name="M:AngeliA.Cloth.GetDisplayName(System.Int32@)">
            <summary>
            Get display name for this cloth from language system.
            </summary>
        </member>
        <member name="T:AngeliA.BodyCloth">
            <summary>
            Body cloth of a pose-style character. Include body, shoulder and arms
            </summary>
        </member>
        <member name="P:AngeliA.BodyCloth.TwistShiftTopAmount">
            <summary>
            How much does it shift left and right with character's body movement (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="P:AngeliA.BodyCloth.LocalZ">
            <summary>
            Z value for sorting rendering cells
            </summary>
        </member>
        <member name="M:AngeliA.BodyCloth.DrawClothFromPool(AngeliA.PoseCharacterRenderer)">
            <summary>
            Draw all body cloths for given character from system pool
            </summary>
        </member>
        <member name="M:AngeliA.BodyCloth.DrawClothForBody(AngeliA.PoseCharacterRenderer,AngeliA.OrientedSprite,System.Int32,System.Int32)">
            <summary>
            Draw artwork sprite as cloth for only "Body" of the given character
            </summary>
            <param name="renderer">Target character</param>
            <param name="clothSprite">Artwork sprite</param>
            <param name="localZ">Z value for sorting rendering cells</param>
            <param name="twistShiftTopAmount">How much does it shift left and right with character's body movement</param>
        </member>
        <member name="M:AngeliA.BodyCloth.DrawClothForShoulder(AngeliA.PoseCharacterRenderer,AngeliA.OrientedSprite,AngeliA.OrientedSprite,System.Int32)">
            <summary>
            Draw artwork sprite as cloth for shoulders of the given character
            </summary>
            <param name="renderer">Target character</param>
            <param name="spriteLeft">Artwork sprite for left shoulder</param>
            <param name="spriteRight">Artwork sprite for right shoulder</param>
            <param name="localZ">Z value for sorting rendering cells</param>
        </member>
        <member name="M:AngeliA.BodyCloth.DrawClothForUpperArm(AngeliA.PoseCharacterRenderer,AngeliA.OrientedSprite,AngeliA.OrientedSprite,System.Int32)">
            <summary>
            Draw artwork sprite as cloth for upper-arms of the given character
            </summary>
            <param name="renderer">Target character</param>
            <param name="spriteLeft">Artwork sprite for left upper-arm</param>
            <param name="spriteRight">Artwork sprite for right upper-arm</param>
            <param name="localZ">Z value for sorting rendering cells</param>
        </member>
        <member name="M:AngeliA.BodyCloth.DrawClothForLowerArm(AngeliA.PoseCharacterRenderer,AngeliA.OrientedSprite,AngeliA.OrientedSprite,System.Int32)">
            <summary>
            Draw artwork sprite as cloth for lower-arms of the given character
            </summary>
            <param name="renderer">Target character</param>
            <param name="spriteLeft">Artwork sprite for left lower-arm</param>
            <param name="spriteRight">Artwork sprite for right lower-arm</param>
            <param name="localZ">Z value for sorting rendering cells</param>
        </member>
        <member name="M:AngeliA.BodyCloth.DrawCape(AngeliA.PoseCharacterRenderer,AngeliA.OrientedSprite,System.Int32)">
            <summary>
            Draw artwork sprite as cape for given character
            </summary>
            <param name="renderer">Target character</param>
            <param name="clothSprite">Artwork sprite</param>
            <param name="motionAmount">How much does the cape flow with character's movement (0 means 0%, 1000 means 100%)</param>
        </member>
        <member name="T:AngeliA.FootCloth">
            <summary>
            Shoes of a pose-style character
            </summary>
        </member>
        <member name="M:AngeliA.FootCloth.DrawClothFromPool(AngeliA.PoseCharacterRenderer)">
            <summary>
            Draw shoes for given character from system pool
            </summary>
        </member>
        <member name="M:AngeliA.FootCloth.DrawClothForFoot(AngeliA.PoseCharacterRenderer,AngeliA.OrientedSprite,AngeliA.OrientedSprite,System.Int32)">
            <summary>
            Draw given artwork sprite as shoes for given character
            </summary>
            <param name="renderer">Target character</param>
            <param name="spriteLeft">Artwork sprite for left shoe</param>
            <param name="spriteRight">Artwork sprite for right shoe</param>
            <param name="localZ">Z value for sorting rendering cells</param>
        </member>
        <member name="T:AngeliA.HandCloth">
            <summary>
            Gloves for a pose-style character
            </summary>
        </member>
        <member name="M:AngeliA.HandCloth.DrawClothFromPool(AngeliA.PoseCharacterRenderer)">
            <summary>
            Draw gloves for given character from system pool
            </summary>
        </member>
        <member name="M:AngeliA.HandCloth.DrawClothForHand(AngeliA.PoseCharacterRenderer,AngeliA.OrientedSprite,AngeliA.OrientedSprite,System.Int32)">
            <summary>
            Draw artwork sprite as gloves for given character
            </summary>
            <param name="renderer">Target character</param>
            <param name="spriteLeft">Artwork for left glove</param>
            <param name="spriteRight">Artwork for right glove</param>
            <param name="localZ">Z value for sort rendering cells</param>
        </member>
        <member name="T:AngeliA.HeadCloth">
            <summary>
            Hat for a pose-style character
            </summary>
        </member>
        <member name="M:AngeliA.HeadCloth.DrawClothFromPool(AngeliA.PoseCharacterRenderer)">
            <summary>
            Draw hat for given character from system pool
            </summary>
        </member>
        <member name="M:AngeliA.HeadCloth.DrawClothForHead(AngeliA.PoseCharacterRenderer,AngeliA.OrientedSprite)">
            <summary>
            Draw artwork sprite as hat for given character
            </summary>
            <param name="renderer">Target character</param>
            <param name="clothSprite">Artwork sprite</param>
        </member>
        <member name="T:AngeliA.HipCloth">
            <summary>
            Pants or skirt for a pose-style character. Include hip and legs (no foot)
            </summary>
        </member>
        <member name="P:AngeliA.HipCloth.CoverLegs">
            <summary>
            True if the pants renders on front of lengs
            </summary>
        </member>
        <member name="M:AngeliA.HipCloth.DrawClothFromPool(AngeliA.PoseCharacterRenderer)">
            <summary>
            Draw pants/skirt for given character from system pool
            </summary>
        </member>
        <member name="M:AngeliA.HipCloth.DrawClothAsPants(AngeliA.PoseCharacterRenderer,AngeliA.OrientedSprite,System.Int32)">
            <summary>
            Draw artwork sprite as pants for given character
            </summary>
            <param name="rendering">Target character</param>
            <param name="clothSprite">Artwork sprite</param>
            <param name="localZ">Z value for sort rendering cells</param>
        </member>
        <member name="M:AngeliA.HipCloth.DrawClothAsSkirt(AngeliA.PoseCharacterRenderer,AngeliA.OrientedSprite,System.Int32,System.Int32)">
            <summary>
            Draw artwork sprite as skirt for given character
            </summary>
            <param name="rendering">Target character</param>
            <param name="clothSprite">Artwork sprite (should be a sprite group)</param>
            <param name="localZ">Z value for sort rendering cells</param>
            <param name="motionAmount">How much does the skirt flow with character movement (0 means 0%, 1000 means 100%)</param>
        </member>
        <member name="M:AngeliA.HipCloth.DrawClothForUpperLeg(AngeliA.PoseCharacterRenderer,AngeliA.OrientedSprite,AngeliA.OrientedSprite,System.Int32)">
            <summary>
            Draw artwork sprite as cloth only for upper-leg
            </summary>
            <param name="rendering">Target character</param>
            <param name="spriteLeft">Artwork sprite for left leg</param>
            <param name="spriteRight">Artwork sprite for right leg</param>
            <param name="localZ">Z value for sort rendering cells</param>
        </member>
        <member name="M:AngeliA.HipCloth.DrawClothForLowerLeg(AngeliA.PoseCharacterRenderer,AngeliA.OrientedSprite,AngeliA.OrientedSprite,System.Int32)">
            <summary>
            Draw artwork sprite as cloth only for lower-leg
            </summary>
            <param name="rendering">Target character</param>
            <param name="spriteLeft">Artwork sprite for left leg</param>
            <param name="spriteRight">Artwork sprite for right leg</param>
            <param name="localZ">Z value for sort rendering cells</param>
        </member>
        <member name="M:AngeliA.HipCloth.DrawDoubleClothTailsOnHip(AngeliA.PoseCharacterRenderer,AngeliA.OrientedSprite,System.Boolean)">
            <summary>
            Draw two tails as cloth decoration (like Suisei's standard suit from Hololive)
            </summary>
            <param name="rendering">Target character</param>
            <param name="clothSprite">Artwork sprite</param>
            <param name="drawOnAllPose">Draw this tail even when character is Rolling, Sleeping, Passout and Flying</param>
        </member>
        <member name="M:AngeliA.HipCloth.DrawSingleClothTail(AngeliA.AngeSprite,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a single tail as cloth decoration (like Suisei's standard suit from Hololive)
            </summary>
            <param name="sprite">Artwork sprite</param>
            <param name="globalX">Pivot position X of the tail in global space</param>
            <param name="globalY">Pivot position Y of the tail in global space</param>
            <param name="z">Z value for sorting rendering cells</param>
            <param name="rotation">Rotation of this tail</param>
            <param name="deltaY">Character's current movement speed Y</param>
            <param name="scaleX">Horizontal size scale (0 means 0%, 1000 means 100%)</param>
            <param name="scaleY">Vertical size scale (0 means 0%, 1000 means 100%)</param>
            <param name="motionAmount">How much flow motion should apply from characters movement (0 means 0%, 1000 means 100%)</param>
        </member>
        <member name="T:AngeliA.ModularBodySuit">
            <summary>
            Body cloth that auto generate from artwork sheet
            </summary>
        </member>
        <member name="T:AngeliA.ModularFootSuit">
            <summary>
            Shoes that auto generate from artwork sheet
            </summary>
        </member>
        <member name="T:AngeliA.ModularHandSuit">
            <summary>
            Gloves that auto generate from artwork sheet
            </summary>
        </member>
        <member name="T:AngeliA.ModularHeadSuit">
            <summary>
            Hat that auto generate from artwork sheet
            </summary>
        </member>
        <member name="T:AngeliA.ModularHipSuit">
            <summary>
            Pants or skirt that auto generate from artwork sheet
            </summary>
        </member>
        <member name="T:AngeliA.Entity">
            <summary>
            General object with logic which can spawn into the stage
            </summary>
        </member>
        <member name="P:AngeliA.Entity.Active">
            <summary>
            True if the entity is currently in stage
            </summary>
        </member>
        <member name="P:AngeliA.Entity.X">
            <summary>
            Position X of this entity in global space
            </summary>
        </member>
        <member name="P:AngeliA.Entity.Y">
            <summary>
            Position Y of this entity in global space
            </summary>
        </member>
        <member name="P:AngeliA.Entity.Width">
            <summary>
            Size X of thie entity in global space
            </summary>
        </member>
        <member name="P:AngeliA.Entity.Height">
            <summary>
            Size Y of thie entity in global space
            </summary>
        </member>
        <member name="P:AngeliA.Entity.TypeID">
            <summary>
            Unique ID represent what type of entity is it
            </summary>
        </member>
        <member name="P:AngeliA.Entity.SpawnFrame">
            <summary>
            Which frame does this entity get spawned into the stage
            </summary>
        </member>
        <member name="P:AngeliA.Entity.FromWorld">
            <summary>
            True if the entity is spawned by the world squad
            </summary>
        </member>
        <member name="P:AngeliA.Entity.Rect">
            <summary>
            Rect position of this entity in global space
            </summary>
        </member>
        <member name="P:AngeliA.Entity.InstanceOrder">
            <summary>
            Unique index for this entity that distinguish from other same-type entities on stage
            </summary>
        </member>
        <member name="P:AngeliA.Entity.MapUnitPos">
            <summary>
            The position of this entity on the map in unit space
            </summary>
        </member>
        <member name="P:AngeliA.Entity.InstanceID">
            <summary>
            Unique ID for this entity as a instance on stage
            </summary>
        </member>
        <member name="P:AngeliA.Entity.IgnoreReposition">
            <summary>
            True if the entity do not reposition when it out of view
            </summary>
        </member>
        <member name="P:AngeliA.Entity.XY">
            <summary>
            Position in global space
            </summary>
        </member>
        <member name="P:AngeliA.Entity.Size">
            <summary>
            Size in global space
            </summary>
        </member>
        <member name="P:AngeliA.Entity.Center">
            <summary>
            Center position of the Rect in global space
            </summary>
        </member>
        <member name="P:AngeliA.Entity.CenterX">
            <summary>
            Center position X of the Rect in global space
            </summary>
        </member>
        <member name="P:AngeliA.Entity.CenterY">
            <summary>
            Center position Y of the Rect in global space
            </summary>
        </member>
        <member name="P:AngeliA.Entity.PivotUnitPosition">
            <summary>
            Position that this entity belongs to in unit space. Get the MapUnitPos when it's from world. Get rect center's unit position when not from world.
            </summary>
        </member>
        <member name="M:AngeliA.Entity.OnActivated">
            <summary>
            This function is called when entity enter the stage
            </summary>
        </member>
        <member name="M:AngeliA.Entity.OnInactivated">
            <summary>
            This function is called when entity leave the stage
            </summary>
        </member>
        <member name="M:AngeliA.Entity.FirstUpdate">
            <summary>
            [1/4] This function is called every frame when entity is in stage. Prioritize using this function to fill collider in to physics system.
            </summary>
        </member>
        <member name="M:AngeliA.Entity.BeforeUpdate">
            <summary>
            [2/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic.
            </summary>
        </member>
        <member name="M:AngeliA.Entity.Update">
            <summary>
            [3/4] This function is called every frame when entity is in stage. Prioritize using this function to update physics logic.
            </summary>
        </member>
        <member name="M:AngeliA.Entity.LateUpdate">
            <summary>
            [4/4] This function is called every frame when entity is in stage. Prioritize using this function to render the entity.
            </summary>
        </member>
        <member name="M:AngeliA.Entity.AfterReposition(AngeliA.Int3,AngeliA.Int3)">
            <summary>
            This function is called when the entity's map position got repositioned by stage
            </summary>
        </member>
        <member name="M:AngeliA.Entity.IgnoreDespawnFromMap(System.Int32)">
            <summary>
            Force this entity not despawn by stage when out of range for given frames long
            </summary>
        </member>
        <member name="M:AngeliA.Entity.CancelIgnoreDespawnFromMap">
            <summary>
            Do not force this entity not despawn by stage
            </summary>
        </member>
        <member name="M:AngeliA.Entity.Draw">
            <summary>
            Draw this entity by it's type ID and rect position
            </summary>
        </member>
        <member name="T:AngeliA.GroupAnimationHolder">
            <summary>
            Display animation from artwork sheet
            </summary>
        </member>
        <member name="M:AngeliA.GroupAnimationHolder.Spawn(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.GroupAnimationHolder.Spawn(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,AngeliA.Color32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GroupAnimationHolder.Spawn(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,AngeliA.Color32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.GroupAnimationHolder.Spawn(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,AngeliA.Color32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GroupAnimationHolder.Spawn(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,AngeliA.Color32,System.Int32,System.Int32)">
            <summary>
            Create a new animation to the stage
            </summary>
            <param name="groupID">Artwork sprite group ID</param>
            <param name="x">Position X in global space</param>
            <param name="y">Position Y in global space</param>
            <param name="width">Size X in global space</param>
            <param name="height">Size Y in global space</param>
            <param name="pivotX">Pivot X of the artwork sprite</param>
            <param name="pivotY">Pivot Y of the artwork sprite</param>
            <param name="rotation1000">Initialize rotation (0 means 0°, 1000 means 1°)</param>
            <param name="rotationSpeed">Speed of the rotation (0 means 0°, 1 means 1°)</param>
            <param name="duration">How long this animation is in frame. Set to -1 to get duration from artwork sprite group</param>
            <param name="framePerSprite">How long does a single sprite takes in frame</param>
            <param name="loop">True if the animation loops</param>
            <param name="tint">Color tint</param>
            <param name="z">Z value for sort rendering cells</param>
            <param name="renderLayer">Which rendering layer does it renders into</param>
            <returns>Instance of the holder</returns>
        </member>
        <member name="M:AngeliA.GroupAnimationHolder.Follow(AngeliA.Entity)">
            <summary>
            Makes the holder follow the target all the time
            </summary>
        </member>
        <member name="T:AngeliA.IActionTarget">
            <summary>
            Interface that makes the entity react with player action. When player goes nearby, they can press action button to invoke the logic from this entity
            </summary>
        </member>
        <member name="P:AngeliA.IActionTarget.LockInput">
            <summary>
            True if this entity lock player's input when highlighting
            </summary>
        </member>
        <member name="P:AngeliA.IActionTarget.IsHighlighted">
            <summary>
            True if this entity is currently highlighting
            </summary>
        </member>
        <member name="P:AngeliA.IActionTarget.AllowInvokeOnStand">
            <summary>
            True if this entity can be highlight when player is standing
            </summary>
        </member>
        <member name="P:AngeliA.IActionTarget.AllowInvokeOnSquat">
            <summary>
            True if this entity can be highlight when player is squatting
            </summary>
        </member>
        <member name="P:AngeliA.IActionTarget.InvokeOnTouch">
            <summary>
            True if this entity will be invoke when player comes nearby without pressing the action button
            </summary>
        </member>
        <member name="M:AngeliA.IActionTarget.Invoke">
            <summary>
            Invoke the logic provided by this entity.
            </summary>
            <returns>True if the logic performs successfuly</returns>
        </member>
        <member name="M:AngeliA.IActionTarget.AllowInvoke">
            <summary>
            True if the entity can be invoke at current frame
            </summary>
        </member>
        <member name="M:AngeliA.IActionTarget.DrawActionTarget(AngeliA.IActionTarget,AngeliA.AngeSprite,AngeliA.IRect,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Draw the artwork sprite for given action target entity
            </summary>
            <param name="target">The action target entity</param>
            <param name="sprite"></param>
            <param name="rect">Rect position in global space</param>
            <param name="pivotX">Pivot X for the artwork sprite</param>
            <param name="pivotY">Pivot Y for the artwork sprite</param>
            <param name="blinkHorizontal">True if the entity blink with nearby entities together horizontaly</param>
            <param name="blinkVertical">True if the entity blink with nearby entities together Verticaly</param>
        </member>
        <member name="M:AngeliA.IActionTarget.MakeCellAsActionTarget(AngeliA.IActionTarget,AngeliA.Cell,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Make the rendering cell blink like an action target entity
            </summary>
            <param name="target">The entity</param>
            <param name="cell">The rendering cell</param>
            <param name="pivotX">Pivot X for the artwork sprite</param>
            <param name="pivotY">Pivot Y for the artwork sprite</param>
            <param name="blinkHorizontal">True if the entity blink with nearby entities together horizontaly</param>
            <param name="blinkVertical">True if the entity blink with nearby entities together Verticaly</param>
        </member>
        <member name="T:AngeliA.IBlockEntity">
            <summary>
            Interface that makes the entity behave like a block from map. This will make the entity become a block item for ItemSystem.
            </summary>
        </member>
        <member name="P:AngeliA.IBlockEntity.MaxStackCount">
            <summary>
            Max item stack count as a block item.
            </summary>
        </member>
        <member name="P:AngeliA.IBlockEntity.EmbedEntityAsElement">
            <summary>
            True if this entity can embed other entity as a element in map (like putting a coin into a launcher in SMM2 and this entity would be the launcher)
            </summary>
        </member>
        <member name="P:AngeliA.IBlockEntity.AllowBeingEmbedAsElement">
            <summary>
            True if this entity can be embed as a element in map (like putting a coin into a launcher in SMM2 and this entity would be the coin)
            </summary>
        </member>
        <member name="M:AngeliA.IBlockEntity.OnEntityPicked">
            <summary>
            This function is called when this entity being picked as a block by a pick-tool
            </summary>
        </member>
        <member name="M:AngeliA.IBlockEntity.OnEntityPut">
            <summary>
            This function is called when this entity being put into the map as a block
            </summary>
        </member>
        <member name="M:AngeliA.IBlockEntity.OnEntityRefresh">
            <summary>
            This function is called when there are map changes happens nearby and the entity needs to refresh itself
            </summary>
        </member>
        <member name="M:AngeliA.IBlockEntity.RefreshBlockEntitiesNearby(AngeliA.Int2,AngeliA.Entity)">
            <summary>
            Refresh all block entity instances near the given position.
            </summary>
            <param name="centerUnitPos">This position is in unit space</param>
            <param name="ignore">Do not refresh this entity</param>
        </member>
        <member name="M:AngeliA.IBlockEntity.IsIgnoreEmbedAsElement(System.Int32)">
            <summary>
            True if the given type of entity do not take other entity as embed element
            </summary>
        </member>
        <member name="T:AngeliA.IBumpable">
            <summary>
            Interface that makes the entity can be bump by other (like question mark block in Mario)
            </summary>
        </member>
        <member name="P:AngeliA.IBumpable.FromBelow">
            <summary>
            True if the entity can be bump from below
            </summary>
        </member>
        <member name="P:AngeliA.IBumpable.FromAbove">
            <summary>
            True if the entity can be bump from above
            </summary>
        </member>
        <member name="P:AngeliA.IBumpable.FromLeft">
            <summary>
            True if the entity can be bump from left
            </summary>
        </member>
        <member name="P:AngeliA.IBumpable.FromRight">
            <summary>
            True if the entity can be bump from right
            </summary>
        </member>
        <member name="P:AngeliA.IBumpable.TransferBumpToOther">
            <summary>
            True if the entity bump other entities when being bumped
            </summary>
        </member>
        <member name="P:AngeliA.IBumpable.TransferBumpFromOther">
            <summary>
            True if the entity take transfered bumps from other
            </summary>
        </member>
        <member name="P:AngeliA.IBumpable.TransferWithAttack">
            <summary>
            True if the entity perform attack to the entity when transfer bumps (like in Mario bump on question block can kill the goombas on top)
            </summary>
        </member>
        <member name="P:AngeliA.IBumpable.BumpTransferPower">
            <summary>
            Extra speed that gives to the rigidbody when they got transfered bump from this entity
            </summary>
        </member>
        <member name="P:AngeliA.IBumpable.BumpCooldown">
            <summary>
            How many frames does it have to wait to be bump again
            </summary>
        </member>
        <member name="P:AngeliA.IBumpable.LastBumpedFrame">
            <summary>
            Frame when the entity get it's last bump
            </summary>
        </member>
        <member name="P:AngeliA.IBumpable.LastBumpFrom">
            <summary>
            Direction for the last bump of this entity
            </summary>
        </member>
        <member name="M:AngeliA.IBumpable.OnBumped(AngeliA.Entity,AngeliA.Damage)">
            <summary>
            This function is called when this entity is bumped
            </summary>
            <param name="rig">Rigidbody that bumps this entity</param>
            <param name="damage">The damage this entity got from this bump</param>
        </member>
        <member name="M:AngeliA.IBumpable.AllowBump(AngeliA.Entity,AngeliA.Direction4)">
            <summary>
            True if the entity can be bump by the given target and direction currently
            </summary>
        </member>
        <member name="M:AngeliA.IBumpable.GetBumpTransferDamage">
            <summary>
            Get the instance of the damage that this entity deal to other when it transfer bump
            </summary>
        </member>
        <member name="M:AngeliA.IBumpable.AnimateForBump(AngeliA.IBumpable,AngeliA.Cell,System.Int32,System.Int32,System.Int32)">
            <summary>
            Update the animation for bump, call this function every frame
            </summary>
            <param name="bumpable">Target entity</param>
            <param name="cell">Rendering cell</param>
            <param name="duration">How length does the animation takes when it get bump</param>
            <param name="distance">How far does it move when it get bump</param>
            <param name="size">How big does it scale when it get bump</param>
        </member>
        <member name="M:AngeliA.IBumpable.IsValidBumpDirection(AngeliA.IBumpable,AngeliA.Direction4)">
            <summary>
            Trie if the given direction can be bump
            </summary>
            <param name="bump">Target entity</param>
            <param name="from"></param>
        </member>
        <member name="M:AngeliA.IBumpable.BumpAllOverlap(AngeliA.Entity,AngeliA.Direction4,System.Boolean,AngeliA.Damage,System.Int32)">
            <summary>
            Perform bump for all overlaped IBumpable entities
            </summary>
            <param name="sender">Entity that send the bump</param>
            <param name="directionTo">Bump the IBumpables to this direction</param>
            <param name="forceBump">True if ignore the AllowBump function check this time</param>
            <param name="damageToBumpedObject">Damage data that apply to the entities being bump</param>
            <param name="collisionMask">Which layer does this bump applies</param>
        </member>
        <member name="T:AngeliA.ICarrier">
            <summary>
            Interface that makes entity carry other entities on top
            </summary>
        </member>
        <member name="P:AngeliA.ICarrier.AllowBeingCarry">
            <summary>
            True if this entity can be carry by other carrier
            </summary>
        </member>
        <member name="M:AngeliA.ICarrier.OnBeingCarry(System.Int32,System.Int32)">
            <summary>
            This function is called when this entity is being carried by other
            </summary>
            <param name="deltaX">Position delta X at current frame in global space</param>
            <param name="deltaY">Position delta Y at current frame in global space</param>
        </member>
        <member name="M:AngeliA.ICarrier.PerformCarry(System.Int32,System.Int32)">
            <summary>
            Carry other entities for once
            </summary>
            <param name="x">Position delta X at current frame in global space</param>
            <param name="y">Position delta Y at current frame in global space</param>
        </member>
        <member name="M:AngeliA.ICarrier.CarryTargetsOnTopHorizontally(AngeliA.Entity,System.Int32,AngeliA.OperationMode)">
            <summary>
            Carry all ICarrier on top. This operation do not make any movement for the host entity itself
            </summary>
            <param name="self">Host entity</param>
            <param name="_deltaX">Position delta X at current frame in global space</param>
            <param name="colMode">Does this operation include colliders and triggers</param>
        </member>
        <member name="M:AngeliA.ICarrier.CarryTargetsOnTopVertically(AngeliA.Entity,System.Int32,AngeliA.OperationMode)">
            <summary>
            Carry all ICarrier on top. This operation do not make any movement for the host entity itself
            </summary>
            <param name="self">Host entity</param>
            <param name="_deltaY">Position delta Y at current frame in global space</param>
            <param name="colMode">Does this operation include colliders and triggers</param>
        </member>
        <member name="T:AngeliA.ICombustible">
            <summary>
            This interface makes the entity can be set on fire
            </summary>
        </member>
        <member name="P:AngeliA.ICombustible.IsBurning">
            <summary>
            True if the entity is having a fire entity on
            </summary>
        </member>
        <member name="P:AngeliA.ICombustible.BurnedDuration">
            <summary>
            How many frames does it takes to burn down this entity
            </summary>
        </member>
        <member name="P:AngeliA.ICombustible.BurnStartFrame">
            <summary>
            The frame this entity start on fire
            </summary>
        </member>
        <member name="M:AngeliA.ICombustible.OnBurned">
            <summary>
            This function is called when the entity is burned down
            </summary>
        </member>
        <member name="T:AngeliA.IDamageReceiver">
            <summary>
            Interface that makes entity take damage from other
            </summary>
        </member>
        <member name="P:AngeliA.IDamageReceiver.Team">
            <summary>
            Which team does this entity belongs to
            </summary>
        </member>
        <member name="P:AngeliA.IDamageReceiver.IsInvincible">
            <summary>
            True if this entity is invincible
            </summary>
        </member>
        <member name="P:AngeliA.IDamageReceiver.TakeDamageFromLevel">
            <summary>
            True if this entity take damage when overlap with colliders from PhysicsLayer.Damage
            </summary>
        </member>
        <member name="P:AngeliA.IDamageReceiver.IgnoreDamageType">
            <summary>
            This entity do not take damage with this tags
            </summary>
        </member>
        <member name="M:AngeliA.IDamageReceiver.OnDamaged(AngeliA.Damage)">
            <summary>
            This function is called when the entity takes a damage
            </summary>
        </member>
        <member name="M:AngeliA.IDamageReceiver.ValidDamage(AngeliA.Damage)">
            <summary>
            True if the damage will be take by this entity
            </summary>
        </member>
        <member name="M:AngeliA.IDamageReceiver.TakeDamage(AngeliA.Damage)">
            <summary>
            Make this entity take the given damage. This function will call ValidDamage internally
            </summary>
            <returns>True if the damage is taken</returns>
        </member>
        <member name="M:AngeliA.IDamageReceiver.DamageAllOverlap(AngeliA.IRect,AngeliA.Damage,System.Int32,AngeliA.Entity,AngeliA.OperationMode,System.Boolean)">
            <summary>
            Deal damage to all IDamageReceiver overlap by given range
            </summary>
            <param name="rect">The range in global space</param>
            <param name="damage"></param>
            <param name="physicsMask">Which physics layer is included</param>
            <param name="host">Sender of this damage</param>
            <param name="mode">Does this operation include collider or trigger</param>
            <param name="allowMultipleDamage">True if more than one receiver will take damage</param>
        </member>
        <member name="T:AngeliA.IFire">
            <summary>
            Interface that makes the entity behave like fire
            </summary>
        </member>
        <member name="M:AngeliA.IFire.Setup(AngeliA.ICombustible)">
            <summary>
            Set fire onto a target
            </summary>
        </member>
        <member name="M:AngeliA.IFire.Putout(System.Boolean)">
            <summary>
            Putout this fire
            </summary>
            <param name="manually">True if the fire got putout by something else</param>
        </member>
        <member name="M:AngeliA.IFire.SpreadFire(System.Int32,AngeliA.IRect,AngeliA.Entity)">
            <summary>
            Set fire at given range
            </summary>
            <param name="fireID">Which type of fire will be spawn</param>
            <param name="rect">Target range in global space</param>
            <param name="ignore">Do not set this entity on fire</param>
        </member>
        <member name="M:AngeliA.IFire.PutoutFire(AngeliA.IRect)">
            <summary>
            Putout fire in given range
            </summary>
            <param name="rect">Range in global space</param>
        </member>
        <member name="T:AngeliA.IItemTransfer">
            <summary>
            Interface that mark the entity as can be transfer item through map
            </summary>
        </member>
        <member name="T:AngeliA.IPlayable">
            <summary>
            Interface that mark the character as playable character
            </summary>
        </member>
        <member name="P:AngeliA.IPlayable.IlluminateRadius">
            <summary>
            Lighting system illuminate size in global space
            </summary>
        </member>
        <member name="P:AngeliA.IPlayable.IlluminateAmount">
            <summary>
            Lighting system illuminate amount. 0 means no illuminate. 1000 means general amount.
            </summary>
        </member>
        <member name="T:AngeliA.IRouteWalker">
            <summary>
            Interface that makes an entity walks along a given path
            </summary>
        </member>
        <member name="P:AngeliA.IRouteWalker.CurrentDirection">
            <summary>
            Which direction this entity is currently walking
            </summary>
        </member>
        <member name="P:AngeliA.IRouteWalker.TargetPosition">
            <summary>
            Where does this entity currently walking 
            </summary>
        </member>
        <member name="M:AngeliA.IRouteWalker.GetNextRoutePosition(AngeliA.IRouteWalker,System.Int32,System.Int32,System.Boolean,AngeliA.BlockType,System.Boolean,System.Collections.Generic.HashSet{System.Int32})">
            <inheritdoc cref="M:AngeliA.IRouteWalker.GetNextRoutePosition(AngeliA.Entity,AngeliA.Direction8@,AngeliA.Int2@,System.Int32,System.Int32,System.Boolean,AngeliA.BlockType,System.Boolean,System.Collections.Generic.HashSet{System.Int32})"/>
        </member>
        <member name="M:AngeliA.IRouteWalker.GetNextRoutePosition(AngeliA.Entity,AngeliA.Direction8@,AngeliA.Int2@,System.Int32,System.Int32,System.Boolean,AngeliA.BlockType,System.Boolean,System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            Get the position in global space that the walker entity should go to
            </summary>
            /// <param name="walker">Target walker</param>
            <param name="entity">Target entity that walks</param>
            <param name="currentDirection">Which direction this entity is currently walking</param>
            <param name="targetPosition">Where does this entity currently walking</param>
            <param name="pathID">Which map block should be treat as the path marker</param>
            <param name="speed">Movement speed in global space</param>
            <param name="allowTurnBack">True if the walker turn back when reach the edge</param>
            <param name="pathType">Block type of the path marker</param>
            <param name="allowTilt">True if the walker can walk diagonally</param>
            <param name="pathSet">A hash set of path marks, set to null if there's only one mark</param>
            <returns>The final position in global space</returns>
        </member>
        <member name="M:AngeliA.IRouteWalker.TryGetRouteFromMap(System.Int32,System.Int32,System.Int32,AngeliA.Direction8,AngeliA.Direction8@,AngeliA.BlockType,System.Boolean)">
            <inheritdoc cref="M:AngeliA.IRouteWalker.TryGetRouteFromMap(System.Collections.Generic.HashSet{System.Int32},System.Int32,System.Int32,AngeliA.Direction8,AngeliA.Direction8@,AngeliA.BlockType,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.IRouteWalker.TryGetRouteFromMap(System.Collections.Generic.HashSet{System.Int32},System.Int32,System.Int32,AngeliA.Direction8,AngeliA.Direction8@,AngeliA.BlockType,System.Boolean)">
            <summary>
            Get path marker block from map
            </summary>
            /// <param name="pathID">ID of the path marker block</param>
            <param name="pathSet">A hash set of path marks, set to null if there's only one mark</param>
            <param name="unitX">Position X in unit space</param>
            <param name="unitY">Position Y in unit space</param>
            <param name="currentDirection">Which direction this entity is currently walking</param>
            <param name="result">Direction the walker should go</param>
            <param name="pathType">Block type of the path marker</param>
            <param name="allowTilt">True if the walker can walk diagonally</param>
            <returns>True if the path is successfuly found</returns>
        </member>
        <member name="T:AngeliA.IWithCharacterMovement">
            <summary>
            Interface that makes the entity contains a instance of character movement behaviour
            </summary>
        </member>
        <member name="T:AngeliA.IWithCharacterAttackness">
            <summary>
            Interface that makes the entity contains a instance of character attackness behaviour
            </summary>
        </member>
        <member name="T:AngeliA.IWithCharacterBuff">
            <summary>
            Interface that makes the entity contains a instance of character buff behaviour
            </summary>
        </member>
        <member name="T:AngeliA.IWithCharacterHealth">
            <summary>
            Interface that makes the entity contains a instance of character health behaviour
            </summary>
        </member>
        <member name="T:AngeliA.IWithCharacterRenderer">
            <summary>
            Interface that makes the entity contains a instance of character rendering behaviour
            </summary>
        </member>
        <member name="T:AngeliA.ItemHolder">
            <summary>
            Entity that represent an item on map
            </summary>
        </member>
        <member name="P:AngeliA.ItemHolder.ItemID">
            <summary>
            Item ID from inventory system
            </summary>
        </member>
        <member name="P:AngeliA.ItemHolder.ItemCount">
            <summary>
            How many items does this holder contains
            </summary>
        </member>
        <member name="M:AngeliA.ItemHolder.Jump(System.Int32)">
            <summary>
            Perform a jump for once
            </summary>
            <param name="velocity">Initial speed Y</param>
        </member>
        <member name="M:AngeliA.ItemHolder.Collect(AngeliA.Character)">
            <summary>
            Collect the item holded inside this container
            </summary>
            <returns>True if the item has been collected</returns>
        </member>
        <member name="M:AngeliA.ItemHolder.ClearHoldingPool">
            <summary>
            Reset the internal data of the items that's exists outside player's view
            </summary>
        </member>
        <member name="T:AngeliA.IMapItem">
            <summary>
            Marks class as item that can be paint as map editor block
            </summary>
        </member>
        <member name="T:AngeliA.MapEditor">
            <summary>
            Entity for edit the map in run-time
            </summary>
        </member>
        <member name="F:AngeliA.MapEditor.TYPE_ID">
            <summary>
            Map editor's type id
            </summary>
        </member>
        <member name="F:AngeliA.MapEditor.SETTING_QUICK_PLAYER_DROP">
            <summary>
            ID for send/receive remote setting with the engine
            </summary>
        </member>
        <member name="F:AngeliA.MapEditor.SETTING_SHOW_BEHIND">
            <summary>
            ID for send/receive remote setting with the engine
            </summary>
        </member>
        <member name="F:AngeliA.MapEditor.SETTING_SHOW_STATE">
            <summary>
            ID for send/receive remote setting with the engine
            </summary>
        </member>
        <member name="F:AngeliA.MapEditor.SETTING_SHOW_GRID_GIZMOS">
            <summary>
            ID for send/receive remote setting with the engine
            </summary>
        </member>
        <member name="P:AngeliA.MapEditor.Instance">
            <summary>
            Single instance of the map editor
            </summary>
        </member>
        <member name="P:AngeliA.MapEditor.IsActived">
            <summary>
            True if the map editor entity is actived
            </summary>
        </member>
        <member name="P:AngeliA.MapEditor.IsEditing">
            <summary>
            True if the map editor is in edit mode
            </summary>
        </member>
        <member name="P:AngeliA.MapEditor.IsPlaying">
            <summary>
            True if the map editor entity is in play mode
            </summary>
        </member>
        <member name="P:AngeliA.MapEditor.IsEditorNavigating">
            <summary>
            True if the map editor entity is in navigating mode
            </summary>
        </member>
        <member name="P:AngeliA.MapEditor.CurrentZ">
            <summary>
            Current position Z value for the camera view
            </summary>
        </member>
        <member name="M:AngeliA.MapEditor.SetViewZ(System.Int32)">
            <summary>
            Set view position Z for map editor
            </summary>
        </member>
        <member name="T:AngeliA.MapEditorToolbarButton">
            <summary>
            Base class for detect toolbar button logic of the map editor
            </summary>
        </member>
        <member name="P:AngeliA.MapEditorToolbarButton.Icon">
            <summary>
            Icon artwork sprite for the button
            </summary>
        </member>
        <member name="P:AngeliA.MapEditorToolbarButton.Tip">
            <summary>
            Tooltip which shows when user hover mouse on it
            </summary>
        </member>
        <member name="P:AngeliA.MapEditorToolbarButton.Func">
            <summary>
            This function is called when user click the button
            </summary>
        </member>
        <member name="P:AngeliA.MapEditorToolbarButton.Enable">
            <summary>
            True if the button apears to be enabled
            </summary>
        </member>
        <member name="P:AngeliA.MapEditorToolbarButton.Active">
            <summary>
            True if the button display inside the toolbar
            </summary>
        </member>
        <member name="P:AngeliA.MapEditorToolbarButton.Order">
            <summary>
            Order of the button inside the toolbar
            </summary>
        </member>
        <member name="M:AngeliA.MapEditorToolbarButton.ButtonGUI(AngeliA.IRect)">
            <summary>
            Draw UI for the button
            </summary>
            <param name="rect">Rect position in global space</param>
        </member>
        <member name="T:AngeliA.Particle">
            <summary>
            Entity that represent a animated decoration
            </summary>
        </member>
        <member name="P:AngeliA.Particle.Duration">
            <summary>
            How long of this particle exists in stage in frames
            </summary>
        </member>
        <member name="P:AngeliA.Particle.Loop">
            <summary>
            True if this particle animation loops
            </summary>
        </member>
        <member name="P:AngeliA.Particle.Scale">
            <summary>
            Size scale this particle should apply (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="P:AngeliA.Particle.RenderingZ">
            <summary>
            Z value the sort rendering cells
            </summary>
        </member>
        <member name="P:AngeliA.Particle.AutoArtworkID">
            <summary>
            Artwork sprite ID if this particle is using the built-in logic for rendering
            </summary>
        </member>
        <member name="P:AngeliA.Particle.RenderingLayer">
            <summary>
            Which layer should this particle rendering into
            </summary>
        </member>
        <member name="P:AngeliA.Particle.Tint">
            <summary>
            Color tint for this particle
            </summary>
        </member>
        <member name="P:AngeliA.Particle.LocalFrame">
            <summary>
            Animation frame start from 0
            </summary>
        </member>
        <member name="P:AngeliA.Particle.Rotation">
            <summary>
            Angle of this particle
            </summary>
        </member>
        <member name="P:AngeliA.Particle.UserData">
            <summary>
            Custom data this particle holds
            </summary>
        </member>
        <member name="T:AngeliA.Rigidbody">
            <summary>
            Class for the entities which apply general physics by the system
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.IsGrounded">
            <summary>
            True if this entity is touching ground
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.IsInsideGround">
            <summary>
            True if this entity is stucking inside the ground
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.InWater">
            <summary>
            True if this entity is inside water
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.VelocityX">
            <summary>
            Horizontal velocity at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.VelocityY">
            <summary>
            Vertical velocity at current frame
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.BounceSpeedRate">
            <summary>
            How many speed remain after this entity collide on another entity (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.OffsetX">
            <summary>
            Position offset between X value and Rect.x value
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.OffsetY">
            <summary>
            Position offset between Y value and Rect.y value
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.GroundedID">
            <summary>
            Block ID of the current touching ground block
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.PrevX">
            <summary>
            Position X for the last frame in global space
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.PrevY">
            <summary>
            Position Y for the last frame in global space
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.DeltaPositionX">
            <summary>
            Changes of position X at current frame in global space
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.DeltaPositionY">
            <summary>
            Changes of position Y at current frame in global space
            </summary>
        </member>
        <member name="F:AngeliA.Rigidbody.MomentumX">
            <summary>
            Velocity X that keep applying on this entity. Every frame the value will move to 0 by "decay"
            </summary>
        </member>
        <member name="F:AngeliA.Rigidbody.MomentumY">
            <summary>
            Velocity Y that keep applying on this entity. Every frame the value will move to 0 by "decay"
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.FacingRight">
            <summary>
            True if this entity is facing right side
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.EjectWhenInsideGround">
            <summary>
            True if this entity try to move out of ground automatically when it stuck inside ground
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.RequireDodgeOverlap">
            <summary>
            True if this entity do not react to the colliders which already overlaps on it.
            </summary>
        </member>
        <member name="F:AngeliA.Rigidbody.GlobalGravity">
            <summary>
            Gravity value that applys to all rigidbody
            </summary>
        </member>
        <member name="F:AngeliA.Rigidbody.FallingGravityScale">
            <summary>
            Amount of gravity apply to this entity when it's moving downward (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.Rigidbody.RisingGravityScale">
            <summary>
            Amount of gravity apply to this entity when it's moving upward (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="F:AngeliA.Rigidbody.CollisionMask">
            <summary>
            Which physics layers should this entity collide with
            </summary>
        </member>
        <member name="F:AngeliA.Rigidbody.IgnoreGroundCheck">
            <summary>
            If this entity currently check for touching ground
            </summary>
        </member>
        <member name="F:AngeliA.Rigidbody.IgnoreGravity">
            <summary>
            True if this entity currently should not apply gravity
            </summary>
        </member>
        <member name="F:AngeliA.Rigidbody.IgnorePhysics">
            <summary>
            True if this entity currently should not apply any physics logic
            </summary>
        </member>
        <member name="F:AngeliA.Rigidbody.IgnoreInsideGround">
            <summary>
            If this entity currently check for stuck inside ground
            </summary>
        </member>
        <member name="F:AngeliA.Rigidbody.IgnoreOneway">
            <summary>
            True if this entity currently should not collide with oneway gates
            </summary>
        </member>
        <member name="F:AngeliA.Rigidbody.IgnoreMomentum">
            <summary>
            True if this entity currently should not apply any momentum
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.PhysicalLayer">
            <summary>
            Which physical layer should this entity fill it's collider in
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.SelfCollisionMask">
            <summary>
            Intrinsic physics layers this entity should collide with
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.MaxGravitySpeed">
            <summary>
            Limitation for speed from gravity
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.AirDragX">
            <summary>
            Amount of horizontal speed lost every frame
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.AirDragY">
            <summary>
            Amount of vertical speed lost every frame
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.WaterFloatSpeed">
            <summary>
            Amount of upward speed apply when the entity inside water
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.WaterSpeedRate">
            <summary>
            Amount of speed scales when entity inside water (0 means 0%, 1000 means 100%)
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.AllowBeingPush">
            <summary>
            True if this entity can be push by other
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.DestroyWhenInsideGround">
            <summary>
            True if this entity despawns when it's inside ground
            </summary>
        </member>
        <member name="P:AngeliA.Rigidbody.CarryOtherOnTop">
            <summary>
            Trhe if this entity can carry other ICarrier on top
            </summary>
        </member>
        <member name="M:AngeliA.Rigidbody.PerformMove(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Make this entity move with physics rules at this frame
            </summary>
            <param name="speedX">Delta position X</param>
            <param name="speedY">Delta position Y</param>
            <param name="ignoreCarry">True if this entity don't carry other on top</param>
        </member>
        <member name="M:AngeliA.Rigidbody.MakeGrounded(System.Int32,System.Int32)">
            <summary>
            Mark this entity as touching ground for given frames long
            </summary>
            <param name="frame"></param>
            <param name="blockID">Ground block ID</param>
        </member>
        <member name="M:AngeliA.Rigidbody.CancelMakeGrounded">
            <summary>
            Stop making this entity marked as touching ground
            </summary>
        </member>
        <member name="M:AngeliA.Rigidbody.Push(System.Int32)">
            <summary>
            This function is called when the entity is being pushed
            </summary>
        </member>
        <member name="M:AngeliA.Rigidbody.PerformGroundCheck(AngeliA.IRect,AngeliA.PhysicsCell@)">
            <summary>
            Return true if the entity is touching ground
            </summary>
            <param name="rect">Blocks overlap this rect range will be count as touching ground</param>
            <param name="hit">The physics data from the ground block</param>
        </member>
        <member name="M:AngeliA.Rigidbody.FillAsTrigger(System.Int32,System.Int32)">
            <summary>
            Make this entity fill trigger into the physics system for given frames long
            </summary>
        </member>
        <member name="M:AngeliA.Rigidbody.FillAsOnewayUp(System.Int32,System.Int32)">
            <summary>
            Make this entity fill upward oneway gate into the physics system for given frames long
            </summary>
        </member>
        <member name="M:AngeliA.Rigidbody.OnInsideGroundDestroyed">
            <summary>
            This function is called when this entity is despawn by being stuck inside ground
            </summary>
        </member>
        <member name="M:AngeliA.Rigidbody.GroundedCheck">
            <summary>
            Function that holds the touching ground checking logic
            </summary>
        </member>
        <member name="M:AngeliA.Rigidbody.InsideGroundCheck">
            <summary>
            Function that holds the stuck inside ground checking logic
            </summary>
        </member>
        <member name="T:AngeliA.NumberZero">
            <summary>
            Element for indicate a number on map
            </summary>
        </member>
        <member name="T:AngeliA.NumberOne">
            <summary>
            Element for indicate a number on map
            </summary>
        </member>
        <member name="T:AngeliA.NumberTwo">
            <summary>
            Element for indicate a number on map
            </summary>
        </member>
        <member name="T:AngeliA.NumberThree">
            <summary>
            Element for indicate a number on map
            </summary>
        </member>
        <member name="T:AngeliA.NumberFour">
            <summary>
            Element for indicate a number on map
            </summary>
        </member>
        <member name="T:AngeliA.NumberFive">
            <summary>
            Element for indicate a number on map
            </summary>
        </member>
        <member name="T:AngeliA.NumberSix">
            <summary>
            Element for indicate a number on map
            </summary>
        </member>
        <member name="T:AngeliA.NumberSeven">
            <summary>
            Element for indicate a number on map
            </summary>
        </member>
        <member name="T:AngeliA.NumberEight">
            <summary>
            Element for indicate a number on map
            </summary>
        </member>
        <member name="T:AngeliA.NumberNine">
            <summary>
            Element for indicate a number on map
            </summary>
        </member>
        <member name="T:AngeliA.ControlHintUI">
            <summary>
            Hint for active buttons displays at botton-left corner of the screen during gameplay
            </summary>
        </member>
        <member name="P:AngeliA.ControlHintUI.Instance">
            <summary>
            Single instance of this entity
            </summary>
        </member>
        <member name="P:AngeliA.ControlHintUI.UseGamePadHint">
            <summary>
            True if show the gamepad UI indicator
            </summary>
        </member>
        <member name="P:AngeliA.ControlHintUI.UseControlHint">
            <summary>
            True if show the control hint UI
            </summary>
        </member>
        <member name="P:AngeliA.ControlHintUI.OffsetX">
            <summary>
            Position offset X in global space
            </summary>
        </member>
        <member name="P:AngeliA.ControlHintUI.OffsetY">
            <summary>
            Position offset Y in global space
            </summary>
        </member>
        <member name="M:AngeliA.ControlHintUI.AddHint(AngeliA.Gamekey,System.String,System.Int32)">
            <summary>
            Require hint for given game-key for the current frame
            </summary>
            <param name="key"></param>
            <param name="label"></param>
            <param name="priority">Require with large priority will override the one with small priority</param>
        </member>
        <member name="M:AngeliA.ControlHintUI.AddHint(AngeliA.Gamekey,AngeliA.Gamekey,System.String,System.Int32)">
            <inheritdoc cref="M:AngeliA.ControlHintUI.AddHint(AngeliA.Gamekey,System.String,System.Int32)"/>
        </member>
        <member name="M:AngeliA.ControlHintUI.AddHint(AngeliA.KeyboardKey,System.String)">
            <summary>
            Require hint for given keyboard-key for the current frame
            </summary>
            <param name="key"></param>
            <param name="label"></param>
        </member>
        <member name="M:AngeliA.ControlHintUI.AddHint(AngeliA.KeyboardKey,AngeliA.KeyboardKey,System.String)">
            <inheritdoc cref="M:AngeliA.ControlHintUI.AddHint(AngeliA.KeyboardKey,System.String)"/>
        </member>
        <member name="M:AngeliA.ControlHintUI.DrawGlobalHint(System.Int32,System.Int32,AngeliA.Gamekey,System.String,System.Boolean)">
            <summary>
            Draw a control hint UI on the given position
            </summary>
            <param name="globalX">Position X in global space</param>
            <param name="globalY">Position Y in global space</param>
            <param name="key">Target key</param>
            <param name="label">Hint content</param>
            <param name="background">True if the hint renders with a black background</param>
        </member>
        <member name="M:AngeliA.ControlHintUI.DrawGlobalHint(System.Int32,System.Int32,AngeliA.Gamekey,AngeliA.Gamekey,System.String,System.Boolean)">
            <inheritdoc cref="M:AngeliA.ControlHintUI.DrawGlobalHint(System.Int32,System.Int32,AngeliA.Gamekey,System.String,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.ControlHintUI.DrawGlobalHint(System.Int32,System.Int32,AngeliA.KeyboardKey,System.String,System.Boolean)">
            <inheritdoc cref="M:AngeliA.ControlHintUI.DrawGlobalHint(System.Int32,System.Int32,AngeliA.Gamekey,System.String,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.ControlHintUI.DrawGlobalHint(System.Int32,System.Int32,AngeliA.KeyboardKey,AngeliA.KeyboardKey,System.String,System.Boolean)">
            <inheritdoc cref="M:AngeliA.ControlHintUI.DrawGlobalHint(System.Int32,System.Int32,AngeliA.Gamekey,System.String,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.ControlHintUI.DrawGlobalHint(System.Int32,System.Int32,AngeliA.GamepadKey,System.String,System.Boolean)">
            <inheritdoc cref="M:AngeliA.ControlHintUI.DrawGlobalHint(System.Int32,System.Int32,AngeliA.Gamekey,System.String,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.ControlHintUI.DrawGlobalHint(System.Int32,System.Int32,AngeliA.GamepadKey,AngeliA.GamepadKey,System.String,System.Boolean)">
            <inheritdoc cref="M:AngeliA.ControlHintUI.DrawGlobalHint(System.Int32,System.Int32,AngeliA.Gamekey,System.String,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.ControlHintUI.ForceShowHint(System.Int32)">
            <summary>
            Show control hint even user have turn it off in setting menu
            </summary>
        </member>
        <member name="M:AngeliA.ControlHintUI.ForceHideGamepad(System.Int32)">
            <summary>
            Hide gamepad indicator even user have turn it on in setting menu
            </summary>
        </member>
        <member name="M:AngeliA.ControlHintUI.ForceHideGlobalHint(System.Int32)">
            <summary>
            Hide all global hints for given frames
            </summary>
        </member>
        <member name="M:AngeliA.ControlHintUI.ForceOffset(System.Int32,System.Int32,System.Int32)">
            <summary>
            Override global position offset for given frames
            </summary>
        </member>
        <member name="T:AngeliA.DefaultDialogueUI">
            <summary>
            Implementation of the dialogueUI with default settings
            </summary>
        </member>
        <member name="T:AngeliA.DialogueUI">
            <summary>
            Entity that shows dialogue content. Driven by the DialogueTask.
            </summary>
        </member>
        <member name="P:AngeliA.DialogueUI.PanelRect">
            <summary>
            Rect position for the total boundary
            </summary>
        </member>
        <member name="P:AngeliA.DialogueUI.ContentRect">
            <summary>
            Rect position for the text content
            </summary>
        </member>
        <member name="P:AngeliA.DialogueUI.IconRect">
            <summary>
            Rect position for the character avatar icon
            </summary>
        </member>
        <member name="P:AngeliA.DialogueUI.NameRect">
            <summary>
            Rect position for the character name
            </summary>
        </member>
        <member name="P:AngeliA.DialogueUI.RollingSpeed">
            <summary>
            How many characters does it add per frame during the rolling animation
            </summary>
        </member>
        <member name="P:AngeliA.DialogueUI.BackgroundRect">
            <summary>
            Rect position for the background
            </summary>
        </member>
        <member name="T:AngeliA.EntityUI">
            <summary>
            Entities which spawns into the stage and serves as UI
            </summary>
        </member>
        <member name="P:AngeliA.EntityUI.BlockEvent">
            <summary>
            True if this UI blocks mouse button event
            </summary>
        </member>
        <member name="M:AngeliA.EntityUI.Unify(System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.Unify(System.Int32)"/>
        </member>
        <member name="T:AngeliA.FileBrowserUI">
            <summary>
            Built-in file brower entity for PC only
            </summary>
        </member>
        <member name="P:AngeliA.FileBrowserUI.Instance">
            <summary>
            Global single instance for this class
            </summary>
        </member>
        <member name="P:AngeliA.FileBrowserUI.ShowingBrowser">
            <summary>
            True if the entity is currently displaying
            </summary>
        </member>
        <member name="P:AngeliA.FileBrowserUI.BackgroundRect">
            <summary>
            Rect position for background range in global space
            </summary>
        </member>
        <member name="P:AngeliA.FileBrowserUI.CurrentFolder">
            <summary>
            Path of the current browsing folder
            </summary>
        </member>
        <member name="P:AngeliA.FileBrowserUI.CurrentName">
            <summary>
            Name of the current selecting file/folder
            </summary>
        </member>
        <member name="P:AngeliA.FileBrowserUI.Title">
            <summary>
            Title of the current window
            </summary>
        </member>
        <member name="P:AngeliA.FileBrowserUI.SearchPatterns">
            <summary>
            Files that will be display inside the content panel
            </summary>
        </member>
        <member name="M:AngeliA.FileBrowserUI.OpenFolder(System.String,System.Action{System.String})">
            <summary>
            Start file browser for open an existing folder
            </summary>
            <param name="title">Title of the window</param>
            <param name="onFolderOpen">Callback function for a folder being open</param>
        </member>
        <member name="M:AngeliA.FileBrowserUI.OpenFile(System.String,System.Action{System.String},System.String[])">
            <summary>
            Start file browser for open an existing file
            </summary>
            <param name="title">Title of the window</param>
            <param name="onFileOpen">Callback function for a file being open</param>
            <param name="searchPatterns">Which file should be display. eg."*.png", "*.jpg"</param>
        </member>
        <member name="M:AngeliA.FileBrowserUI.SaveFolder(System.String,System.String,System.Action{System.String})">
            <summary>
            Start file browser for create/save a folder
            </summary>
            <param name="title">Title of the window</param>
            <param name="defaultFolderName">Default name shown in the input field</param>
            <param name="onFolderSaved">Callback function for the folder being create/save</param>
        </member>
        <member name="M:AngeliA.FileBrowserUI.SaveFile(System.String,System.String,System.Action{System.String},System.String[])">
            <summary>
            Start file browser for create/save a file
            </summary>
            <param name="title">Title of the window</param>
            <param name="defaultFileNameWithExt">Default name shown in the input field. eg. "name.png"</param>
            <param name="onFileSaved">Callback function for the file being create/save</param>
            <param name="searchPatterns">Which type of file is allowed be create/save. eg."*.png", "*.jpg"</param>
        </member>
        <member name="T:AngeliA.GenericDialogUI">
            <summary>
            Dialog UI entity for general purpose
            </summary>
        </member>
        <member name="P:AngeliA.GenericDialogUI.Instance">
            <summary>
            Global instance of this entity
            </summary>
        </member>
        <member name="P:AngeliA.GenericDialogUI.ShowingDialog">
            <summary>
            True if the dialog is currently displaying
            </summary>
        </member>
        <member name="P:AngeliA.GenericDialogUI.InvokingData">
            <summary>
            Custom data for internal logic
            </summary>
        </member>
        <member name="M:AngeliA.GenericDialogUI.SpawnDialog_Button(System.String,System.String,System.Action)">
            <inheritdoc cref="M:AngeliA.GenericDialogUI.SpawnDialog(System.String,System.String,System.Action,System.String,System.Action,System.String,System.Action)"/>
        </member>
        <member name="M:AngeliA.GenericDialogUI.SpawnDialog_Button(System.String,System.String,System.Action,System.String,System.Action)">
            <inheritdoc cref="M:AngeliA.GenericDialogUI.SpawnDialog(System.String,System.String,System.Action,System.String,System.Action,System.String,System.Action)"/>
        </member>
        <member name="M:AngeliA.GenericDialogUI.SpawnDialog_Button(System.String,System.String,System.Action,System.String,System.Action,System.String,System.Action)">
            <inheritdoc cref="M:AngeliA.GenericDialogUI.SpawnDialog(System.String,System.String,System.Action,System.String,System.Action,System.String,System.Action)"/>
        </member>
        <member name="M:AngeliA.GenericDialogUI.SpawnDialog(System.String,System.String,System.Action)">
            <inheritdoc cref="M:AngeliA.GenericDialogUI.SpawnDialog(System.String,System.String,System.Action,System.String,System.Action,System.String,System.Action)"/>
        </member>
        <member name="M:AngeliA.GenericDialogUI.SpawnDialog(System.String,System.String,System.Action,System.String,System.Action)">
            <inheritdoc cref="M:AngeliA.GenericDialogUI.SpawnDialog(System.String,System.String,System.Action,System.String,System.Action,System.String,System.Action)"/>
        </member>
        <member name="M:AngeliA.GenericDialogUI.SpawnDialog(System.String,System.String,System.Action,System.String,System.Action,System.String,System.Action)">
            <summary>
            Start a dialog with buttons with solid-looking part
            </summary>
            <param name="message">Text message display on top</param>
            <param name="label">Label content of the button</param>
            <param name="action">This function is called when the button is pressed</param>
            <param name="labelA">Label content of the button</param>
            <param name="actionA">This function is called when the button is pressed</param>
            <param name="labelB">Label content of the button</param>
            <param name="actionB">This function is called when the button is pressed</param>
            <param name="labelC">Label content of the button</param>
            <param name="actionC">This function is called when the button is pressed</param>
        </member>
        <member name="M:AngeliA.GenericDialogUI.SetItemTint(AngeliA.Color32)">
            <inheritdoc cref="M:AngeliA.GenericDialogUI.SetItemTint(AngeliA.Color32,AngeliA.Color32,AngeliA.Color32)"/>
        </member>
        <member name="M:AngeliA.GenericDialogUI.SetItemTint(AngeliA.Color32,AngeliA.Color32)">
            <inheritdoc cref="M:AngeliA.GenericDialogUI.SetItemTint(AngeliA.Color32,AngeliA.Color32,AngeliA.Color32)"/>
        </member>
        <member name="M:AngeliA.GenericDialogUI.SetItemTint(AngeliA.Color32,AngeliA.Color32,AngeliA.Color32)">
            <summary>
            Set content tint of specified item
            </summary>
        </member>
        <member name="M:AngeliA.GenericDialogUI.SetCustomData(System.Object,System.Object,System.Object)">
            <summary>
            Set custom data for the specified item. Get this data from GenericDialogUI.InvokingData inside the "action" from SpawnDialog funtion
            </summary>
        </member>
        <member name="T:AngeliA.GenericPopupUI">
            <summary>
            Popup menu UI for general perpose
            </summary>
        </member>
        <member name="P:AngeliA.GenericPopupUI.Instance">
            <summary>
            Global single instance of this entity
            </summary>
        </member>
        <member name="P:AngeliA.GenericPopupUI.ShowingPopup">
            <summary>
            True is the menu is currently displaying
            </summary>
        </member>
        <member name="P:AngeliA.GenericPopupUI.BackgroundRect">
            <summary>
            Rect position of the background in global space
            </summary>
        </member>
        <member name="P:AngeliA.GenericPopupUI.OffsetX">
            <summary>
            Position offset X in global space between left edge of the camera to the left edge of this menu
            </summary>
        </member>
        <member name="P:AngeliA.GenericPopupUI.OffsetY">
            <summary>
            Position offset X in global space between bottom edge of the camera to the bottom edge of this menu
            </summary>
        </member>
        <member name="P:AngeliA.GenericPopupUI.InvokingItemlabel">
            <summary>
            Label of the currently pressed item
            </summary>
        </member>
        <member name="P:AngeliA.GenericPopupUI.InvokingItemData">
            <summary>
            Custom data of the currently pressed item
            </summary>
        </member>
        <member name="P:AngeliA.GenericPopupUI.MenuID">
            <summary>
            Custom ID of the menu
            </summary>
        </member>
        <member name="P:AngeliA.GenericPopupUI.CurrentSubLevel">
            <summary>
            Recursive layer count of the sub-menu if a new item is added
            </summary>
        </member>
        <member name="M:AngeliA.GenericPopupUI.BeginPopup(System.Int32)">
            <summary>
            Start to make a new menu list
            </summary>
        </member>
        <member name="M:AngeliA.GenericPopupUI.BeginPopup(AngeliA.Int2,System.Int32)">
            <summary>
            Start to make a new menu list
            </summary>
        </member>
        <member name="M:AngeliA.GenericPopupUI.AddSeparator">
            <summary>
            Add a empty line (call BeginPopup first)
            </summary>
        </member>
        <member name="M:AngeliA.GenericPopupUI.AddItem(System.String,System.Action,System.Boolean,System.Boolean,System.Object,System.Boolean)">
            <inheritdoc cref="M:AngeliA.GenericPopupUI.AddItemLogic(System.String,System.Int32,AngeliA.Direction2,System.Int32,System.Action,System.Boolean,System.Boolean,System.Object,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.GenericPopupUI.AddItem(System.String,System.Int32,AngeliA.Direction2,System.Int32,System.Action,System.Boolean,System.Boolean,System.Object,System.Boolean)">
            <inheritdoc cref="M:AngeliA.GenericPopupUI.AddItemLogic(System.String,System.Int32,AngeliA.Direction2,System.Int32,System.Action,System.Boolean,System.Boolean,System.Object,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.GenericPopupUI.BeginSubItem">
            <summary>
            Start to make a sub menu
            </summary>
        </member>
        <member name="M:AngeliA.GenericPopupUI.EndSubItem">
            <summary>
            Stop making a sub menu
            </summary>
        </member>
        <member name="M:AngeliA.GenericPopupUI.ClosePopup">
            <summary>
            Close current open popup menu
            </summary>
        </member>
        <member name="M:AngeliA.GenericPopupUI.ClearItems">
            <summary>
            Remove all items inside the current popup menu
            </summary>
        </member>
        <member name="M:AngeliA.GenericPopupUI.SetTint(AngeliA.Color32,AngeliA.Color32)">
            <summary>
            Set color tint for the popup menu ui
            </summary>
        </member>
        <member name="M:AngeliA.GenericPopupUI.AddItemLogic(System.String,System.Int32,AngeliA.Direction2,System.Int32,System.Action,System.Boolean,System.Boolean,System.Object,System.Boolean)">
            <summary>
            Add a new item (call BeginPopup first)
            </summary>
            <param name="icon">Artwork sprite of this item</param>
            <param name="checkMarkSprite">Artwork sprite of the check mark</param>
            <param name="iconPosition">Position offset of this icon</param>
            <param name="label">Text content inside this item</param>
            <param name="action">This function is called when the item is pressed</param>
            <param name="enabled">True if this item can be press</param>
            <param name="checked">True if there should be a check mark display on this item</param>
            <param name="data">Custom data for this item. Get this data with GenericPopupUI.InvokingItemData inside the "action" from param</param>
            <param name="editable">True if this label can be edit by the user</param>
        </member>
        <member name="T:AngeliA.InventoryPartnerUI">
            <summary>
            A partner UI display on top of the player menu that display and manage an inventory
            </summary>
        </member>
        <member name="P:AngeliA.InventoryPartnerUI.AvatarID">
            <summary>
            Artwork sprite ID of the avatar icon
            </summary>
        </member>
        <member name="P:AngeliA.InventoryPartnerUI._Column">
            <summary>
            Column count of the inventory
            </summary>
        </member>
        <member name="P:AngeliA.InventoryPartnerUI._Row">
            <summary>
            Row count of the inventory
            </summary>
        </member>
        <member name="T:AngeliA.IWindowEntityUI">
            <summary>
            Interface that indicate the entity is a UI window
            </summary>
        </member>
        <member name="P:AngeliA.IWindowEntityUI.BackgroundRect">
            <summary>
            Rect position of the background in global space
            </summary>
        </member>
        <member name="T:AngeliA.MenuUI">
            <summary>
            General class for menu entity ui
            </summary>
        </member>
        <member name="P:AngeliA.MenuUI.SelectionIndex">
            <summary>
            Index of the current selecting item
            </summary>
        </member>
        <member name="P:AngeliA.MenuUI.Message">
            <summary>
            Text content of the message display on top. Set to empty means no message should be display.
            </summary>
        </member>
        <member name="P:AngeliA.MenuUI.BackgroundRect">
            <summary>
            Rect position of the background range in global space
            </summary>
        </member>
        <member name="P:AngeliA.MenuUI.OverrideWindowWidth">
            <summary>
            Forced horizontal size in global space 
            </summary>
        </member>
        <member name="P:AngeliA.MenuUI.AnimationDuration">
            <summary>
            Length in frame for the appearing animation
            </summary>
        </member>
        <member name="P:AngeliA.MenuUI.BackgroundStyle">
            <summary>
            GUI style instance of the background panel
            </summary>
        </member>
        <member name="P:AngeliA.MenuUI.MessageStyle">
            <summary>
            GUI style instance of the message box
            </summary>
        </member>
        <member name="P:AngeliA.MenuUI.DefaultLabelStyle">
            <summary>
            GUI style instance of the item label
            </summary>
        </member>
        <member name="P:AngeliA.MenuUI.DefaultContentStyle">
            <summary>
            GUI style instance of the item content
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.BackgroundCode">
            <summary>
            Artwork sprite for the background
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.SelectionMarkCode">
            <summary>
            Artwork sprite for the selecting item mark
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.MoreItemMarkCode">
            <summary>
            Artwork sprite for the mark displays on bottom when there's hiden item under the menu
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.ArrowMarkCode">
            <summary>
            Artwork sprite for the adjusting arrows
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.WindowWidth">
            <summary>
            Unified width of the window
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.ItemHeight">
            <summary>
            Unified height of a single item
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.ItemGap">
            <summary>
            Unified space between two items
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.MaxItemCount">
            <summary>
            How many items can it display at the same time
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.ContentPadding">
            <summary>
            Unified padding gap for the content panel
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.SelectionMarkSize">
            <summary>
            Unified size of the selection hand mark
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.SelectionArrowMarkSize">
            <summary>
            Unified size of the item adjusting arrow
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.MoreMarkSize">
            <summary>
            Unified size of the hidden item indicator
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.ScreenTint">
            <summary>
            Color tint that blocks all screen behind
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.BackgroundTint">
            <summary>
            Color tint of the background panel
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.SelectionMarkTint">
            <summary>
            Color tint of the selecting hand mark
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.MoreMarkTint">
            <summary>
            Color tint of the hidden item indicator
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.MouseHighlightTint">
            <summary>
            Color tint for the current hovering item
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.Interactable">
            <summary>
            True if the menu react to player input currently
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.AllowMouseClick">
            <summary>
            True if the menu react to mouse input
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.QuitOnPressStartOrEscKey">
            <summary>
            True if the menu close when player press "Start" button
            </summary>
        </member>
        <member name="F:AngeliA.MenuUI.AnimationAmount">
            <summary>
            How many amount of appearing animation should apply on this menu
            </summary>
        </member>
        <member name="M:AngeliA.MenuUI.OnSelectionChanged">
            <summary>
            This function is called when item selection is changed
            </summary>
        </member>
        <member name="M:AngeliA.MenuUI.GetWindowRect">
            <summary>
            Get the rect position of the panel window in global space
            </summary>
        </member>
        <member name="M:AngeliA.MenuUI.DrawItem(System.String,System.Int32,AngeliA.GUIStyle,AngeliA.GUIStyle,System.Boolean)">
            <inheritdoc cref="M:AngeliA.MenuUI.DrawItemLogic(System.String,System.String,System.Char[],System.Int32,System.Boolean,System.Boolean,System.Int32@,AngeliA.GUIStyle,AngeliA.GUIStyle,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.MenuUI.DrawItem(System.String,System.String,System.Int32,AngeliA.GUIStyle,AngeliA.GUIStyle,System.Boolean)">
            <inheritdoc cref="M:AngeliA.MenuUI.DrawItemLogic(System.String,System.String,System.Char[],System.Int32,System.Boolean,System.Boolean,System.Int32@,AngeliA.GUIStyle,AngeliA.GUIStyle,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.MenuUI.DrawArrowItem(System.String,System.String,System.Boolean,System.Boolean,System.Int32@,System.Int32,AngeliA.GUIStyle,AngeliA.GUIStyle,System.Boolean)">
            <inheritdoc cref="M:AngeliA.MenuUI.DrawItemLogic(System.String,System.String,System.Char[],System.Int32,System.Boolean,System.Boolean,System.Int32@,AngeliA.GUIStyle,AngeliA.GUIStyle,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.MenuUI.DrawItem(System.String,System.Char[],System.Int32,AngeliA.GUIStyle,AngeliA.GUIStyle,System.Boolean)">
            <inheritdoc cref="M:AngeliA.MenuUI.DrawItemLogic(System.String,System.String,System.Char[],System.Int32,System.Boolean,System.Boolean,System.Int32@,AngeliA.GUIStyle,AngeliA.GUIStyle,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.MenuUI.DrawArrowItem(System.String,System.Char[],System.Boolean,System.Boolean,System.Int32@,System.Int32,AngeliA.GUIStyle,AngeliA.GUIStyle,System.Boolean)">
            <inheritdoc cref="M:AngeliA.MenuUI.DrawItemLogic(System.String,System.String,System.Char[],System.Int32,System.Boolean,System.Boolean,System.Int32@,AngeliA.GUIStyle,AngeliA.GUIStyle,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.MenuUI.DrawItemLogic(System.String,System.String,System.Char[],System.Int32,System.Boolean,System.Boolean,System.Int32@,AngeliA.GUIStyle,AngeliA.GUIStyle,System.Boolean)">
            <summary>
            Draw an item inside the menu
            </summary>
            <param name="label">Text displays on left side of this item</param>
            <param name="content">Text displays on right side of this item</param>
            <param name="chars">Text displays on right side of this item</param>
            <param name="icon">Artwork sprite</param>
            <param name="useLeftArrow">True if there should be an arrow at left side</param>
            <param name="useRightArrow">True if there should be an arrow at right side</param>
            <param name="delta">Adjusted value from the user at current frame</param>
            <param name="labelStyle">GUI style of the label part</param>
            <param name="contentStyle">GUI style of the content part</param>
            <param name="drawStyleBody">True if the body of GUI style should be display</param>
            <returns>True if the item is pressed</returns>
        </member>
        <member name="M:AngeliA.MenuUI.SetSelection(System.Int32)">
            <summary>
            Set current selecting item
            </summary>
        </member>
        <member name="T:AngeliA.NotificationUI">
            <summary>
            Display a temporarily notification on top of screen during gameplay
            </summary>
        </member>
        <member name="M:AngeliA.NotificationUI.SpawnNotification(System.String,System.Int32)">
            <summary>
            Require a notification. Call this function once for a single notification.
            </summary>
            <param name="content">Text content of the notification</param>
            <param name="icon">Artwork sprite ID for the notification. Set to int.MinValue if no icon should be display.</param>
        </member>
        <member name="T:AngeliA.PauseMenuUI">
            <summary>
            UI entity for the menu that displays when game is paused
            </summary>
        </member>
        <member name="T:AngeliA.PlayerMenuPartnerUI">
            <summary>
            Class for customize partner ui for player menu ui
            </summary>
        </member>
        <member name="P:AngeliA.PlayerMenuPartnerUI.InventoryID">
            <summary>
            ID for inventory system
            </summary>
        </member>
        <member name="P:AngeliA.PlayerMenuPartnerUI.Column">
            <summary>
            Inventory column count
            </summary>
        </member>
        <member name="P:AngeliA.PlayerMenuPartnerUI.Row">
            <summary>
            Inventory row count
            </summary>
        </member>
        <member name="P:AngeliA.PlayerMenuPartnerUI.ItemFieldSize">
            <summary>
            Unified size of a single item field
            </summary>
        </member>
        <member name="P:AngeliA.PlayerMenuPartnerUI.MouseInPanel">
            <summary>
            Trie if mouse cursor is currently inside this panel
            </summary>
        </member>
        <member name="P:AngeliA.PlayerMenuPartnerUI.BackgroundRect">
            <summary>
            Rect position of the background range in global space
            </summary>
        </member>
        <member name="M:AngeliA.PlayerMenuPartnerUI.EnablePanel">
            <summary>
            This function is called when the panel start to display
            </summary>
        </member>
        <member name="M:AngeliA.PlayerMenuPartnerUI.DrawPanel(AngeliA.IRect)">
            <summary>
            This function is called every frame for displaying this panel
            </summary>
            <param name="panelRect">Rect position for the range of this panel in global space</param>
        </member>
        <member name="M:AngeliA.PlayerMenuPartnerUI.Unify(System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.Unify(System.Int32)"/>
        </member>
        <member name="T:AngeliA.PlayerMenuUI">
            <summary>
            Menu UI for display player's state, manage equipments and items. Display when player press "select" button once.
            </summary>
        </member>
        <member name="P:AngeliA.PlayerMenuUI.Instance">
            <summary>
            Global instance of this entity
            </summary>
        </member>
        <member name="P:AngeliA.PlayerMenuUI.ShowingUI">
            <summary>
            True is this menu is currently displaying
            </summary>
        </member>
        <member name="P:AngeliA.PlayerMenuUI.Partner">
            <summary>
            Instance of the current partner UI. Partner is the panel shows on top. The bottom one always display player's inventory. When partner panel is null, it display player's equipment panel.
            </summary>
        </member>
        <member name="P:AngeliA.PlayerMenuUI.TopPanelColumn">
            <summary>
            Column count of the partner panel's inventory
            </summary>
        </member>
        <member name="P:AngeliA.PlayerMenuUI.TopPanelRow">
            <summary>
            Row count of the partner panel's inventory
            </summary>
        </member>
        <member name="P:AngeliA.PlayerMenuUI.CursorIndex">
            <summary>
            Index of the inventory cursor. (0 means bottom left, 1 makes the cursor go right)
            </summary>
        </member>
        <member name="P:AngeliA.PlayerMenuUI.CursorInBottomPanel">
            <summary>
            True if the cursor is in bottom inventory panel (the one for player's inventory)
            </summary>
        </member>
        <member name="P:AngeliA.PlayerMenuUI.TakingID">
            <summary>
            ID of the current taking item (the one move with the cursor), 0 means no item is taking.
            </summary>
        </member>
        <member name="P:AngeliA.PlayerMenuUI.TakingCount">
            <summary>
            Count of the current taking item.
            </summary>
        </member>
        <member name="M:AngeliA.PlayerMenuUI.OpenMenuWithPartner(AngeliA.PlayerMenuPartnerUI,System.Int32)">
            <summary>
            Open player menu ui with given partner ui
            </summary>
            <param name="partner">Instance of the partner ui which will be display on top</param>
            <param name="partnerInventoryID"></param>
            <returns>True if the menu is opened</returns>
        </member>
        <member name="M:AngeliA.PlayerMenuUI.OpenMenu">
            <summary>
            Open player menu ui without partner. Player equipment ui will be display on top.
            </summary>
            <returns>Instance of the player menu ui</returns>
        </member>
        <member name="M:AngeliA.PlayerMenuUI.CloseMenu">
            <summary>
            Close the current opening player menu ui
            </summary>
        </member>
        <member name="M:AngeliA.PlayerMenuUI.DrawTopInventory(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw stardard inventory panel ui
            </summary>
            <param name="inventoryID">Inventory ID for the partner ui</param>
            <param name="column">Inventory column count for the partner ui</param>
            <param name="row">Inventory row count for the partner ui</param>
            <param name="avatarID">Artwork sprite ID of the partner avatar</param>
        </member>
        <member name="M:AngeliA.PlayerMenuUI.DrawItemFieldUI(System.Int32,System.Int32,System.Int32,AngeliA.IRect,System.Boolean,System.Int32)">
            <summary>
            Draw a single item field
            </summary>
            <param name="itemID">ID of the item from this field</param>
            <param name="itemCount">Count of the item from this field</param>
            <param name="frameCode">Artwork sprite ID of the field's frame</param>
            <param name="itemRect">Rect position of this field in global space</param>
            <param name="interactable">True if this field is currently interactable</param>
            <param name="uiIndex">Cursor index for this field for UI logic only</param>
        </member>
        <member name="M:AngeliA.PlayerMenuUI.SetTaking(System.Int32,System.Int32)">
            <summary>
            Set current taking item on the cursor
            </summary>
        </member>
        <member name="T:AngeliA.PlayerQuickMenuUI">
            <summary>
            UI menu that display when player hold "select" button during gameplay
            </summary>
        </member>
        <member name="P:AngeliA.PlayerQuickMenuUI.Instance">
            <summary>
            Global single instance for this entity
            </summary>
        </member>
        <member name="P:AngeliA.PlayerQuickMenuUI.ShowingUI">
            <summary>
            True if the ui id currently displaying
            </summary>
        </member>
        <member name="P:AngeliA.PlayerQuickMenuUI.BackgroundRect">
            <summary>
            Rect position for background panel range in global size
            </summary>
        </member>
        <member name="M:AngeliA.PlayerQuickMenuUI.OpenMenu">
            <summary>
            Open the quick menu UI
            </summary>
            <returns>Instance of the opened menu</returns>
        </member>
        <member name="M:AngeliA.PlayerQuickMenuUI.CloseMenu">
            <summary>
            Close the quick menu UI if it's opening
            </summary>
        </member>
        <member name="T:AngeliA.WindowUI">
            <summary>
            Entity UI that represent a window
            </summary>
        </member>
        <member name="P:AngeliA.WindowUI.BackgroundRect">
            <summary>
            Rect position of the background part in global space
            </summary>
        </member>
        <member name="P:AngeliA.WindowUI.DefaultWindowName">
            <summary>
            Failback display name of this type of window
            </summary>
        </member>
        <member name="P:AngeliA.WindowUI.WindowRect">
            <summary>
            Rect position for the root boundary in global space
            </summary>
        </member>
        <member name="P:AngeliA.WindowUI.IsDirty">
            <summary>
            True if the content of the window have unsaved changes
            </summary>
        </member>
        <member name="P:AngeliA.WindowUI.RequiringTooltipRect">
            <summary>
            Rect position in global space for the tooltip this window require to display
            </summary>
        </member>
        <member name="P:AngeliA.WindowUI.RequiringTooltipContent">
            <summary>
            Content data for the tooltip this window require to display
            </summary>
        </member>
        <member name="P:AngeliA.WindowUI.NotificationContent">
            <summary>
            Content data for the notification this window require to display
            </summary>
        </member>
        <member name="P:AngeliA.WindowUI.NotificationSubContent">
            <summary>
            Secondary content data for the notification this window require to display
            </summary>
        </member>
        <member name="P:AngeliA.WindowUI.Skin">
            <inheritdoc cref="P:AngeliA.GUI.Skin"/>
        </member>
        <member name="M:AngeliA.WindowUI.ForceWindowRect(AngeliA.IRect)">
            <summary>
            Set window rect for all window UI
            </summary>
        </member>
        <member name="M:AngeliA.WindowUI.SetDirty">
            <summary>
            Mark this window as dirty (contains unsaved changes)
            </summary>
        </member>
        <member name="M:AngeliA.WindowUI.CleanDirty">
            <summary>
            Mark this window as not dirty (do not contains unsaved changes)
            </summary>
        </member>
        <member name="M:AngeliA.WindowUI.Save(System.Boolean)">
            <summary>
            Require save the data
            </summary>
            <param name="forceSave">True if this save performs without dirty checks</param>
        </member>
        <member name="M:AngeliA.WindowUI.RequireTooltip(AngeliA.IRect,System.String)">
            <summary>
            Require display tooltip for given range. Call this function every frame no matter the tooltip should be currently display or not.
            </summary>
        </member>
        <member name="M:AngeliA.WindowUI.RequireNotification(System.String,System.String)">
            <summary>
            Require a notification.
            </summary>
            <param name="content"></param>
            <param name="subContent"></param>
        </member>
        <member name="T:AngeliA.Game">
            <summary>
            Represent an AngeliA game
            </summary>
        </member>
        <member name="P:AngeliA.Game.GlobalFrame">
            <summary>
            Frame number that grows every 1/60 second
            </summary>
        </member>
        <member name="P:AngeliA.Game.SettleFrame">
            <summary>
            Frame number that could be reset by the stage
            </summary>
        </member>
        <member name="P:AngeliA.Game.PauselessFrame">
            <summary>
            Frame number that still grows when the game is pausing
            </summary>
        </member>
        <member name="P:AngeliA.Game.IsPausing">
            <summary>
            True if the game is currently pausing
            </summary>
        </member>
        <member name="P:AngeliA.Game.IsPlaying">
            <summary>
            True if the game is currently not pausing
            </summary>
        </member>
        <member name="P:AngeliA.Game.MusicVolume">
            <summary>
            Volume amount for the background music (0 for mute, 1000 for loudest)
            </summary>
        </member>
        <member name="P:AngeliA.Game.SoundVolume">
            <summary>
            Volume amount for the sound effect (0 for mute, 1000 for loudest)
            </summary>
        </member>
        <member name="P:AngeliA.Game.ScaledMusicVolume">
            <summary>
            Music volume that effect by the internal procedure audio volume
            </summary>
        </member>
        <member name="P:AngeliA.Game.ScaledSoundVolume">
            <summary>
            Sound volume that effect by the internal procedure audio volume
            </summary>
        </member>
        <member name="P:AngeliA.Game.ProcedureAudioVolume">
            <summary>
            Audio volume used by internal script
            </summary>
        </member>
        <member name="P:AngeliA.Game.CurrentBGM">
            <summary>
            Instance that represent the background music
            </summary>
        </member>
        <member name="P:AngeliA.Game.IsToolApplication">
            <summary>
            True if the application should be treated as tool instead of game
            </summary>
        </member>
        <member name="P:AngeliA.Game.IgnoreArtworkPixels">
            <summary>
            True if the application don't need pixel data from artwork sheet
            </summary>
        </member>
        <member name="F:AngeliA.Game.SoundPool">
            <summary>
            Instance pool for all available sound effect
            </summary>
        </member>
        <member name="F:AngeliA.Game.MusicPool">
            <summary>
            Instance pool for all available background music
            </summary>
        </member>
        <member name="F:AngeliA.Game.Fonts">
            <summary>
            Instance pool for all available font
            </summary>
        </member>
        <member name="M:AngeliA.Game.#ctor(System.String[])">
            <summary>
            Create a game instance with command-line arguments 
            </summary>
        </member>
        <member name="M:AngeliA.Game.Initialize">
            <summary>
            Call this function once to initialize the game. Must be called before any Update function called.
            </summary>
        </member>
        <member name="M:AngeliA.Game.Update">
            <summary>
            Call this function 60 times per second. Only call this after Initialize has been called.
            </summary>
        </member>
        <member name="M:AngeliA.Game.RestartGame">
            <summary>
            Invoke the OnGameRestart event. The game-play logic will be reset after this is called
            </summary>
        </member>
        <member name="M:AngeliA.Game.UnpauseGame">
            <summary>
            Continue game from pausing
            </summary>
        </member>
        <member name="M:AngeliA.Game.PauseGame">
            <summary>
            Pause the game from playing
            </summary>
        </member>
        <member name="M:AngeliA.Game.Settle">
            <summary>
            Mark the game frame as settled. 
            </summary>
        </member>
        <member name="M:AngeliA.Game.LoadFontsIntoPool(System.String,System.Boolean)">
            <summary>
            Load font file into system pool from given folder
            </summary>
            <param name="rootPath"></param>
            <param name="builtIn">True if the fonts are used for built-in font</param>
        </member>
        <member name="M:AngeliA.Game.SyncFontsWithPool(System.String)">
            <summary>
            Reload font file if any font is modified
            </summary>
            <param name="rootPath"></param>
            <returns></returns>
        </member>
        <member name="M:AngeliA.Game.UnloadFontsFromPool(System.Boolean)">
            <summary>
            Unload fonts from system pool
            </summary>
        </member>
        <member name="M:AngeliA.Game.SyncAudioPool(System.String[])">
            <summary>
            Update audio files between system pool and file
            </summary>
            <param name="universeRoots">Folder path of the universe</param>
        </member>
        <member name="M:AngeliA.Game.ClearAndUnloadAudioPool">
            <summary>
            Reset audio pool and unload the data in the memory
            </summary>
        </member>
        <member name="M:AngeliA.Game.InvokeGameQuitting">
            <summary>
            Invoke the OnGameQuitting event
            </summary>
        </member>
        <member name="M:AngeliA.Game.InvokeGameTryingToQuit">
            <summary>
            Invoke the OnGameTryingToQuit event
            </summary>
            <returns>True if the game should quit</returns>
        </member>
        <member name="M:AngeliA.Game.InvokeWindowFocusChanged(System.Boolean)">
            <summary>
            Invoke OnGameFocus/OnGameLostFocus event
            </summary>
        </member>
        <member name="M:AngeliA.Game.InvokeFileDropped(System.String)">
            <summary>
            Invoke OnFileDropped event
            </summary>
            <param name="path">Path of the dropped file</param>
        </member>
        <member name="M:AngeliA.Game._UnloadMusic(System.Object)">
            <summary>
            Unload the bgm object from memory
            </summary>
        </member>
        <member name="M:AngeliA.Game.PlayMusic(System.Int32,System.Boolean)">
            <inheritdoc cref="M:AngeliA.Game._PlayMusic(System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Game._PlayMusic(System.Int32,System.Boolean)">
            <summary>
            Load the music file, create the stream and play it as the background music 
            </summary>
            <param name="id">ID of the audio</param>
            <param name="fromStart">True if seek the music to start</param>
        </member>
        <member name="M:AngeliA.Game.StopMusic">
            <inheritdoc cref="M:AngeliA.Game._StopMusic"/>
        </member>
        <member name="M:AngeliA.Game._StopMusic">
            <summary>
            Stop the music stream and unload from memory
            </summary>
        </member>
        <member name="M:AngeliA.Game.PauseMusic">
            <inheritdoc cref="M:AngeliA.Game._PauseMusic"/>
        </member>
        <member name="M:AngeliA.Game._PauseMusic">
            <summary>
            Pause the background music
            </summary>
        </member>
        <member name="M:AngeliA.Game.UnpauseMusic">
            <inheritdoc cref="M:AngeliA.Game._UnPauseMusic"/>
        </member>
        <member name="M:AngeliA.Game._UnPauseMusic">
            <summary>
            Resume the background music
            </summary>
        </member>
        <member name="M:AngeliA.Game.SetMusicVolume(System.Int32)">
            <inheritdoc cref="M:AngeliA.Game._SetMusicVolume(System.Int32)"/>
        </member>
        <member name="M:AngeliA.Game._SetMusicVolume(System.Int32)">
            <summary>
            Set volume for the background music (0 means mute, 1000 means loudest)
            </summary>
        </member>
        <member name="P:AngeliA.Game.IsMusicPlaying">
            <inheritdoc cref="M:AngeliA.Game._IsMusicPlaying"/>
        </member>
        <member name="M:AngeliA.Game._IsMusicPlaying">
            <summary>
            True if the background music is currently playing
            </summary>
        </member>
        <member name="P:AngeliA.Game.CurrentMusicID">
            <inheritdoc cref="M:AngeliA.Game._GetCurrentMusicID"/>
        </member>
        <member name="M:AngeliA.Game._GetCurrentMusicID">
            <summary>
            Audio ID of the current loaded background music
            </summary>
        </member>
        <member name="M:AngeliA.Game._LoadSound(System.String)">
            <summary>
            Load a audio file as sound effect
            </summary>
        </member>
        <member name="M:AngeliA.Game._LoadSoundAlias(System.Object)">
            <summary>
            Copy a sound instance that shares the same audio data with given sound object
            </summary>
        </member>
        <member name="M:AngeliA.Game._UnloadSound(AngeliA.SoundData)">
            <summary>
            Unload the sound object from memory
            </summary>
        </member>
        <member name="M:AngeliA.Game.PlaySound(System.Int32,System.Single,System.Single,System.Single)">
            <inheritdoc cref="M:AngeliA.Game._PlaySound(System.Int32,System.Single,System.Single,System.Single)"/>
        </member>
        <member name="M:AngeliA.Game._PlaySound(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Play a sound
            </summary>
            <param name="id">Audio ID</param>
            <param name="volume"></param>
            <param name="pitch"></param>
            <param name="pan"></param>
        </member>
        <member name="M:AngeliA.Game.StopAllSounds">
            <inheritdoc cref="M:AngeliA.Game._StopAllSounds"/>
        </member>
        <member name="M:AngeliA.Game._StopAllSounds">
            <summary>
            Stop all sound effects that currently playing
            </summary>
        </member>
        <member name="M:AngeliA.Game.SetSoundVolume(System.Int32)">
            <inheritdoc cref="M:AngeliA.Game._SetSoundVolume(System.Int32)"/>
        </member>
        <member name="M:AngeliA.Game._SetSoundVolume(System.Int32)">
            <summary>
            Set volume for all sound effects
            </summary>
        </member>
        <member name="M:AngeliA.Game.ShowCursor">
            <inheritdoc cref="M:AngeliA.Game._ShowCursor"/>
        </member>
        <member name="M:AngeliA.Game._ShowCursor">
            <summary>
            Make the mouse cursor appear (not only for the current frame)
            </summary>
        </member>
        <member name="M:AngeliA.Game.HideCursor">
            <inheritdoc cref="M:AngeliA.Game._HideCursor"/>
        </member>
        <member name="M:AngeliA.Game._HideCursor">
            <summary>
            Make the mouse cursor disappear (not only for the current frame)
            </summary>
        </member>
        <member name="M:AngeliA.Game.CenterCursor">
            <inheritdoc cref="M:AngeliA.Game._CenterCursor"/>
        </member>
        <member name="M:AngeliA.Game._CenterCursor">
            <summary>
            Move the mouse cursor to the center of screen. This works when mouse cursor is hidding.
            </summary>
        </member>
        <member name="P:AngeliA.Game.CursorVisible">
            <inheritdoc cref="M:AngeliA.Game._CursorVisible"/>
        </member>
        <member name="M:AngeliA.Game._CursorVisible">
            <summary>
            True if the mouse cursor is currently visible
            </summary>
        </member>
        <member name="M:AngeliA.Game.SetCursor(System.Int32)">
            <inheritdoc cref="M:AngeliA.Game._SetCursor(System.Int32)"/>
        </member>
        <member name="M:AngeliA.Game._SetCursor(System.Int32)">
            <summary>
            Set the appearance of the mouse cursor. Use Const.CURSOR_XXX for the index param
            </summary>
        </member>
        <member name="M:AngeliA.Game.SetCursorToNormal">
            <inheritdoc cref="M:AngeliA.Game._SetCursorToNormal"/>
        </member>
        <member name="M:AngeliA.Game._SetCursorToNormal">
            <summary>
            Set the mouse cursor to default
            </summary>
        </member>
        <member name="P:AngeliA.Game.CursorInScreen">
            <inheritdoc cref="M:AngeliA.Game._CursorInScreen"/>
        </member>
        <member name="M:AngeliA.Game._CursorInScreen">
            <summary>
            True if the mouse cursor is currently inside application window
            </summary>
        </member>
        <member name="P:AngeliA.Game.IsMouseAvailable">
            <inheritdoc cref="M:AngeliA.Game._IsMouseAvailable"/>
        </member>
        <member name="M:AngeliA.Game._IsMouseAvailable">
            <summary>
            True if the mouse device is currently available to use
            </summary>
        </member>
        <member name="P:AngeliA.Game.IsMouseLeftHolding">
            <inheritdoc cref="M:AngeliA.Game._IsMouseLeftHolding"/>
        </member>
        <member name="M:AngeliA.Game._IsMouseLeftHolding">
            <summary>
            True if the mouse left button is currently holding
            </summary>
        </member>
        <member name="P:AngeliA.Game.IsMouseMidHolding">
            <inheritdoc cref="M:AngeliA.Game._IsMouseMidHolding"/>
        </member>
        <member name="M:AngeliA.Game._IsMouseMidHolding">
            <summary>
            True if the mouse middle button is currently holding
            </summary>
        </member>
        <member name="P:AngeliA.Game.IsMouseRightHolding">
            <inheritdoc cref="M:AngeliA.Game._IsMouseRightHolding"/>
        </member>
        <member name="M:AngeliA.Game._IsMouseRightHolding">
            <summary>
            True if the mouse right button is currently holding
            </summary>
        </member>
        <member name="P:AngeliA.Game.MouseScrollDelta">
            <inheritdoc cref="M:AngeliA.Game._GetMouseScrollDelta"/>
        </member>
        <member name="M:AngeliA.Game._GetMouseScrollDelta">
            <summary>
            Mouse wheel scrolling value at current frame. Return negative value when the page scrolls down (the content appears to move upward)
            </summary>
        </member>
        <member name="P:AngeliA.Game.MouseScreenPosition">
            <inheritdoc cref="M:AngeliA.Game._GetMouseScreenPosition"/>
        </member>
        <member name="M:AngeliA.Game._GetMouseScreenPosition">
            <summary>
            Mouse position in screen space. (0,0) means top-left corner
            </summary>
        </member>
        <member name="P:AngeliA.Game.IsKeyboardAvailable">
            <inheritdoc cref="M:AngeliA.Game._IsKeyboardAvailable"/>
        </member>
        <member name="M:AngeliA.Game._IsKeyboardAvailable">
            <summary>
            True is the keyboard device is currently available to use
            </summary>
        </member>
        <member name="M:AngeliA.Game.IsKeyboardKeyHolding(AngeliA.KeyboardKey)">
            <inheritdoc cref="M:AngeliA.Game._IsKeyboardKeyHolding(AngeliA.KeyboardKey)"/>
        </member>
        <member name="M:AngeliA.Game._IsKeyboardKeyHolding(AngeliA.KeyboardKey)">
            <summary>
            True if the given keyboard key is currently holding
            </summary>
        </member>
        <member name="M:AngeliA.Game.ForAllPressingCharsThisFrame">
            <summary>
            Iterate through all pressing character at current frame. Not include non-character keys
            </summary>
        </member>
        <member name="M:AngeliA.Game.GetCharPressed">
            <summary>
            Get the current pressing charcter and remove it from internal queue. Return '\0' if no character is pressed.
            </summary>
        </member>
        <member name="M:AngeliA.Game.ForAllPressingKeysThisFrame">
            <summary>
            Iterate through all pressing keyboard keys at current frame. Include non-character keys
            </summary>
        </member>
        <member name="M:AngeliA.Game.GetKeyPressed">
            <summary>
            Get the current pressing keyboard key and remove it from internal queue. Return null if no key is pressed.
            </summary>
        </member>
        <member name="P:AngeliA.Game.IsGamepadAvailable">
            <inheritdoc cref="M:AngeliA.Game._IsGamepadAvailable"/>
        </member>
        <member name="M:AngeliA.Game._IsGamepadAvailable">
            <summary>
            True if any gamepad device is currently available to use
            </summary>
        </member>
        <member name="M:AngeliA.Game.IsGamepadKeyHolding(AngeliA.GamepadKey)">
            <inheritdoc cref="M:AngeliA.Game._IsGamepadKeyHolding(AngeliA.GamepadKey)"/>
        </member>
        <member name="M:AngeliA.Game._IsGamepadKeyHolding(AngeliA.GamepadKey)">
            <summary>
            True if the given gamepad button is currently holding
            </summary>
        </member>
        <member name="M:AngeliA.Game.IsGamepadLeftStickHolding(AngeliA.Direction4)">
            <inheritdoc cref="M:AngeliA.Game._IsGamepadLeftStickHolding(AngeliA.Direction4)"/>
        </member>
        <member name="M:AngeliA.Game._IsGamepadLeftStickHolding(AngeliA.Direction4)">
            <summary>
            True if the left gamepad stick is tilting to given direction
            </summary>
        </member>
        <member name="M:AngeliA.Game.IsGamepadRightStickHolding(AngeliA.Direction4)">
            <inheritdoc cref="M:AngeliA.Game._IsGamepadRightStickHolding(AngeliA.Direction4)"/>
        </member>
        <member name="M:AngeliA.Game._IsGamepadRightStickHolding(AngeliA.Direction4)">
            <summary>
            True if the right gamepad stick is tilting to given direction
            </summary>
        </member>
        <member name="P:AngeliA.Game.GamepadLeftStickDirection">
            <inheritdoc cref="M:AngeliA.Game._GetGamepadLeftStickDirection"/>
        </member>
        <member name="M:AngeliA.Game._GetGamepadLeftStickDirection">
            <summary>
            Get the specific direction of the left gamepad stick
            </summary>
        </member>
        <member name="P:AngeliA.Game.GamepadRightStickDirection">
            <inheritdoc cref="M:AngeliA.Game._GetGamepadRightStickDirection"/>
        </member>
        <member name="M:AngeliA.Game._GetGamepadRightStickDirection">
            <summary>
            Get the specific direction of the right gamepad stick
            </summary>
        </member>
        <member name="M:AngeliA.Game.GetCameraRectFromViewRect(AngeliA.IRect)">
            <summary>
            Calculate the camera rect based on given view rect
            </summary>
        </member>
        <member name="M:AngeliA.Game.GetViewWidthFromViewHeight(System.Int32)">
            <summary>
            Calculate view rect width based on given view rect height
            </summary>
        </member>
        <member name="M:AngeliA.Game.BeforeAllLayersUpdate">
            <inheritdoc cref="M:AngeliA.Game._BeforeAllLayersUpdate"/>
        </member>
        <member name="M:AngeliA.Game._BeforeAllLayersUpdate">
            <summary>
            This function is called before any rendering layer get updated
            </summary>
        </member>
        <member name="M:AngeliA.Game.AfterAllLayersUpdate">
            <inheritdoc cref="M:AngeliA.Game._AfterAllLayersUpdate"/>
        </member>
        <member name="M:AngeliA.Game._AfterAllLayersUpdate">
            <summary>
            This function is called after all rendering layer get updated
            </summary>
        </member>
        <member name="M:AngeliA.Game.OnLayerUpdate(System.Int32,AngeliA.Cell[],System.Int32)">
            <inheritdoc cref="M:AngeliA.Game._OnLayerUpdate(System.Int32,AngeliA.Cell[],System.Int32)"/>
        </member>
        <member name="M:AngeliA.Game._OnLayerUpdate(System.Int32,AngeliA.Cell[],System.Int32)">
            <summary>
            This function holds the logic to draw all rendering cells for the current frame.
            </summary>
            <param name="layerIndex">Index of the rendering layer</param>
            <param name="cells">All rendering cells that may need to be drawn</param>
            <param name="cellCount">How many rendering cells need to be drawn</param>
        </member>
        <member name="P:AngeliA.Game.ScreenEffectPadding">
            <summary>
            Border size of all screen effects
            </summary>
        </member>
        <member name="M:AngeliA.Game.PassEffect(System.Int32,System.Int32)">
            <summary>
            Active screen effect for given frames long.
            </summary>
            <param name="effectIndex">Use Const.SCREEN_EFFECT_XXXX for this index</param>
            <param name="duration"></param>
        </member>
        <member name="M:AngeliA.Game.PassEffect_Tint(AngeliA.Color32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Game._Effect_SetTintParams(AngeliA.Color32)"/>
        </member>
        <member name="M:AngeliA.Game._Effect_SetTintParams(AngeliA.Color32)">
            <summary>
            Enable color tint screen effect and set the params
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            		var color = new Color32(
            			(byte)QTest.Int("r", 255, 0, 255),
            			(byte)QTest.Int("g", 255, 0, 255),
            			(byte)QTest.Int("b", 255, 0, 255)
            		);
            		Game.PassEffect_Tint(color, 1);
            	}
            
            }
            </code></example>
        </member>
        <member name="M:AngeliA.Game.PassEffect_RetroDarken(System.Single,System.Single,System.Int32)">
            <inheritdoc cref="M:AngeliA.Game._Effect_SetDarkenParams(System.Single,System.Single)"/>
        </member>
        <member name="M:AngeliA.Game._Effect_SetDarkenParams(System.Single,System.Single)">
            <summary>
            Enable darken screen effect and set the params
            </summary>
            <param name="amount">0 means no darken, 1 means full darken</param>
            <param name="step">How intermittent the darken should be. Default 8 steps.</param>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            		Game.PassEffect_RetroDarken(
            			QTest.Float("amount", 0f, 0f, 1f),
            			QTest.Float("step", 8f, 2f, 16f),
            			1
            		);
            	}
            
            }
            </code></example>
        </member>
        <member name="M:AngeliA.Game.PassEffect_RetroLighten(System.Single,System.Single,System.Int32)">
            <inheritdoc cref="M:AngeliA.Game._Effect_SetLightenParams(System.Single,System.Single)"/>
        </member>
        <member name="M:AngeliA.Game._Effect_SetLightenParams(System.Single,System.Single)">
            <summary>
            Enable lighten screen effect and set the params
            </summary>
            <param name="amount">0 means no lighten, 1 means full lighten</param>
            <param name="step">How intermittent the lighten should be. Default 8 steps.</param>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            		Game.PassEffect_RetroLighten(
            			QTest.Float("amount", 0f, 0f, 1f),
            			QTest.Float("step", 8f, 2f, 16f),
            			1
            		);
            	}
            
            }
            </code></example>
        </member>
        <member name="M:AngeliA.Game.PassEffect_Vignette(System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <inheritdoc cref="M:AngeliA.Game._Effect_SetVignetteParams(System.Single,System.Single,System.Single,System.Single,System.Single)"/>
        </member>
        <member name="M:AngeliA.Game._Effect_SetVignetteParams(System.Single,System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Enable vignette screen effect and set the params
             </summary>
             <param name="radius">Size of the circle view. 0 means no view. 1 means the view covers whole screen.</param>
             <param name="feather">How smooth is the edge of the circle view. 0 means sharp edge. 1 means smooth edge.</param>
             <param name="offsetX">Position offset of the circle view. 0 means view's center at left edge of screen. 1 for right edge.</param>
             <param name="offsetY">Position offset of the circle view. 0 means view's center at bottom edge of screen. 1 for top edge.</param>
             <param name="round">How perfect the circle view is. 0 means the aspect ratio is the same with window aspect ratio. 1 means perfect circle.</param>
             <example><code>
             using AngeliA;
            
             namespace AngeliaGame;
            
             public class Example {
            
            		[OnGameUpdate]
            		internal static void OnGameUpdate () {
            			Game.PassEffect_Vignette(
            				QTest.Float("radius", 1f, 0f, 1f),
            				QTest.Float("feather", 0f, 0f, 1f),
            				QTest.Float("x", 0f, -1f, 1f),
            				QTest.Float("y", 0f, -1f, 1f),
            				QTest.Float("round", 0f, 0f, 1f),
            				1
            			);
            		}
            
             }
             </code></example>
        </member>
        <member name="M:AngeliA.Game.PassEffect_Greyscale(System.Int32)">
            <summary>
            Enable greyscale screen effect
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            		Game.PassEffect_Greyscale(1);
            	}
            
            }
            </code></example>
        </member>
        <member name="M:AngeliA.Game.PassEffect_Invert(System.Int32)">
            <summary>
            Enable invert screen effect
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            		Game.PassEffect_Invert(1);
            	}
            
            }
            </code></example>
        </member>
        <member name="M:AngeliA.Game.GetEffectEnable(System.Int32)">
            <inheritdoc cref="M:AngeliA.Game._GetEffectEnable(System.Int32)"/>
        </member>
        <member name="M:AngeliA.Game._GetEffectEnable(System.Int32)">
            <summary>
            True if the given screen effect is currently enabled.
            </summary>
            <param name="effectIndex">Use Const.SCREEN_EFFECT_XXXX for this index</param>
        </member>
        <member name="M:AngeliA.Game.SetEffectEnable(System.Int32,System.Boolean)">
            <inheritdoc cref="M:AngeliA.Game._SetEffectEnable(System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Game._SetEffectEnable(System.Int32,System.Boolean)">
            <summary>
            Make given screen effect enable of disable.
            </summary>
            <param name="effectIndex">Use Const.SCREEN_EFFECT_XXXX for this index</param>
            <param name="enable"></param>
        </member>
        <member name="M:AngeliA.Game.GetTextureFromPixels(AngeliA.Color32[],System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Game._GetTextureFromPixels(AngeliA.Color32[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Game._GetTextureFromPixels(AngeliA.Color32[],System.Int32,System.Int32)">
            <summary>
            Create a new instance of texture from given pixels data. 
            </summary>
            <returns>Never return null and Don't throw exception.</returns>
            <param name="pixels">Pixel data. 0 means bottom-left corner. 1 makes it goes right for 1 pixel.</param>
            <param name="width">Width of the pixel data in pixel</param>
            <param name="height">Heigh of the pixel data in pixel</param>
        </member>
        <member name="M:AngeliA.Game.GetPixelsFromTexture(System.Object)">
            <inheritdoc cref="M:AngeliA.Game._GetPixelsFromTexture(System.Object)"/>
        </member>
        <member name="M:AngeliA.Game._GetPixelsFromTexture(System.Object)">
            <summary>
            Create a new instance of Color32 array from the given texture
            </summary>
            <returns>Return [] when invalid. Don't throw exception.</returns>
        </member>
        <member name="M:AngeliA.Game.FillPixelsIntoTexture(AngeliA.Color32[],System.Object)">
            <inheritdoc cref="M:AngeliA.Game._FillPixelsIntoTexture(AngeliA.Color32[],System.Object)"/>
        </member>
        <member name="M:AngeliA.Game._FillPixelsIntoTexture(AngeliA.Color32[],System.Object)">
            <summary>
            Set the given pixel data into the given texture instance.
            </summary>
        </member>
        <member name="M:AngeliA.Game.GetTextureSize(System.Object)">
            <inheritdoc cref="M:AngeliA.Game._GetTextureSize(System.Object)"/>
        </member>
        <member name="M:AngeliA.Game._GetTextureSize(System.Object)">
            <summary>
            Get the size in pixel of the given texture instance
            </summary>
            <returns>Return default when invalid. Don't throw exception.</returns>
        </member>
        <member name="M:AngeliA.Game.PngBytesToTexture(System.Byte[])">
            <inheritdoc cref="M:AngeliA.Game._PngBytesToTexture(System.Byte[])"/>
        </member>
        <member name="M:AngeliA.Game._PngBytesToTexture(System.Byte[])">
            <summary>
            Create a new instance of texture from a byte array load from png file.
            </summary>
            <returns>Never return null and Don't throw exception.</returns>
        </member>
        <member name="M:AngeliA.Game.TextureToPngBytes(System.Object)">
            <inheritdoc cref="M:AngeliA.Game._TextureToPngBytes(System.Object)"/>
        </member>
        <member name="M:AngeliA.Game._TextureToPngBytes(System.Object)">
            <summary>
            Encode the given texture instance into png byte array.
            </summary>
            <returns>Return [] when invalid. Don't throw exception.</returns>
        </member>
        <member name="M:AngeliA.Game.UnloadTexture(System.Object)">
            <inheritdoc cref="M:AngeliA.Game._UnloadTexture(System.Object)"/>
        </member>
        <member name="M:AngeliA.Game._UnloadTexture(System.Object)">
            <summary>
            Unload the given texture instance from memory
            </summary>
        </member>
        <member name="M:AngeliA.Game.GetTextureID(System.Object)">
            <inheritdoc cref="M:AngeliA.Game._GetTextureID(System.Object)"/>
        </member>
        <member name="M:AngeliA.Game._GetTextureID(System.Object)">
            <summary>
            Get internal ID of the given texture instance.
            </summary>
        </member>
        <member name="M:AngeliA.Game.IsTextureReady(System.Object)">
            <inheritdoc cref="M:AngeliA.Game._IsTextureReady(System.Object)"/>
        </member>
        <member name="M:AngeliA.Game._IsTextureReady(System.Object)">
            <summary>
            True if the given texture instance is ready to use
            </summary>
        </member>
        <member name="M:AngeliA.Game.GetResizedTexture(System.Object,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AngeliA.Game._GetResizedTexture(System.Object,System.Int32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Game._GetResizedTexture(System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create a new instance of texture which is the resized version of the given texture.
            </summary>
            <param name="texture"></param>
            <param name="newWidth"></param>
            <param name="newHeight"></param>
            <param name="nearestNeighbor">True if the misaligned pixels should be averaged with it's nearby pixels</param>
            <returns>Return null if invalid. Don't throw exception.</returns>
        </member>
        <member name="M:AngeliA.Game.FillResizedTexture(System.Object,System.Object,System.Boolean)">
            <inheritdoc cref="M:AngeliA.Game._FillResizedTexture(System.Object,System.Object,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Game._FillResizedTexture(System.Object,System.Object,System.Boolean)">
            <summary>
            Copy data from source texture into target texture. Stretch resize the content if two textures have different size.
            </summary>
            <param name="sourceTexture"></param>
            <param name="targetTexture"></param>
            <param name="nearestNeighbor">True if the misaligned pixels should be averaged with it's nearby pixels</param>
        </member>
        <member name="M:AngeliA.Game.GetScreenRenderingTexture">
            <summary>
            Get the instance of the internal texture that holds the pixel data on screen
            </summary>
        </member>
        <member name="M:AngeliA.Game.DrawGizmosFrame(AngeliA.IRect,AngeliA.Color32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Game.DrawGizmosFrame(AngeliA.IRect,AngeliA.Color32,AngeliA.Int4,AngeliA.Int4)"/>
        </member>
        <member name="M:AngeliA.Game.DrawGizmosFrame(AngeliA.IRect,AngeliA.Color32,AngeliA.Int4,AngeliA.Int4)">
            <summary>
            Draw a holo rectangle as gizmos for current frame
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="color">Color tint</param>
            <param name="thickness">Border size in global space</param>
            <param name="gap">How big the fracture part in the middle in global space</param>
        </member>
        <member name="M:AngeliA.Game.DrawGizmosRect(AngeliA.IRect,AngeliA.Color32)">
            <inheritdoc cref="M:AngeliA.Game._DrawGizmosRect(AngeliA.IRect,AngeliA.Color32,AngeliA.Color32,AngeliA.Color32,AngeliA.Color32)"/>
        </member>
        <member name="M:AngeliA.Game._DrawGizmosRect(AngeliA.IRect,AngeliA.Color32)">
            <inheritdoc cref="M:AngeliA.Game._DrawGizmosRect(AngeliA.IRect,AngeliA.Color32,AngeliA.Color32,AngeliA.Color32,AngeliA.Color32)"/>
        </member>
        <member name="M:AngeliA.Game.DrawGizmosRect(AngeliA.IRect,AngeliA.Color32,AngeliA.Color32)">
            <summary>
            Draw a rectangle as gizmos for current frame
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="colorT">Color tint</param>
            <param name="colorB">Color tint</param>
        </member>
        <member name="M:AngeliA.Game._DrawGizmosRect(AngeliA.IRect,AngeliA.Color32,AngeliA.Color32)">
            <summary>
            Draw a rectangle as gizmos for current frame
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="colorT">Color tint</param>
            <param name="colorB">Color tint</param>
        </member>
        <member name="M:AngeliA.Game.DrawGizmosRect(AngeliA.IRect,AngeliA.Color32,AngeliA.Color32,AngeliA.Color32,AngeliA.Color32)">
            <summary>
            Draw a rectangle as gizmos for current frame
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="colorTL">Color tint</param>
            <param name="colorTR">Color tint</param>
            <param name="colorBL">Color tint</param>
            <param name="colorBR">Color tint</param>
        </member>
        <member name="M:AngeliA.Game._DrawGizmosRect(AngeliA.IRect,AngeliA.Color32,AngeliA.Color32,AngeliA.Color32,AngeliA.Color32)">
            <summary>
            Draw a rectangle as gizmos for current frame
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="colorTL">Color tint</param>
            <param name="colorTR">Color tint</param>
            <param name="colorBL">Color tint</param>
            <param name="colorBR">Color tint</param>
        </member>
        <member name="M:AngeliA.Game.DrawGizmosTexture(AngeliA.IRect,System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc cref="M:AngeliA.Game._DrawGizmosTexture(AngeliA.IRect,AngeliA.FRect,System.Object,AngeliA.Color32,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Game.DrawGizmosTexture(AngeliA.IRect,AngeliA.FRect,System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc cref="M:AngeliA.Game._DrawGizmosTexture(AngeliA.IRect,AngeliA.FRect,System.Object,AngeliA.Color32,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Game.DrawGizmosTexture(AngeliA.IRect,System.Object,AngeliA.Color32,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc cref="M:AngeliA.Game._DrawGizmosTexture(AngeliA.IRect,AngeliA.FRect,System.Object,AngeliA.Color32,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Game.DrawGizmosTexture(AngeliA.IRect,AngeliA.FRect,System.Object,AngeliA.Color32,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc cref="M:AngeliA.Game._DrawGizmosTexture(AngeliA.IRect,AngeliA.FRect,System.Object,AngeliA.Color32,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Game._DrawGizmosTexture(AngeliA.IRect,AngeliA.FRect,System.Object,AngeliA.Color32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Draw the given texture as gizmos for current frame
            </summary>
            <param name="rect">Rect position</param>
            <param name="uv">Which part of this texture should be draw. (0, 0, 1, 1) means all of them. (0, 0, 0.5f, 1) means left half.</param>
            <param name="texture"></param>
            <param name="flipX"></param>
            <param name="flipY"></param>
            <param name="tint">Color tint</param>
            <param name="inverse">True if the texture display as the inversed color of the current rendered pixel on screen.</param>
        </member>
        <member name="M:AngeliA.Game.DrawGizmosLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32)">
            <inheritdoc cref="M:AngeliA.Game._DrawGizmosLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32)"/>
        </member>
        <member name="M:AngeliA.Game._DrawGizmosLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32)">
            <summary>
            Draw a line as gizmos for current frame
            </summary>
            <param name="startX">Start point of the line in global space</param>
            <param name="startY">Start point of the line in global space</param>
            <param name="endX">End point of the line in global space</param>
            <param name="endY">End point of the line in global space</param>
            <param name="thickness">Thickness in global space</param>
            <param name="color">Color tint</param>
        </member>
        <member name="M:AngeliA.Game.IgnoreGizmos(System.Int32)">
            <inheritdoc cref="M:AngeliA.Game._IgnoreGizmos(System.Int32)"/>
        </member>
        <member name="M:AngeliA.Game._IgnoreGizmos(System.Int32)">
            <summary>
            Hide all gizmos for given frames long.
            </summary>
        </member>
        <member name="P:AngeliA.Game.GizmosOnTopOfUiFrame">
            <summary>
            Gizmos should cover the UI rendering layer if current global frame less than this value
            </summary>
        </member>
        <member name="M:AngeliA.Game.ForceGizmosOnTopOfUI(System.Int32)">
            <summary>
            Make gizmos cover UI rendering layer for given frames long.
            </summary>
        </member>
        <member name="M:AngeliA.Game.CancelGizmosOnTopOfUI">
            <summary>
            Do not make gizmos cover UI rendering layer anymore.
            </summary>
        </member>
        <member name="P:AngeliA.Game.ShowingDoodle">
            <summary>
            True if the doodle pixels are displaying at this frame
            </summary>
        </member>
        <member name="P:AngeliA.Game.DoodleScreenPadding">
            <summary>
            Border size in screen space for the doodle canvas
            </summary>
        </member>
        <member name="P:AngeliA.Game.DoodleFrame">
            <summary>
            Doodle pixels should be rendered of the global frame is less or equal to (this value + 1)
            </summary>
        </member>
        <member name="P:AngeliA.Game.DoodleOnTopOfUiFrame">
            <summary>
            Doodle pixels should cover the UI rendering layer if current global frame less than this value
            </summary>
        </member>
        <member name="M:AngeliA.Game.ForceDoodleOnTopOfUI(System.Int32)">
            <summary>
             Make doodle pixels cover UI rendering layer for given frames long.
            </summary>
        </member>
        <member name="M:AngeliA.Game.CancelDoodleOnTopOfUI">
            <summary>
            Do not make doodle pixels cover UI rendering layer anymore.
            </summary>
        </member>
        <member name="M:AngeliA.Game.ShowDoodle(System.Int32)">
            <summary>
            Display the doodled pixels
            </summary>
        </member>
        <member name="M:AngeliA.Game.HideDoodle">
            <summary>
            Do not display doodled pixels
            </summary>
        </member>
        <member name="M:AngeliA.Game.ResetDoodle(AngeliA.Color32)">
            <inheritdoc cref="M:AngeliA.Game._ResetDoodle(AngeliA.Color32)"/>
        </member>
        <member name="M:AngeliA.Game._ResetDoodle(AngeliA.Color32)">
            <summary>
            Clear the doodle pixels canvas
            </summary>
        </member>
        <member name="M:AngeliA.Game.SetDoodleOffset(AngeliA.Float2)">
            <inheritdoc cref="M:AngeliA.Game._SetDoodleOffset(AngeliA.Float2)"/>
        </member>
        <member name="M:AngeliA.Game._SetDoodleOffset(AngeliA.Float2)">
            <summary>
            Set position offset of the doodle pixels. x=1 means right shift the whole screen width.
            </summary>
        </member>
        <member name="M:AngeliA.Game.SetDoodleZoom(System.Single)">
            <inheritdoc cref="M:AngeliA.Game._SetDoodleZoom(System.Single)"/>
        </member>
        <member name="M:AngeliA.Game._SetDoodleZoom(System.Single)">
            <summary>
            Set zoom amount of the doodle pixels. 1 means general size. 2 means zoom-in to double the size.
            </summary>
        </member>
        <member name="M:AngeliA.Game.DoodleRectSwap(AngeliA.FRect,AngeliA.Color32)">
            <summary>
            Doodle the given color as pixels into the screen-space canvas. Pixels remains on screen until you hide all doodle or reset the canvas.
            </summary>
            <param name="screenRect">Rect position in screen space that swap around when out of range</param>
            <param name="color"></param>
        </member>
        <member name="M:AngeliA.Game.DoodleRect(AngeliA.FRect,AngeliA.Color32)">
            <inheritdoc cref="M:AngeliA.Game._DoodleRect(AngeliA.FRect,AngeliA.Color32)"/>
        </member>
        <member name="M:AngeliA.Game._DoodleRect(AngeliA.FRect,AngeliA.Color32)">
            <summary>
            Doodle the given color as pixels into the screen-space canvas. Pixels remains on screen until you hide all doodle or reset the canvas.
            </summary>
            <param name="screenRect">Rect position in screen space</param>
            <param name="color"></param>
        </member>
        <member name="M:AngeliA.Game.DoodleWorld(AngeliA.IBlockSquad,AngeliA.FRect,AngeliA.IRect,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc cref="M:AngeliA.Game._DoodleWorld(AngeliA.IBlockSquad,AngeliA.FRect,AngeliA.IRect,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Game._DoodleWorld(AngeliA.IBlockSquad,AngeliA.FRect,AngeliA.IRect,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Doodle the given map data on screen based on summary tint from rendering sheet
            </summary>
            <param name="squad">Source of the map block data</param>
            <param name="screenRect">Position rect in screen space for the given world-unit-range</param>
            <param name="worldUnitRange">Rect range on the map in unit space</param>
            <param name="z">Position Z on the map</param>
            <param name="ignoreLevel">True if level blocks should be ignored</param>
            <param name="ignoreBG">True if background blocks should be ignored</param>
            <param name="ignoreEntity">True if entity blocks should be ignored</param>
            <param name="ignoreElement">True if element blocks should be ignored</param>
        </member>
        <member name="P:AngeliA.Game.FontCount">
            <inheritdoc cref="M:AngeliA.Game._GetFontCount"/>
        </member>
        <member name="M:AngeliA.Game._GetFontCount">
            <summary>
            Total count of loaded fonts
            </summary>
        </member>
        <member name="M:AngeliA.Game.GetClipboardText">
            <inheritdoc cref="M:AngeliA.Game._GetClipboardText"/>
        </member>
        <member name="M:AngeliA.Game._GetClipboardText">
            <summary>
            Text content of the current system clipboard
            </summary>
        </member>
        <member name="M:AngeliA.Game.SetClipboardText(System.String)">
            <inheritdoc cref="M:AngeliA.Game._SetClipboardText(System.String)"/>
        </member>
        <member name="M:AngeliA.Game._SetClipboardText(System.String)">
            <summary>
            Set the text content of the system clipboard
            </summary>
        </member>
        <member name="M:AngeliA.Game.GetCharSprite(System.Int32,System.Char,AngeliA.CharSprite@)">
            <inheritdoc cref="M:AngeliA.Game._GetCharSprite(System.Int32,System.Char,AngeliA.CharSprite@)"/>
        </member>
        <member name="M:AngeliA.Game._GetCharSprite(System.Int32,System.Char,AngeliA.CharSprite@)">
            <summary>
            Get artwork sprite for rendering a text character
            </summary>
            <param name="fontIndex"></param>
            <param name="c"></param>
            <param name="result"></param>
            <returns>True if the sprite is successfuly required</returns>
        </member>
        <member name="M:AngeliA.Game.CreateNewFontData">
            <summary>
            Create a new instance of the internal data for font
            </summary>
        </member>
        <member name="P:AngeliA.Game.IsFullscreen">
            <inheritdoc cref="M:AngeliA.Game._SetFullscreen(System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Game._SetFullscreen(System.Boolean)">
            <summary>
            Set to true to make the application fullscreen
            </summary>
        </member>
        <member name="P:AngeliA.Game.ScreenWidth">
            <inheritdoc cref="M:AngeliA.Game._GetScreenWidth"/>
        </member>
        <member name="P:AngeliA.Game.MonitorWidth">
            <summary>
            Width of the monitor which the application currently inside
            </summary>
        </member>
        <member name="M:AngeliA.Game._GetScreenWidth">
            <summary>
            Width of the application window
            </summary>
        </member>
        <member name="P:AngeliA.Game.ScreenHeight">
            <inheritdoc cref="M:AngeliA.Game._GetScreenHeight"/>
        </member>
        <member name="P:AngeliA.Game.MonitorHeight">
            <summary>
            Height of the monitor which the application currently inside
            </summary>
        </member>
        <member name="M:AngeliA.Game._GetScreenHeight">
            <summary>
            Height of the application window
            </summary>
        </member>
        <member name="M:AngeliA.Game.QuitApplication">
            <inheritdoc cref="M:AngeliA.Game._QuitApplication"/>
        </member>
        <member name="M:AngeliA.Game._QuitApplication">
            <summary>
            Make the application quit without any confirmation
            </summary>
        </member>
        <member name="M:AngeliA.Game.OpenUrl(System.String)">
            <inheritdoc cref="M:AngeliA.Game._OpenUrl(System.String)"/>
        </member>
        <member name="M:AngeliA.Game._OpenUrl(System.String)">
            <summary>
            Open the given url with OS default application
            </summary>
        </member>
        <member name="M:AngeliA.Game.ForceTargetFramerate(System.Int32,System.Int32)">
            <summary>
            Override the target framerate for specified frames long
            </summary>
        </member>
        <member name="M:AngeliA.Game.CancelForceTargetFramerate">
            <summary>
            Do not override the target framerate anymore
            </summary>
        </member>
        <member name="P:AngeliA.Game.IsWindowFocused">
            <inheritdoc cref="M:AngeliA.Game._IsWindowFocused"/>
        </member>
        <member name="M:AngeliA.Game._IsWindowFocused">
            <summary>
            True if the application window is currently focused
            </summary>
        </member>
        <member name="M:AngeliA.Game.MakeWindowFocused">
            <inheritdoc cref="M:AngeliA.Game._MakeWindowFocused"/>
        </member>
        <member name="M:AngeliA.Game._MakeWindowFocused">
            <summary>
            Make the application window focused
            </summary>
        </member>
        <member name="M:AngeliA.Game.SetWindowPosition(System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Game._SetWindowPosition(System.Int32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Game._SetWindowPosition(System.Int32,System.Int32)">
            <summary>
            Set application window position. (0,0) is top-left corner
            </summary>
        </member>
        <member name="M:AngeliA.Game.GetWindowPosition">
            <inheritdoc cref="M:AngeliA.Game._GetWindowPosition"/>
        </member>
        <member name="M:AngeliA.Game._GetWindowPosition">
            <summary>
            Get application window position. (0,0) is top-left corner
            </summary>
            <returns></returns>
        </member>
        <member name="M:AngeliA.Game.SetWindowSize(System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Game._SetWindowSize(System.Int32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.Game._SetWindowSize(System.Int32,System.Int32)">
            <summary>
            Set application window size. Use Game.GetMonitorWidth and Game.GetMonitorHeight to get the size of screen size
            </summary>
        </member>
        <member name="P:AngeliA.Game.CurrentMonitor">
            <inheritdoc cref="M:AngeliA.Game._GetCurrentMonitor"/>
        </member>
        <member name="M:AngeliA.Game._GetCurrentMonitor">
            <summary>
            Get index of the monitor which this application window currently in
            </summary>
        </member>
        <member name="M:AngeliA.Game.GetMonitorWidth(System.Int32)">
            <inheritdoc cref="M:AngeliA.Game._GetMonitorWidth(System.Int32)"/>
        </member>
        <member name="M:AngeliA.Game._GetMonitorWidth(System.Int32)">
            <summary>
            Get width of the current monitor. Use Game.CurrentMonitor to get the monitor index
            </summary>
        </member>
        <member name="M:AngeliA.Game.GetMonitorHeight(System.Int32)">
            <inheritdoc cref="M:AngeliA.Game._GetMonitorHeight(System.Int32)"/>
        </member>
        <member name="M:AngeliA.Game._GetMonitorHeight(System.Int32)">
            <summary>
            Get height of the current monitor. Use Game.CurrentMonitor to get the monitor index
            </summary>
        </member>
        <member name="P:AngeliA.Game.IsWindowDecorated">
            <summary>
            If the application window has title bar and border frame or not
            </summary>
        </member>
        <member name="M:AngeliA.Game._GetWindowDecorated">
            <summary>
            True if the application window is currently having Title bar and border frame
            </summary>
        </member>
        <member name="M:AngeliA.Game._SetWindowDecorated(System.Boolean)">
            <summary>
            Set to true to make the application window have title bar and border frame
            </summary>
        </member>
        <member name="P:AngeliA.Game.IsWindowTopmost">
            <summary>
            If the application window renders on top of all other windows
            </summary>
        </member>
        <member name="M:AngeliA.Game._GetWindowTopmost">
            <summary>
            True if the application window renders on top of all other windows
            </summary>
        </member>
        <member name="M:AngeliA.Game._SetWindowTopmost(System.Boolean)">
            <summary>
            Set to true to make the application window renders on top of all other windows
            </summary>
        </member>
        <member name="P:AngeliA.Game.IsWindowResizable">
            <summary>
            If the application window can be resize by the user
            </summary>
        </member>
        <member name="M:AngeliA.Game._GetWindowResizable">
            <summary>
            True if the application window can be resize by the user
            </summary>
        </member>
        <member name="M:AngeliA.Game._SetWindowResizable(System.Boolean)">
            <summary>
            Set to true to make the application window can be resize by the user
            </summary>
        </member>
        <member name="P:AngeliA.Game.IsWindowMaximized">
            <summary>
            If the application window is currently maximized
            </summary>
        </member>
        <member name="M:AngeliA.Game._GetWindowMaximized">
            <summary>
            True if the application window is currently maximized
            </summary>
        </member>
        <member name="M:AngeliA.Game._SetWindowMaximized(System.Boolean)">
            <summary>
            Set to true to make the application window is currently maximized
            </summary>
        </member>
        <member name="P:AngeliA.Game.IsWindowMinimized">
            <summary>
            If the application window is currently minimized
            </summary>
        </member>
        <member name="M:AngeliA.Game._GetWindowMinimized">
            <summary>
            True if the application window is currently minimized
            </summary>
        </member>
        <member name="M:AngeliA.Game._SetWindowMinimized(System.Boolean)">
            <summary>
            Set to true to make the application window is currently minimized
            </summary>
        </member>
        <member name="M:AngeliA.Game.SetWindowTitle(System.String)">
            <inheritdoc cref="M:AngeliA.Game._SetWindowTitle(System.String)"/>
        </member>
        <member name="M:AngeliA.Game._SetWindowTitle(System.String)">
            <summary>
            Set to title text of the application window
            </summary>
        </member>
        <member name="M:AngeliA.Game.SetWindowIcon(System.Int32)">
            <inheritdoc cref="M:AngeliA.Game._SetWindowIcon(System.Int32)"/>
        </member>
        <member name="M:AngeliA.Game._SetWindowIcon(System.Int32)">
            <summary>
            Set the icon of the application window using a loaded artwork sprite from the main sheet
            </summary>
        </member>
        <member name="M:AngeliA.Game.SetWindowMinSize(System.Int32)">
            <inheritdoc cref="M:AngeliA.Game._SetWindowMinSize(System.Int32)"/>
        </member>
        <member name="M:AngeliA.Game._SetWindowMinSize(System.Int32)">
            <summary>
            Set the minimal size limitation of the application window
            </summary>
        </member>
        <member name="M:AngeliA.Game.SetEventWaiting(System.Boolean)">
            <inheritdoc cref="M:AngeliA.Game._SetEventWaiting(System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Game._SetEventWaiting(System.Boolean)">
            <summary>
            Set to true to make the application only repaint when a user input happens
            </summary>
        </member>
        <member name="T:AngeliA.GUI">
            <summary>
            GUI for Game-User-Interface. Handles UI related rendering and interaction logic
            </summary>
        </member>
        <member name="P:AngeliA.GUI.IsTyping">
            <summary>
            True if the user is typing in text field at current frame
            </summary>
        </member>
        <member name="P:AngeliA.GUI.Enable">
            <summary>
            True if the current invoke GUI element should be interactable with user 
            </summary>
        </member>
        <member name="P:AngeliA.GUI.Interactable">
            <summary>
            False if the current invoke GUI element should be not interactable with user but still looks interactable
            </summary>
        </member>
        <member name="P:AngeliA.GUI.TypingTextFieldID">
            <summary>
            Control ID of the current typing input field
            </summary>
        </member>
        <member name="P:AngeliA.GUI.Color">
            <summary>
            Total color tint of the current invoke GUI element
            </summary>
        </member>
        <member name="P:AngeliA.GUI.BodyColor">
            <summary>
            Color tint of the current invoke GUI element's body
            </summary>
        </member>
        <member name="P:AngeliA.GUI.ContentColor">
            <summary>
            Color tint of the current invoke GUI element's content part
            </summary>
        </member>
        <member name="P:AngeliA.GUI.LabelWidth">
            <summary>
            Unified width of the label part of the current invoke GUI element
            </summary>
        </member>
        <member name="P:AngeliA.GUI.Skin">
            <summary>
            Built-in skin of the system
            </summary>
        </member>
        <member name="P:AngeliA.GUI.FieldHeight">
            <summary>
            Unified height of a standard field-like element should have
            </summary>
        </member>
        <member name="P:AngeliA.GUI.FieldPadding">
            <summary>
            Unified gap of a standard element should have
            </summary>
        </member>
        <member name="P:AngeliA.GUI.ToolbarSize">
            <summary>
            Unified size of a standard toolbar element should have
            </summary>
        </member>
        <member name="P:AngeliA.GUI.ScrollbarSize">
            <summary>
            Unified size of a standard scrollbar element should have
            </summary>
        </member>
        <member name="P:AngeliA.GUI.ContentVersion">
            <summary>
            Internal changing version of the GUI content
            </summary>
        </member>
        <member name="M:AngeliA.GUI.Unify(System.Int32)">
            <summary>
            Convert unified size into global size
            </summary>
        </member>
        <member name="M:AngeliA.GUI.UnifyMonitor(System.Int32)">
            <summary>
            Convert unified size into global size based on monitor size instead of application window height
            </summary>
        </member>
        <member name="M:AngeliA.GUI.UnifyBorder(AngeliA.Int4)">
            <summary>
            Convert unified size into global size
            </summary>
        </member>
        <member name="M:AngeliA.GUI.ReverseUnify(System.Int32)">
            <summary>
            Convert global size into unified size
            </summary>
        </member>
        <member name="M:AngeliA.GUI.ReverseUnifyMonitor(System.Int32)">
            <summary>
            Convert global size into unified size based on monitor size instead of application window height
            </summary>
        </member>
        <member name="M:AngeliA.GUI.GetContentRect(AngeliA.IRect,AngeliA.GUIStyle,AngeliA.GUIState)">
            <summary>
            Get rect position in global space for content inside a GUI element
            </summary>
        </member>
        <member name="M:AngeliA.GUI.DrawStyleBody(AngeliA.IRect,AngeliA.GUIStyle,AngeliA.GUIState)">
            <inheritdoc cref="M:AngeliA.GUI.DrawStyleBody(AngeliA.IRect,AngeliA.GUIStyle,AngeliA.GUIState,AngeliA.Color32)"/>
        </member>
        <member name="M:AngeliA.GUI.DrawStyleBody(AngeliA.IRect,AngeliA.GUIStyle,AngeliA.GUIState,AngeliA.Color32)">
            <summary>
            Draw the given style as body of a GUI element
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="style"></param>
            <param name="state"></param>
            <param name="tint">Color tint that apply on this element</param>
        </member>
        <member name="M:AngeliA.GUI.DrawStyleContent(AngeliA.IRect,System.Int32,AngeliA.GUIStyle,AngeliA.GUIState,System.Boolean,System.Boolean)">
            <summary>
            Draw the given style as content of a GUI element
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="sprite">Artwork sprite</param>
            <param name="style"></param>
            <param name="state"></param>
            <param name="ignoreSlice">True if not apply 9-slice logic</param>
            <param name="fit">True if keep the aspect ratio of the sprite</param>
        </member>
        <member name="M:AngeliA.GUI.DrawSlice(System.Int32,AngeliA.IRect)">
            <summary>
            Draw the artwork sprite with 9-slice logic. Border size will be unified.
            </summary>
            <param name="spriteID">ID of the artwork sprite</param>
            <param name="rect">Rect position in global space</param>
            <returns>Rendering cells of this element</returns>
        </member>
        <member name="M:AngeliA.GUI.DrawSlice(AngeliA.AngeSprite,AngeliA.IRect)">
            <summary>
            Draw the artwork sprite with 9-slice logic. Border size will be unified.
            </summary>
            <param name="sprite">Artwork sprite</param>
            <param name="rect">Rect position in global space</param>
            <returns>Rendering cells of this element</returns>
        </member>
        <member name="M:AngeliA.GUI.StartTyping(System.Int32)">
            <summary>
            Procedurelly start typing with an input field
            </summary>
            <param name="controlID">Control ID of the target input field</param>
        </member>
        <member name="M:AngeliA.GUI.CancelTyping">
            <summary>
            Stop typing on any input field
            </summary>
        </member>
        <member name="M:AngeliA.GUI.SmallLabel(AngeliA.IRect,System.String)">
            <inheritdoc cref="M:AngeliA.GUI.LabelLogic(AngeliA.IRect,System.String,System.Char[],AngeliA.GUIStyle,AngeliA.GUIState,System.Int32,System.Int32,System.Boolean,AngeliA.IRect@,AngeliA.IRect@,System.Int32@,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.SmallLabel(AngeliA.IRect,System.Char[])">
            <inheritdoc cref="M:AngeliA.GUI.LabelLogic(AngeliA.IRect,System.String,System.Char[],AngeliA.GUIStyle,AngeliA.GUIState,System.Int32,System.Int32,System.Boolean,AngeliA.IRect@,AngeliA.IRect@,System.Int32@,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.SmallLabel(AngeliA.IRect,System.String,AngeliA.IRect@)">
            <inheritdoc cref="M:AngeliA.GUI.LabelLogic(AngeliA.IRect,System.String,System.Char[],AngeliA.GUIStyle,AngeliA.GUIState,System.Int32,System.Int32,System.Boolean,AngeliA.IRect@,AngeliA.IRect@,System.Int32@,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.SmallLabel(AngeliA.IRect,System.Char[],AngeliA.IRect@)">
            <inheritdoc cref="M:AngeliA.GUI.LabelLogic(AngeliA.IRect,System.String,System.Char[],AngeliA.GUIStyle,AngeliA.GUIState,System.Int32,System.Int32,System.Boolean,AngeliA.IRect@,AngeliA.IRect@,System.Int32@,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.SmallLabel(AngeliA.IRect,System.String,System.Int32,System.Boolean,AngeliA.IRect@,System.Int32@)">
            <inheritdoc cref="M:AngeliA.GUI.LabelLogic(AngeliA.IRect,System.String,System.Char[],AngeliA.GUIStyle,AngeliA.GUIState,System.Int32,System.Int32,System.Boolean,AngeliA.IRect@,AngeliA.IRect@,System.Int32@,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.SmallLabel(AngeliA.IRect,System.String,System.Int32,System.Int32,System.Boolean,AngeliA.IRect@,AngeliA.IRect@,System.Int32@)">
            <inheritdoc cref="M:AngeliA.GUI.LabelLogic(AngeliA.IRect,System.String,System.Char[],AngeliA.GUIStyle,AngeliA.GUIState,System.Int32,System.Int32,System.Boolean,AngeliA.IRect@,AngeliA.IRect@,System.Int32@,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.Label(AngeliA.IRect,System.String,AngeliA.GUIStyle,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.LabelLogic(AngeliA.IRect,System.String,System.Char[],AngeliA.GUIStyle,AngeliA.GUIState,System.Int32,System.Int32,System.Boolean,AngeliA.IRect@,AngeliA.IRect@,System.Int32@,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.Label(AngeliA.IRect,System.Char[],AngeliA.GUIStyle,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.LabelLogic(AngeliA.IRect,System.String,System.Char[],AngeliA.GUIStyle,AngeliA.GUIState,System.Int32,System.Int32,System.Boolean,AngeliA.IRect@,AngeliA.IRect@,System.Int32@,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.Label(AngeliA.IRect,System.String,AngeliA.IRect@,AngeliA.GUIStyle,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.LabelLogic(AngeliA.IRect,System.String,System.Char[],AngeliA.GUIStyle,AngeliA.GUIState,System.Int32,System.Int32,System.Boolean,AngeliA.IRect@,AngeliA.IRect@,System.Int32@,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.Label(AngeliA.IRect,System.Char[],AngeliA.IRect@,AngeliA.GUIStyle,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.LabelLogic(AngeliA.IRect,System.String,System.Char[],AngeliA.GUIStyle,AngeliA.GUIState,System.Int32,System.Int32,System.Boolean,AngeliA.IRect@,AngeliA.IRect@,System.Int32@,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.Label(AngeliA.IRect,System.String,System.Int32,System.Boolean,AngeliA.IRect@,System.Int32@,AngeliA.GUIStyle,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.LabelLogic(AngeliA.IRect,System.String,System.Char[],AngeliA.GUIStyle,AngeliA.GUIState,System.Int32,System.Int32,System.Boolean,AngeliA.IRect@,AngeliA.IRect@,System.Int32@,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.Label(AngeliA.IRect,System.String,System.Int32,System.Int32,System.Boolean,AngeliA.IRect@,AngeliA.IRect@,System.Int32@,AngeliA.GUIStyle,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.LabelLogic(AngeliA.IRect,System.String,System.Char[],AngeliA.GUIStyle,AngeliA.GUIState,System.Int32,System.Int32,System.Boolean,AngeliA.IRect@,AngeliA.IRect@,System.Int32@,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.LabelLogic(AngeliA.IRect,System.String,System.Char[],AngeliA.GUIStyle,AngeliA.GUIState,System.Int32,System.Int32,System.Boolean,AngeliA.IRect@,AngeliA.IRect@,System.Int32@,System.Int32)">
            <summary>
            Draw a text content on screen
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="text">Text content</param>
            <param name="chars">Char array as text content</param>
            <param name="style"></param>
            <param name="state"></param>
            <param name="beamIndex">Index of the typing beam inside the text content</param>
            <param name="startIndex">Label content start with this index</param>
            <param name="drawInvisibleChar">True if invisible characters should make the internal iteration grow</param>
            <param name="bounds">Total rendering boundary of the characters in global space</param>
            <param name="beamRect">Rendering rect position of the typing beam</param>
            <param name="endIndex">Last rendered character index</param>
            <param name="charSize">Unified height of the character</param>
        </member>
        <member name="M:AngeliA.GUI.ScrollLabel(System.String,AngeliA.IRect,System.Int32,AngeliA.GUIStyle)">
            <summary>
            Label that scroll the content inside verticaly
            </summary>
            <param name="text">Text content</param>
            <param name="rect">Rect position in global space</param>
            <param name="scrollPosition">Offset Y position in global space</param>
            <param name="style"></param>
            <returns>The new scrolling position</returns>
        </member>
        <member name="M:AngeliA.GUI.BackgroundLabel(AngeliA.IRect,System.Char[],AngeliA.Color32,System.Int32,AngeliA.GUIStyle)">
            <inheritdoc cref="M:AngeliA.GUI.BackgroundLabel(AngeliA.IRect,System.String,AngeliA.Color32,AngeliA.IRect@,System.Int32,System.Boolean,AngeliA.GUIStyle)"/>
        </member>
        <member name="M:AngeliA.GUI.BackgroundLabel(AngeliA.IRect,System.Char[],AngeliA.Color32,AngeliA.IRect@,System.Int32,AngeliA.GUIStyle)">
            <inheritdoc cref="M:AngeliA.GUI.BackgroundLabel(AngeliA.IRect,System.String,AngeliA.Color32,AngeliA.IRect@,System.Int32,System.Boolean,AngeliA.GUIStyle)"/>
        </member>
        <member name="M:AngeliA.GUI.BackgroundLabel(AngeliA.IRect,System.String,AngeliA.Color32,System.Int32,System.Boolean,AngeliA.GUIStyle)">
            <inheritdoc cref="M:AngeliA.GUI.BackgroundLabel(AngeliA.IRect,System.String,AngeliA.Color32,AngeliA.IRect@,System.Int32,System.Boolean,AngeliA.GUIStyle)"/>
        </member>
        <member name="M:AngeliA.GUI.BackgroundLabel(AngeliA.IRect,System.String,AngeliA.Color32,AngeliA.IRect@,System.Int32,System.Boolean,AngeliA.GUIStyle)">
            <summary>
            Label with a color block as background
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="text">Text content</param>
            <param name="backgroundColor">Color of the background block</param>
            <param name="bounds">Rendering boundary of the text content in global space</param>
            <param name="backgroundPadding">Border size of the background block in unified size</param>
            <param name="forceInside">True if the text content clamp inside the background block</param>
            <param name="style"></param>
        </member>
        <member name="M:AngeliA.GUI.ShadowLabel(AngeliA.IRect,System.Char[],System.Int32,AngeliA.GUIStyle)">
            <inheritdoc cref="M:AngeliA.GUI.ShadowLabel(AngeliA.IRect,System.String,System.Int32,AngeliA.GUIStyle)"/>
        </member>
        <member name="M:AngeliA.GUI.ShadowLabel(AngeliA.IRect,System.String,System.Int32,AngeliA.GUIStyle)">
            <summary>
            Label with shadow below
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="text">Text content</param>
            <param name="shadowDistance">Offset Y of the shadow in unified space</param>
            <param name="style"></param>
        </member>
        <member name="M:AngeliA.GUI.IntLabel(AngeliA.IRect,System.Int32,AngeliA.GUIStyle)">
            <inheritdoc cref="M:AngeliA.GUI.IntLabel(AngeliA.IRect,System.Int32,AngeliA.IRect@,AngeliA.GUIStyle)"/>
        </member>
        <member name="M:AngeliA.GUI.IntLabel(AngeliA.IRect,System.Int32,AngeliA.IRect@,AngeliA.GUIStyle)">
            <summary>
            Label for intager content
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="number">Intager content</param>
            <param name="bounds">Rendering boundary of the text content in global space</param>
            <param name="style"></param>
        </member>
        <member name="M:AngeliA.GUI.FrameBasedIntLabel(AngeliA.IRect,AngeliA.FrameBasedInt,AngeliA.Color32,AngeliA.Color32,AngeliA.GUIStyle)">
            <inheritdoc cref="M:AngeliA.GUI.FrameBasedIntLabel(AngeliA.IRect,AngeliA.FrameBasedInt,AngeliA.Color32,AngeliA.Color32,AngeliA.IRect@,AngeliA.GUIStyle)"/>
        </member>
        <member name="M:AngeliA.GUI.FrameBasedIntLabel(AngeliA.IRect,AngeliA.FrameBasedInt,AngeliA.Color32,AngeliA.Color32,AngeliA.IRect@,AngeliA.GUIStyle)">
            <summary>
            Label for draw FrameBasedInt as a buff
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="number">Intager content</param>
            <param name="greaterColor">Text color for the extra part when final value is greater</param>
            <param name="lessColor">Text color for the extra part when final value is less</param>
            <param name="bounds">Rendering boundary of the text content in global space</param>
            <param name="style"></param>
        </member>
        <member name="M:AngeliA.GUI.SmallLinkButton(AngeliA.IRect,System.String,System.Boolean,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.LinkButton(AngeliA.IRect,System.String,AngeliA.IRect@,AngeliA.GUIStyle,System.Boolean,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.SmallLinkButton(AngeliA.IRect,System.String,AngeliA.IRect@,System.Boolean,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.LinkButton(AngeliA.IRect,System.String,AngeliA.IRect@,AngeliA.GUIStyle,System.Boolean,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.LinkButton(AngeliA.IRect,System.String,AngeliA.GUIStyle,System.Boolean,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.LinkButton(AngeliA.IRect,System.String,AngeliA.IRect@,AngeliA.GUIStyle,System.Boolean,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.LinkButton(AngeliA.IRect,System.String,AngeliA.IRect@,AngeliA.GUIStyle,System.Boolean,System.Int32)">
            <summary>
            Button that behave like a link
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="label">Text content</param>
            <param name="bounds">Boundary of the rendered content in global space</param>
            <param name="labelStyle">GUI style for the label content</param>
            <param name="useUnderLine">True if draw a line below the text</param>
            <param name="charSize">Character size in unified space</param>
            <returns>True if the link is pressed at current frame</returns>
        </member>
        <member name="M:AngeliA.GUI.DarkButton(AngeliA.IRect,System.String,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.BlankButton(AngeliA.IRect,AngeliA.GUIState@)"/>
        </member>
        <member name="M:AngeliA.GUI.DarkButton(AngeliA.IRect,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.BlankButton(AngeliA.IRect,AngeliA.GUIState@)"/>
        </member>
        <member name="M:AngeliA.GUI.Button(AngeliA.IRect,System.String,AngeliA.GUIStyle,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.BlankButton(AngeliA.IRect,AngeliA.GUIState@)"/>
        </member>
        <member name="M:AngeliA.GUI.Button(AngeliA.IRect,System.String,AngeliA.GUIState@,AngeliA.GUIStyle,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.BlankButton(AngeliA.IRect,AngeliA.GUIState@)"/>
        </member>
        <member name="M:AngeliA.GUI.Button(AngeliA.IRect,System.Int32,AngeliA.GUIStyle)">
            <inheritdoc cref="M:AngeliA.GUI.BlankButton(AngeliA.IRect,AngeliA.GUIState@)"/>
        </member>
        <member name="M:AngeliA.GUI.Button(AngeliA.IRect,System.Int32,AngeliA.GUIState@,AngeliA.GUIStyle)">
            <inheritdoc cref="M:AngeliA.GUI.BlankButton(AngeliA.IRect,AngeliA.GUIState@)"/>
        </member>
        <member name="M:AngeliA.GUI.BlankButton(AngeliA.IRect,AngeliA.GUIState@)">
            <summary>
            GUI element that behave like a button
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="state"></param>
            <param name="icon">Artwork sprite ID for the icon inside this button</param>
            <param name="label">Text content inside this button</param>
            <param name="charSize">Character size of the label in unified space</param>
            <returns>True if the button is pressed at current frame</returns>
        </member>
        <member name="M:AngeliA.GUI.IconToggle(AngeliA.IRect,System.Boolean,System.Int32,AngeliA.GUIStyle,AngeliA.GUIStyle)">
            <inheritdoc cref="M:AngeliA.GUI.BlankToggle(AngeliA.IRect,System.Boolean,AngeliA.GUIState@)"/>
        </member>
        <member name="M:AngeliA.GUI.ToggleLeft(AngeliA.IRect,System.Boolean,System.String,AngeliA.GUIStyle,AngeliA.GUIStyle,AngeliA.GUIStyle)">
            <inheritdoc cref="M:AngeliA.GUI.BlankToggle(AngeliA.IRect,System.Boolean,AngeliA.GUIState@)"/>
        </member>
        <member name="M:AngeliA.GUI.ToggleButton(AngeliA.IRect,System.Boolean,System.String,AngeliA.GUIStyle)">
            <inheritdoc cref="M:AngeliA.GUI.BlankToggle(AngeliA.IRect,System.Boolean,AngeliA.GUIState@)"/>
        </member>
        <member name="M:AngeliA.GUI.ToggleButton(AngeliA.IRect,System.Boolean,System.Int32,AngeliA.GUIStyle)">
            <inheritdoc cref="M:AngeliA.GUI.BlankToggle(AngeliA.IRect,System.Boolean,AngeliA.GUIState@)"/>
        </member>
        <member name="M:AngeliA.GUI.ToggleFold(AngeliA.IRect,System.Boolean@,System.Int32,System.String,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.BlankToggle(AngeliA.IRect,System.Boolean,AngeliA.GUIState@)"/>
        </member>
        <member name="M:AngeliA.GUI.Toggle(AngeliA.IRect,System.Boolean,AngeliA.GUIStyle,AngeliA.GUIStyle)">
            <inheritdoc cref="M:AngeliA.GUI.BlankToggle(AngeliA.IRect,System.Boolean,AngeliA.GUIState@)"/>
        </member>
        <member name="M:AngeliA.GUI.Toggle(AngeliA.IRect,System.Boolean,System.String,AngeliA.GUIStyle,AngeliA.GUIStyle,AngeliA.GUIStyle)">
            <inheritdoc cref="M:AngeliA.GUI.BlankToggle(AngeliA.IRect,System.Boolean,AngeliA.GUIState@)"/>
        </member>
        <member name="M:AngeliA.GUI.BlankToggle(AngeliA.IRect,System.Boolean,AngeliA.GUIState@)">
            <summary>
            Draw a GUI element with a check box and check mark
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="isOn">True if the toggle is checked</param>
            <param name="icon">Artwork sprite of the content inside the toggle</param>
            <param name="label">Text content inside the toggle</param>
            <param name="markStyle">GUI style of the check mark</param>
            <param name="iconStyle">GUI style of the icon content</param>
            <param name="labelStyle">GUI style of the text label</param>
            <param name="bodyStyle">GUI style of the toggle box</param>
            <param name="folding">True if the panel if folded</param>
            <param name="state"></param>
            <returns>True if the toggle is checked</returns>
        </member>
        <member name="M:AngeliA.GUI.Icon(AngeliA.IRect,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.Icon(AngeliA.IRect,System.Int32,AngeliA.GUIStyle,AngeliA.GUIState)"/>
        </member>
        <member name="M:AngeliA.GUI.Icon(AngeliA.IRect,System.Int32,AngeliA.GUIStyle,AngeliA.GUIState)">
            <summary>
            Draw a artwork sprite as an icon
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="sprite">Artwork sprite</param>
            <param name="style"></param>
            <param name="state"></param>
        </member>
        <member name="M:AngeliA.GUI.PopupTriangleIcon(AngeliA.IRect,System.Int32)">
            <summary>
            Draw the triangle icon inside a popup button
            </summary>
            <param name="rect">Rect position of the whole button in global space</param>
            <param name="iconSprite">Artwork sprite ID. Leave it 0 to use the built-in sprite</param>
        </member>
        <member name="M:AngeliA.GUI.SmallIntDial(AngeliA.IRect,System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.IntDial(AngeliA.IRect,System.Int32,System.Boolean@,System.String,AngeliA.GUIStyle,AngeliA.GUIStyle,AngeliA.GUIStyle,System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.SmallIntDial(AngeliA.IRect,System.Int32,System.Boolean@,System.String,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.IntDial(AngeliA.IRect,System.Int32,System.Boolean@,System.String,AngeliA.GUIStyle,AngeliA.GUIStyle,AngeliA.GUIStyle,System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.IntDial(AngeliA.IRect,System.Int32,System.String,AngeliA.GUIStyle,AngeliA.GUIStyle,AngeliA.GUIStyle,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.IntDial(AngeliA.IRect,System.Int32,System.Boolean@,System.String,AngeliA.GUIStyle,AngeliA.GUIStyle,AngeliA.GUIStyle,System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.IntDial(AngeliA.IRect,System.Int32,System.Boolean@,System.String,AngeliA.GUIStyle,AngeliA.GUIStyle,AngeliA.GUIStyle,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a label display an intager with two buttons to add and remove value
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="value">The intager value</param>
            <param name="changed">True if the value is changed in this frame</param>
            <param name="label">Text content displays on the left</param>
            <param name="labelStyle">GUI style for the text label</param>
            <param name="bodyStyle">GUI style for the int field</param>
            <param name="dialButtonStyle">GUI style for the buttons</param>
            <param name="delta">How many value does it add/remove when the button get pressed</param>
            <param name="min">Minimal value for the intager</param>
            <param name="max">Maximal value for the intager</param>
            <returns>New value after modified</returns>
        </member>
        <member name="M:AngeliA.GUI.ScrollBar(System.Int32,AngeliA.IRect,System.Int32,System.Int32,System.Int32,AngeliA.GUIStyle,AngeliA.GUIStyle,System.Boolean)">
            <summary>
            Draw a bar that slide when user drag the handle inside
            </summary>
            <param name="controlID">ID to identify the interaction of this element</param>
            <param name="contentRect">Rect position of the content panel in global space</param>
            <param name="position">Scrolling offset position in global space</param>
            <param name="totalSize">Size of all content in global space</param>
            <param name="pageSize">Size of the displaying content in global space</param>
            <param name="handleStyle">GUI style for the handle</param>
            <param name="bgStyle">GUI style for the background</param>
            <param name="vertical">True if it scrolls in vertical direction</param>
            <returns>New position value</returns>
        </member>
        <member name="M:AngeliA.GUI.FilledSlider(System.Int32,AngeliA.IRect,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.BlankSlider(System.Int32,AngeliA.IRect,System.Int32,System.Int32,System.Int32,AngeliA.GUIState@,System.Boolean,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.HandleSlider(System.Int32,AngeliA.IRect,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.BlankSlider(System.Int32,AngeliA.IRect,System.Int32,System.Int32,System.Int32,AngeliA.GUIState@,System.Boolean,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.Slider(System.Int32,AngeliA.IRect,System.Int32,System.Int32,System.Int32,AngeliA.GUIStyle,AngeliA.GUIStyle,AngeliA.GUIStyle,System.Boolean,System.Int32)">
            <inheritdoc cref="M:AngeliA.GUI.BlankSlider(System.Int32,AngeliA.IRect,System.Int32,System.Int32,System.Int32,AngeliA.GUIState@,System.Boolean,System.Int32)"/>
        </member>
        <member name="M:AngeliA.GUI.BlankSlider(System.Int32,AngeliA.IRect,System.Int32,System.Int32,System.Int32,AngeliA.GUIState@,System.Boolean,System.Int32)">
            <summary>
            Draw a slider that user can drag with mouse to change a intager value
            </summary>
            <param name="controlID">ID to identify the interaction of this element</param>
            <param name="rect">Rect position in global space</param>
            <param name="value"></param>
            <param name="min">Minimal limitation for the value</param>
            <param name="max">Maximal limitation for the value</param>
            <param name="state"></param>
            <param name="vertical">True if this slider slide verticaly</param>
            <param name="step">Smooth step of the sliding. 0 means no step.</param>
            <returns>New value after slide</returns>
        </member>
        <member name="M:AngeliA.GUI.HighlightCursor(System.Int32,AngeliA.IRect)">
            <inheritdoc cref="M:AngeliA.GUI.HighlightCursor(System.Int32,AngeliA.IRect,AngeliA.Color32)"/>
        </member>
        <member name="M:AngeliA.GUI.HighlightCursor(System.Int32,AngeliA.IRect,AngeliA.Color32)">
            <summary>
            Draw an animated cursor
            </summary>
            <param name="spriteID">Artwork sprite ID</param>
            <param name="rect">Rect position in global space</param>
            <param name="color">Color tint for this element only</param>
        </member>
        <member name="M:AngeliA.GUI.VerticalColorField(AngeliA.ColorF,AngeliA.IRect,System.String,AngeliA.GUIStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{AngeliA.ColorF})">
            <inheritdoc cref="M:AngeliA.GUI.ColorFieldInternal(AngeliA.ColorF,System.Nullable{AngeliA.ColorF},AngeliA.IRect,System.String,AngeliA.GUIStyle,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.GUI.HorizontalColorField(AngeliA.ColorF,AngeliA.IRect,System.String,AngeliA.GUIStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{AngeliA.ColorF})">
            <inheritdoc cref="M:AngeliA.GUI.ColorFieldInternal(AngeliA.ColorF,System.Nullable{AngeliA.ColorF},AngeliA.IRect,System.String,AngeliA.GUIStyle,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.GUI.VerticalColorField(AngeliA.ColorF,AngeliA.IRect,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{AngeliA.ColorF})">
            <inheritdoc cref="M:AngeliA.GUI.ColorFieldInternal(AngeliA.ColorF,System.Nullable{AngeliA.ColorF},AngeliA.IRect,System.String,AngeliA.GUIStyle,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.GUI.HorizontalColorField(AngeliA.ColorF,AngeliA.IRect,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{AngeliA.ColorF})">
            <inheritdoc cref="M:AngeliA.GUI.ColorFieldInternal(AngeliA.ColorF,System.Nullable{AngeliA.ColorF},AngeliA.IRect,System.String,AngeliA.GUIStyle,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.GUI.ColorFieldInternal(AngeliA.ColorF,System.Nullable{AngeliA.ColorF},AngeliA.IRect,System.String,AngeliA.GUIStyle,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Boolean)">
            <summary>
            Draw a GUI element to edit color value
            </summary>
            <param name="color">The color value</param>
            <param name="defaultColor">Default value will set to the color value when user press the reset button. Set to null when you don't want the reset button.</param>
            <param name="rect">Rect position in global space</param>
            <param name="label">Text content display on left of the field</param>
            <param name="labelStyle">GUI style for the label</param>
            <param name="hsv">True if the field use HSV instead of RGB</param>
            <param name="alpha">True if the field include alpha value</param>
            <param name="horizontal">True if the field display horizontaly</param>
            <param name="hueStep">Smooth step for HUE slider. 0 means no step</param>
            <param name="step">Smooth step for other sliders. 0 means no step</param>
            <param name="folded">True if the field is folded</param>
            <param name="stepped">True if the field use smooth step when dragging</param>
            <returns>New color after edit</returns>
        </member>
        <member name="M:AngeliA.GUI.BeginChangeCheck">
            <summary>
            Start the change check. Use GUI.EndChangeCheck to get the result
            </summary>
        </member>
        <member name="M:AngeliA.GUI.EndChangeCheck">
            <summary>
            True if any GUI element changed it's value during the change check
            </summary>
        </member>
        <member name="M:AngeliA.GUI.SetChange">
            <summary>
            Mark the GUI system as changed
            </summary>
        </member>
        <member name="M:AngeliA.GUI.SmallInputField(System.Int32,AngeliA.IRect,System.String,System.Nullable{AngeliA.Color32})">
            <inheritdoc cref="M:AngeliA.GUI.InputField(System.Int32,AngeliA.IRect,System.String,System.Boolean@,System.Boolean@,AngeliA.GUIStyle,System.Nullable{AngeliA.Color32})"/>
        </member>
        <member name="M:AngeliA.GUI.SmallInputField(System.Int32,AngeliA.IRect,System.String,System.Boolean@,System.Boolean@,System.Nullable{AngeliA.Color32})">
            <inheritdoc cref="M:AngeliA.GUI.InputField(System.Int32,AngeliA.IRect,System.String,System.Boolean@,System.Boolean@,AngeliA.GUIStyle,System.Nullable{AngeliA.Color32})"/>
        </member>
        <member name="M:AngeliA.GUI.InputField(System.Int32,AngeliA.IRect,System.String,AngeliA.GUIStyle,System.Nullable{AngeliA.Color32})">
            <inheritdoc cref="M:AngeliA.GUI.InputField(System.Int32,AngeliA.IRect,System.String,System.Boolean@,System.Boolean@,AngeliA.GUIStyle,System.Nullable{AngeliA.Color32})"/>
        </member>
        <member name="M:AngeliA.GUI.InputField(System.Int32,AngeliA.IRect,System.String,System.Boolean@,System.Boolean@,AngeliA.GUIStyle,System.Nullable{AngeliA.Color32})">
            <summary>
            Draw a GUI element to allow the user to edit a text content
            </summary>
            <param name="controlID">ID to identify the interaction of this element</param>
            <param name="rect">Rect position in global space</param>
            <param name="text">Input content</param>
            <param name="changed">True if the field changed it's content at current frame</param>
            <param name="confirm">True if the field stop edit at current frame</param>
            <param name="bodyStyle"></param>
            <param name="selectionColor">Color of the selection block</param>
            <returns>Editted text content</returns>
        </member>
        <member name="F:AngeliA.GUISkin.Default">
            <summary>
            Default gui skin instance
            </summary>
        </member>
        <member name="F:AngeliA.GUISkin.Name">
            <summary>
            Name of this gui skin
            </summary>
        </member>
        <member name="T:AngeliA.AntiBuffItem`1">
            <summary>
            A type of item that prevents a given type of buff from giving to the host
            </summary>
            <typeparam name="B">Type of the buff to prevent</typeparam>
        </member>
        <member name="T:AngeliA.AntiBuffItem`1.TriggerMode">
            <summary>
            How anti buff item been trigger
            </summary>
        </member>
        <member name="P:AngeliA.AntiBuffItem`1.Mode">
            <summary>
            How this item been trigger
            </summary>
        </member>
        <member name="P:AngeliA.AntiBuffItem`1.Duration">
            <summary>
            How long does it work after been use in frame
            </summary>
        </member>
        <member name="M:AngeliA.AntiBuffItem`1.OnAntiBuffTriggerd(AngeliA.Character)">
            <summary>
            This function is called when the item is triggered
            </summary>
            <param name="target">Target character that will get the effect</param>
        </member>
        <member name="T:AngeliA.BlockBuilder">
            <summary>
            Item that represent a map block inside inventory. Also handles the build block to map logic
            </summary>
        </member>
        <member name="P:AngeliA.BlockBuilder.BlockID">
            <summary>
            ID of the block it holds
            </summary>
        </member>
        <member name="P:AngeliA.BlockBuilder.BlockType">
            <summary>
            Type of the block it holds
            </summary>
        </member>
        <member name="T:AngeliA.BlockPicker">
            <summary>
            Item that represent a map tool inside inventory. Also handles the pick block from map logic
            </summary>
        </member>
        <member name="P:AngeliA.BlockPicker.AllowPickLevelBlock">
            <summary>
            True if the tool can pick level blocks from map
            </summary>
        </member>
        <member name="P:AngeliA.BlockPicker.AllowPickBackgroundBlock">
            <summary>
            True if the tool can pick background blocks from map
            </summary>
        </member>
        <member name="P:AngeliA.BlockPicker.AllowPickBlockEntity">
            <summary>
            True if the tool can pick entity blocks from map
            </summary>
        </member>
        <member name="P:AngeliA.BlockPicker.DropItemAfterPicked">
            <summary>
            True if the tool create an ItemHolder holds the block after pick the block
            </summary>
        </member>
        <member name="P:AngeliA.BlockPicker.UseMouseToPick">
            <summary>
            True if the tool allow user to use mouse 
            </summary>
        </member>
        <member name="P:AngeliA.BlockPicker.MouseUnitRange">
            <summary>
            Range limitation for mouse in unit space
            </summary>
        </member>
        <member name="M:AngeliA.BlockPicker.DrawPickTargetHighlight(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draw the UI cursor for target block
            </summary>
            <param name="unitX">Position in unit space</param>
            <param name="unitY">Position in unit space</param>
            <param name="hasTarget">True if target map block founded</param>
        </member>
        <member name="T:AngeliA.BodyGadgetItem">
            <summary>
            A type of item that holds a body gadget.
            </summary>
            <param name="id">ID of the body gadget it holds</param>
        </member>
        <member name="M:AngeliA.BodyGadgetItem.#ctor(System.Int32)">
            <summary>
            A type of item that holds a body gadget.
            </summary>
            <param name="id">ID of the body gadget it holds</param>
        </member>
        <member name="P:AngeliA.BodyGadgetItem.GadgetID">
            <summary>
            ID of the body gadget it holds
            </summary>
        </member>
        <member name="T:AngeliA.BodySetItem">
            <summary>
            Represent an item that holds a whole set of bodypart for pose-style characters to apply
            </summary>
        </member>
        <member name="P:AngeliA.BodySetItem.TargetCharacterID">
            <summary>
            ID of the target character for the bodypart it holds
            </summary>
        </member>
        <member name="P:AngeliA.BodySetItem.TargetCharacterName">
            <summary>
            Name of the target character for the bodypart it holds
            </summary>
        </member>
        <member name="P:AngeliA.BodySetItem.Data">
            <summary>
            Rendering config data for the bodypart it holds
            </summary>
        </member>
        <member name="M:AngeliA.BodySetItem.ForAllBodySetCharacterType">
            <summary>
            Iterate through all body-set the current project have
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameInitializeLater(4096)]
            	internal static void OnGameUpdate () {
            		Debug.Log("All body-set inside this game:");
            		foreach (var (id, (type, typeName)) in BodySetItem.ForAllBodySetCharacterType()) {
            			string setName = ItemSystem.GetItemDisplayName(id);
            			Debug.Log($"{setName} - {typeName}");
            		}
            	}
            
            }
            </code></example>
        </member>
        <member name="M:AngeliA.BodySetItem.GetDisplayName(System.String,System.Int32@)">
            <summary>
            Get display name for bodyset from language system
            </summary>
        </member>
        <member name="T:AngeliA.BuffItem`1">
            <summary>
            Item that gives the holder a buff
            </summary>
            <typeparam name="B">Type of the buff</typeparam>
        </member>
        <member name="T:AngeliA.BuffItem">
            <summary>
            Item that gives the holder a buff
            </summary>
        </member>
        <member name="P:AngeliA.BuffItem.BuffID">
            <summary>
            Type of the buff
            </summary>
        </member>
        <member name="T:AngeliA.ClothItem">
            <summary>
            Represent an item that holds a cloth for pose-style character to wear. Unlike body armor, cloth do not occupy equipment slot.
            </summary>
            <param name="id">ID of the cloth</param>
        </member>
        <member name="M:AngeliA.ClothItem.#ctor(System.Int32)">
            <summary>
            Represent an item that holds a cloth for pose-style character to wear. Unlike body armor, cloth do not occupy equipment slot.
            </summary>
            <param name="id">ID of the cloth</param>
        </member>
        <member name="P:AngeliA.ClothItem.ClothID">
            <summary>
            ID of the cloth
            </summary>
        </member>
        <member name="T:AngeliA.EquipmentType">
            <summary>
            Represent the type of the equipment
            </summary>
        </member>
        <member name="F:AngeliA.EquipmentType.HandTool">
            <summary>
            Equipment that equip into hand slot and can be use as a tool
            </summary>
        </member>
        <member name="F:AngeliA.EquipmentType.BodyArmor">
            <summary>
            Equipment that equip into body slot
            </summary>
        </member>
        <member name="F:AngeliA.EquipmentType.Helmet">
            <summary>
            Equipment that equip into head slot 
            </summary>
        </member>
        <member name="F:AngeliA.EquipmentType.Shoes">
            <summary>
            Equipment that equip into foot slot
            </summary>
        </member>
        <member name="F:AngeliA.EquipmentType.Gloves">
            <summary>
            Equipment that equip into hand slot
            </summary>
        </member>
        <member name="F:AngeliA.EquipmentType.Jewelry">
            <summary>
            Equipment that equip into jewelry slot. Do not render onto the character by default.
            </summary>
        </member>
        <member name="T:AngeliA.Equipment">
            <summary>
            Represent an item that can be equip into a slot for a character
            </summary>
        </member>
        <member name="P:AngeliA.Equipment.EquipmentType">
            <summary>
            Which type is this quipment
            </summary>
        </member>
        <member name="T:AngeliA.Food">
            <summary>
            Item that represent food
            </summary>
        </member>
        <member name="T:AngeliA.HandTool">
            <summary>
            Tool equipment that can be equip in hand slot of a character
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.SpriteID">
            <summary>
            Artwork sprite ID for render this tool
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.PerformDelayFrame">
            <summary>
            How many frame does the internal tool logic invoke after character start to use the tool
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.PerformDelayRate">
            <summary>
            How many frame based on "duration" does the internal tool logic invoke after character start to use the tool. (0 means immediately invoke. 1000 means invoke after "duration" frames)
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.TypeName">
            <summary>
            Name of the class type 
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.Duration">
            <summary>
            How long does the tool perform it's function for once
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.Cooldown">
            <summary>
            How long have to wait to use again after the tool being used for once
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.HoldPunish">
            <summary>
            How many extra frames have to wait if the user hold the action button to use the tool multiple time
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.ChargeDuration">
            <summary>
            How many frames does it have to charge to perform the tool as charged. Set to int.MaxValue to disable charge feature.
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.DefaultMovementSpeedRateOnUse">
            <summary>
            How fast can the character move when using this tool. (0 means do not move. 1000 means move as normal speed. null means do not effect movement speed.)
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.WalkingMovementSpeedRateOnUse">
            <summary>
            How fast can the character move when using this tool when walking. (0 means do not move. 1000 means move as normal speed. null means do not effect movement speed.)
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.RunningMovementSpeedRateOnUse">
            <summary>
            How fast can the character move when using this tool when running. (0 means do not move. 1000 means move as normal speed. null means do not effect movement speed.)
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.UseStackAsUsage">
            <summary>
            True if this tool treat it's inventory stack count as durability bar
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.RepeatWhenHolding">
            <summary>
            True if this tool can be use repeatedly when holding the action button
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.CancelUseWhenRelease">
            <summary>
            True if usage of this tool should be stop when user relase the action button
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.LockFacingOnUse">
            <summary>
            Do not change character facing when the tool is being use
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.IgnoreGrabTwist">
            <summary>
            Do not read grab twist data from character when rendering this tool
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.AvailableInAir">
            <summary>
            True if character can use this tool when not touching ground
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.AvailableInWater">
            <summary>
            True if character can use this tool when inside water
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.AvailableWhenWalking">
            <summary>
            True if character can use this tool when walking
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.AvailableWhenRunning">
            <summary>
            True if character can use this tool when running
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.AvailableWhenClimbing">
            <summary>
            True if character can use this tool when climbing
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.AvailableWhenFlying">
            <summary>
            True if character can use this tool when flying
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.AvailableWhenRolling">
            <summary>
            True if character can use this tool when rolling
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.AvailableWhenSquatting">
            <summary>
            True if character can use this tool when squatting
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.AvailableWhenDashing">
            <summary>
            True if character can use this tool when dashing
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.AvailableWhenSliding">
            <summary>
            True if character can use this tool when sliding on wall
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.AvailableWhenGrabbing">
            <summary>
            True if character can use this tool when grabbing
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.AvailableWhenRushing">
            <summary>
            True if character can use this tool when rushing
            </summary>
        </member>
        <member name="P:AngeliA.HandTool.AvailableWhenPounding">
            <summary>
            True if character can use this tool when ground pounding
            </summary>
        </member>
        <member name="M:AngeliA.HandTool.LoadFromSheet">
            <summary>
            Load artwork sprite from current rendering sheet
            </summary>
        </member>
        <member name="M:AngeliA.HandTool.OnToolSpriteRendered(AngeliA.PoseCharacterRenderer,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.AngeSprite,System.Int32)">
            <summary>
            This function is called when the tool is rendering by pose-style character
            </summary>
            <param name="renderer">Target character</param>
            <param name="x">Position X of the sprite in global space</param>
            <param name="y">Position Y of the sprite in global space</param>
            <param name="width">Width of the sprite in global space</param>
            <param name="height">Height of the sprite in global space</param>
            <param name="grabRotation">Rotation of the sprite</param>
            <param name="grabScale">Size scale of the sprite (0 means 0%, 1000 means 100%)</param>
            <param name="sprite">Artwork sprite</param>
            <param name="z">Z value for sort rendering cells</param>
        </member>
        <member name="M:AngeliA.HandTool.AllowingUse(AngeliA.Character)">
            <summary>
            True if the tool can be use by the character
            </summary>
        </member>
        <member name="M:AngeliA.HandTool.OnToolPerform(AngeliA.Character)">
            <summary>
            This function is called when this tool is used for once by the given character
            </summary>
        </member>
        <member name="M:AngeliA.HandTool.GetHandheldPoseAnimationID(AngeliA.Character)">
            <summary>
            Get the ID of the pose animation for handheld
            </summary>
        </member>
        <member name="M:AngeliA.HandTool.GetPerformPoseAnimationID(AngeliA.Character)">
            <summary>
            Get the ID of the pose animation for using the tool
            </summary>
        </member>
        <member name="T:AngeliA.IProgressiveItem">
            <summary>
            Interface that makes the item break/repair into other item
            </summary>
        </member>
        <member name="P:AngeliA.IProgressiveItem.Progress">
            <summary>
            Current localtion inside the profress chain
            </summary>
        </member>
        <member name="P:AngeliA.IProgressiveItem.TotalProgress">
            <summary>
            Total count of the profress chain
            </summary>
        </member>
        <member name="P:AngeliA.IProgressiveItem.PrevItemID">
            <summary>
            ID of the item that this item will become when it's broken
            </summary>
        </member>
        <member name="P:AngeliA.IProgressiveItem.NextItemID">
            <summary>
            ID of the item that this item will become when it got repair
            </summary>
        </member>
        <member name="T:AngeliA.Item">
            <summary>
            Basic unit inside inventory system. ※※⚠ Use global single instance ⚠※※
            </summary>
        </member>
        <member name="P:AngeliA.Item.MaxStackCount">
            <summary>
            Count limitation for multiple items inside one inventory slot
            </summary>
        </member>
        <member name="P:AngeliA.Item.AllowDuplicateUpdate">
            <summary>
            True if same type of item can update multiple times during same frame for same holder
            </summary>
        </member>
        <member name="P:AngeliA.Item.EmbedIntoLevel">
            <summary>
            True if this item can Embed into level blocks and get spawn when the block is picked. (like ore inside stone)
            </summary>
        </member>
        <member name="P:AngeliA.Item.TypeID">
            <summary>
            Unique ID for this type of item
            </summary>
        </member>
        <member name="M:AngeliA.Item.BeforeItemUpdate_FromInventory(AngeliA.Character,System.Int32,System.Int32)">
            <summary>
            This function is called every frame when this item is in an holder's inventory
            </summary>
            <param name="holder">The holder of the inventory</param>
            <param name="inventoryID">ID of the inventory</param>
            <param name="itemIndex"></param>
        </member>
        <member name="M:AngeliA.Item.OnItemUpdate_FromInventory(AngeliA.Character,System.Int32,System.Int32)">
            <summary>
            This function is called every frame when this item is in an holder's inventory
            </summary>
            <param name="holder">The holder of the inventory</param>
            <param name="inventoryID">ID of the inventory</param>
            <param name="itemIndex"></param>
        </member>
        <member name="M:AngeliA.Item.OnPoseAnimationUpdate_FromInventory(AngeliA.PoseCharacterRenderer,System.Int32,System.Int32)">
            <summary>
            This function is called every frame when pose-style character update after rendering is ready
            </summary>
            <param name="rendering">The inventory holder</param>
            <param name="inventoryID">ID of the inventory</param>
            <param name="itemIndex"></param>
        </member>
        <member name="M:AngeliA.Item.OnTakeDamage_FromInventory(AngeliA.Character,System.Int32,System.Int32,AngeliA.Damage@)">
            <summary>
            This function is called when holder take damage
            </summary>
            <param name="holder">The inventory holder</param>
            <param name="inventoryID">ID of the inventory</param>
            <param name="itemIndex"></param>
            <param name="damage"></param>
        </member>
        <member name="M:AngeliA.Item.OnCharacterAttack_FromInventory(AngeliA.Character,AngeliA.Bullet,System.Int32,System.Int32)">
            <summary>
            This function is called when holder attacks
            </summary>
            <param name="character">The inventory holder</param>
            <param name="bullet">Bullet entity this attack spawns</param>
            <param name="inventoryID">ID of the inventory</param>
            <param name="itemIndex"></param>
        </member>
        <member name="M:AngeliA.Item.BeforeItemUpdate_FromEquipment(AngeliA.Character)">
            <summary>
            This function is called every frame when the holder is equipping this item 
            </summary>
        </member>
        <member name="M:AngeliA.Item.OnItemUpdate_FromEquipment(AngeliA.Character)">
            <summary>
            This function is called every frame when the holder is equipping this item 
            </summary>
        </member>
        <member name="M:AngeliA.Item.BeforePoseAnimationUpdate_FromEquipment(AngeliA.PoseCharacterRenderer)">
            <summary>
            This function is called every frame when a pose-style character equipping this item
            </summary>
        </member>
        <member name="M:AngeliA.Item.OnPoseAnimationUpdate_FromEquipment(AngeliA.PoseCharacterRenderer)">
            <summary>
            This function is called every frame when a pose-style character equipping this item
            </summary>
        </member>
        <member name="M:AngeliA.Item.OnTakeDamage_FromEquipment(AngeliA.Character,AngeliA.Damage@)">
            <summary>
            This function is called when the holder took damage with this item equipping
            </summary>
        </member>
        <member name="M:AngeliA.Item.OnCharacterAttack_FromEquipment(AngeliA.Character,AngeliA.Bullet)">
            <summary>
            This function is called when the holder attack with this item equipping
            </summary>
            <param name="character"></param>
            <param name="bullet">Instance of the bullet entity from the attack</param>
        </member>
        <member name="M:AngeliA.Item.TryRepairEquipment(AngeliA.Character)">
            <summary>
            Perform a repair for this item as an equipment
            </summary>
        </member>
        <member name="M:AngeliA.Item.OnItemUpdate_FromItemHolder(AngeliA.ItemHolder,System.Int32)">
            <summary>
            This funtion is called every frame when it's being holded by a ItemHolder entity on stage
            </summary>
        </member>
        <member name="M:AngeliA.Item.OnCollect(AngeliA.Character)">
            <summary>
            This function is called when this item get collect from ItemHolder
            </summary>
            <param name="holder">Character that collects this item</param>
        </member>
        <member name="M:AngeliA.Item.CanUse(AngeliA.Character)">
            <summary>
            True if this item can be use at current frame
            </summary>
            <param name="holder">Holder that trying to use this item</param>
        </member>
        <member name="M:AngeliA.Item.Use(AngeliA.Character,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Perform the logic when the item get used
            </summary>
            <param name="holder">Holder that using this item</param>
            <param name="inventoryID">Inventory ID of this holder</param>
            <param name="itemIndex">Index of this item inside the inventory</param>
            <param name="consume">True if the item should disappear after being used</param>
            <returns>True if the item is used</returns>
        </member>
        <member name="M:AngeliA.Item.ItemConditionCheck(AngeliA.Character)">
            <summary>
            True if the item should receive update callback at current condition
            </summary>
            <param name="holder">Holder that own this item</param>
        </member>
        <member name="M:AngeliA.Item.DrawItem(AngeliA.Entity,AngeliA.IRect,AngeliA.Color32,System.Int32)">
            <summary>
            Call this function to render the item
            </summary>
            <param name="holder">Holder that own this item</param>
            <param name="rect">Rect position in global space</param>
            <param name="tint">Color tint</param>
            <param name="z">Z value for sort rendering cells</param>
        </member>
        <member name="T:AngeliA.ItemSystem">
            <summary>
            Core system that handles item related logic
            </summary>
        </member>
        <member name="P:AngeliA.ItemSystem.ItemPoolReady">
            <summary>
            True if the system is ready to use
            </summary>
        </member>
        <member name="P:AngeliA.ItemSystem.ItemUnlockReady">
            <summary>
            True if the item unlock data is loaded
            </summary>
        </member>
        <member name="M:AngeliA.ItemSystem.GetItem(System.Int32)">
            <summary>
            Get global single instance of the item from given ID
            </summary>
        </member>
        <member name="M:AngeliA.ItemSystem.GetItemDisplayName(System.Int32)">
            <summary>
            Get display name from the language system from the given item ID
            </summary>
        </member>
        <member name="M:AngeliA.ItemSystem.GetItemDescription(System.Int32)">
            <summary>
            Get description from the language system from the given item ID
            </summary>
        </member>
        <member name="M:AngeliA.ItemSystem.GetItemMaxStackCount(System.Int32)">
            <summary>
            Get stack count limit of the given item in inventory panel
            </summary>
        </member>
        <member name="M:AngeliA.ItemSystem.HasItem(System.Int32)">
            <summary>
            True if there is an item inside the system pool for the given ID
            </summary>
        </member>
        <member name="M:AngeliA.ItemSystem.CanUseItem(System.Int32,AngeliA.Character)">
            <summary>
            True if the item can be use by the given character
            </summary>
        </member>
        <member name="M:AngeliA.ItemSystem.TryGetCombination(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Get item crafting combination data of the given item ID pair
            </summary>
            <param name="item0">Source item ID</param>
            <param name="item1">Source item ID</param>
            <param name="item2">Source item ID</param>
            <param name="item3">Source item ID</param>
            <param name="result">Result item ID that the given pair will craft into</param>
            <param name="resultCount">How many result item does a single craft will get</param>
            <param name="keep0">Source item ID which do not get consume after craft</param>
            <param name="keep1">Source item ID which do not get consume after craft</param>
            <param name="keep2">Source item ID which do not get consume after craft</param>
            <param name="keep3">Source item ID which do not get consume after craft</param>
            <returns>True if it is a valid craft combination</returns>
        </member>
        <member name="M:AngeliA.ItemSystem.ClearCombination">
            <summary>
            Reset the system craft combination pool
            </summary>
        </member>
        <member name="M:AngeliA.ItemSystem.GetRelatedCombinations(AngeliA.Int4,System.Collections.Generic.List{AngeliA.Int4},System.Int32)">
            <summary>
            Get all craft combination that include the given combination. This is for making a helper list for the user to know what items can they craft.
            </summary>
            <param name="combination">Current combination the user putted into the crafting fields</param>
            <param name="output">The helper list data</param>
            <param name="materialCountLimit">Combinations which have more source items than this number will be ignored</param>
        </member>
        <member name="M:AngeliA.ItemSystem.GetSortedCombination(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sort the given combination to make it always unique no matter what order the source items are
            </summary>
            <param name="a">Crafting source item ID</param>
            <param name="b">Crafting source item ID</param>
            <param name="c">Crafting source item ID</param>
            <param name="d">Crafting source item ID</param>
            <returns>Sorted combination ID</returns>
        </member>
        <member name="M:AngeliA.ItemSystem.ForAllCombinations">
            <summary>
            Iterate through all crafting combination inside the pool
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameInitializeLater(4096)]
            	internal static void OnGameUpdate () {
            		Debug.Log("All item combinations inside this game:");
            		foreach (var com in ItemSystem.ForAllCombinations()) {
            			string name0 = ItemSystem.GetItemDisplayName(com.Key.x);
            			string name1 = ItemSystem.GetItemDisplayName(com.Key.y);
            			string name2 = ItemSystem.GetItemDisplayName(com.Key.z);
            			string name3 = ItemSystem.GetItemDisplayName(com.Key.w);
            			string nameResult = ItemSystem.GetItemDisplayName(com.Value);
            			Debug.Log($"{name0} + {name1} + {name2} + {name3} = {nameResult}");
            		}
            	}
            
            }
            </code></example>
        </member>
        <member name="M:AngeliA.ItemSystem.IsEquipment(System.Int32)">
            <inheritdoc cref="M:AngeliA.ItemSystem.IsEquipment(System.Int32,AngeliA.EquipmentType@)"/>
        </member>
        <member name="M:AngeliA.ItemSystem.IsEquipment(System.Int32,AngeliA.EquipmentType@)">
            <summary>
            True if the given item is equipment type
            </summary>
        </member>
        <member name="M:AngeliA.ItemSystem.IsItemUnlocked(System.Int32)">
            <summary>
            True if the given item is unlocked. Locked items will display as "?" in crafting UI helper menu
            </summary>
        </member>
        <member name="M:AngeliA.ItemSystem.SetItemUnlocked(System.Int32,System.Boolean)">
            <summary>
            Set given item into locked or unlocked. Locked items will display as "?" in crafting UI helper menu
            </summary>
        </member>
        <member name="M:AngeliA.ItemSystem.SpawnItem(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Spawn an item holder entity that holds the given item.
            </summary>
            <param name="itemID">Target item id</param>
            <param name="x">Position X of the item holder in global space</param>
            <param name="y">Position Y of the item holder in global space</param>
            <param name="count">Count of the target item inside the item holder. This function always spawn only one item holder entity.</param>
            <param name="jump">True if the item holder entity jump up when it spawns</param>
            <returns>Instance of the item holder entity</returns>
        </member>
        <member name="M:AngeliA.ItemSystem.DropItemFor(AngeliA.Entity)">
            <summary>
            Perform an item drop the target entity when the entity is destroyed
            </summary>
            <returns>True if the item drop successfuly performs</returns>
        </member>
        <member name="M:AngeliA.ItemSystem.DropItemFor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform an item drop the target entity when the entity is destroyed
            </summary>
            <param name="sourceID">ID of the target entity</param>
            <param name="x">Position X of the item holder appears in global space</param>
            <param name="y">Position Y of the item holder appears in global space</param>
            <returns>True if the item drop successfuly performs</returns>
        </member>
        <member name="T:AngeliA.Jewelry">
            <summary>
            A type of equipment that EquipmentType always set to Jewelry
            </summary>
        </member>
        <member name="T:AngeliA.NonStackableItem">
            <summary>
            A type of item that do not stack-up inside inventory panel. The MaxStackCount is always 1.
            </summary>
        </member>
        <member name="T:AngeliA.PlayerMenuItem`1">
            <summary>
            A type of item that spawns a player partner menu when use
            </summary>
            <typeparam name="UI">What type of menu does it spawns</typeparam>
        </member>
        <member name="P:AngeliA.PlayerMenuItem`1.Row">
            <summary>
            Inventory row count of the menu
            </summary>
        </member>
        <member name="P:AngeliA.PlayerMenuItem`1.Column">
            <summary>
            Inventory column count of the menu
            </summary>
        </member>
        <member name="M:AngeliA.PlayerMenuItem`1.OnPanelOpened(`0)">
            <summary>
            This function is called when the menu is spawned
            </summary>
            <param name="panelUI">Instance of the menu</param>
        </member>
        <member name="T:AngeliA.SwitchItem`1">
            <summary>
            A type of item that switch to another item when use
            </summary>
            <typeparam name="TargetItem">The item it will switch to</typeparam>
        </member>
        <member name="P:AngeliA.SwitchItem`1.TargetID">
            <summary>
            ID of the item it will switch to
            </summary>
        </member>
        <member name="T:AngeliA.WeaponValidDirection">
            <summary>
            Which direction can the weapon attack to
            </summary>
        </member>
        <member name="F:AngeliA.WeaponValidDirection.Two">
            <summary>
            ← →
            </summary>
        </member>
        <member name="F:AngeliA.WeaponValidDirection.Three">
            <summary>
            ← → ↑
            </summary>
        </member>
        <member name="F:AngeliA.WeaponValidDirection.Four">
            <summary>
            ← → ↑ ↓
            </summary>
        </member>
        <member name="F:AngeliA.WeaponValidDirection.Five">
            <summary>
            ← → ↑ ↖ ↗
            </summary>
        </member>
        <member name="F:AngeliA.WeaponValidDirection.Eight">
            <summary>
            ← → ↑ ↖ ↗ ↓ ↙ ↘
            </summary>
        </member>
        <member name="T:AngeliA.Weapon`1">
            <inheritdoc cref="T:AngeliA.Weapon"/>
        </member>
        <member name="T:AngeliA.Weapon">
            <summary>
            A type of handtool that launch a type of bullet when being used
            </summary>
        </member>
        <member name="P:AngeliA.Weapon.BulletID">
            <summary>
            Entity ID of the bullet
            </summary>
        </member>
        <member name="P:AngeliA.Weapon.ValidDirection">
            <summary>
            Which direction can this weapon attack
            </summary>
        </member>
        <member name="M:AngeliA.Weapon.SpawnBullet(AngeliA.Character)">
            <summary>
            Spawn the bullet entity
            </summary>
            <param name="sender">Character that use the weapon</param>
            <returns>Instance of the spawned bullet entity. Return null when invalid</returns>
        </member>
        <member name="T:AngeliA.CharacterPose">
            <summary>
            Complete pose infomation at one moment for a pose-style character
            </summary>
        </member>
        <member name="M:AngeliA.CharacterPose.RecordFromCharacter(AngeliA.PoseCharacterRenderer)">
            <summary>
            Read pose data from the character
            </summary>
        </member>
        <member name="M:AngeliA.CharacterPose.ApplyToCharacter(AngeliA.PoseCharacterRenderer)">
            <summary>
            Make the character perform this pose
            </summary>
        </member>
        <member name="M:AngeliA.CharacterPose.BlendToCharacter(AngeliA.PoseCharacterRenderer,System.Single)">
            <summary>
            Make the character perform this pose with weight
            </summary>
            <param name="rendering">Target character</param>
            <param name="blend01">1 means this apply pose. 0 means apply character's current pose.</param>
        </member>
        <member name="T:AngeliA.HandheldPoseAnimation">
            <summary>
            Pose animation which override onto a character for holding a handtool
            </summary>
        </member>
        <member name="M:AngeliA.HandheldPoseAnimation.DrawTool(AngeliA.HandTool,AngeliA.PoseCharacterRenderer)">
            <summary>
            Rendering the given handtool
            </summary>
        </member>
        <member name="T:AngeliA.PoseAnimation">
            <summary>
            Procedure animation to animate a pose-style character. ⚠Use global single instance from system pool⚠
            </summary>
        </member>
        <member name="F:AngeliA.PoseAnimation.A2G">
            <summary>
            Scale values from artwork pixel space to global space
            </summary>
        </member>
        <member name="P:AngeliA.PoseAnimation.ValidHeadPosition">
            <summary>
            True if head position need to be recalculate after perform this animation
            </summary>
        </member>
        <member name="P:AngeliA.PoseAnimation.DontBlendToNext">
            <summary>
            True if this animation should immediately transition to the next
            </summary>
        </member>
        <member name="P:AngeliA.PoseAnimation.DontBlendToPrev">
            <summary>
            True if the prev animation should immediately transition to this one
            </summary>
        </member>
        <member name="F:AngeliA.PoseAnimation.Target">
            <summary>
            Character that currently being animated
            </summary>
        </member>
        <member name="F:AngeliA.PoseAnimation.Rendering">
            <summary>
            Rendering behavior of the target character
            </summary>
        </member>
        <member name="F:AngeliA.PoseAnimation.Movement">
            <summary>
            Movement behavior of the target character
            </summary>
        </member>
        <member name="F:AngeliA.PoseAnimation.Attackness">
            <summary>
            Attackness behavior of the target character
            </summary>
        </member>
        <member name="F:AngeliA.PoseAnimation.FacingRight">
            <summary>
            True if the target character is facing right
            </summary>
        </member>
        <member name="F:AngeliA.PoseAnimation.FacingFront">
            <summary>
            True if the target character is facing front
            </summary>
        </member>
        <member name="F:AngeliA.PoseAnimation.IsChargingAttack">
            <summary>
            True if the target character is currently attacking
            </summary>
        </member>
        <member name="F:AngeliA.PoseAnimation.FacingSign">
            <summary>
            Return 1 if the target character is facing right
            </summary>
        </member>
        <member name="F:AngeliA.PoseAnimation.FrontSign">
            <summary>
            Return 1 if the target character is facing front
            </summary>
        </member>
        <member name="F:AngeliA.PoseAnimation.CurrentAnimationFrame">
            <summary>
            Local animation frame of the target character
            </summary>
        </member>
        <member name="F:AngeliA.PoseAnimation.AnimationType">
            <summary>
            Which type of animation does the current character require to show
            </summary>
        </member>
        <member name="F:AngeliA.PoseAnimation.AttackLerp">
            <summary>
            Liner progress of attack. (0 means start, 1 means end)
            </summary>
        </member>
        <member name="F:AngeliA.PoseAnimation.AttackEase">
            <summary>
            Eased progress of attack. (0 means start, 1 means end)
            </summary>
        </member>
        <member name="M:AngeliA.PoseAnimation.PerformAnimationFromPool(System.Int32,AngeliA.PoseCharacterRenderer)">
            <summary>
            Animate the target character from animation inside system pool
            </summary>
        </member>
        <member name="M:AngeliA.PoseAnimation.PerformAnimation(AngeliA.PoseAnimation,AngeliA.PoseCharacterRenderer)">
            <summary>
            Animate target character from given animation
            </summary>
        </member>
        <member name="M:AngeliA.PoseAnimation.PerformAnimationBlendFromPool(System.Int32,System.Int32,System.Single,AngeliA.PoseCharacterRenderer)">
            <summary>
            Animate the target character from two animations inside system pool
            </summary>
            <param name="idA"></param>
            <param name="idB"></param>
            <param name="blend01">0 means only perform animationA, 1 means only perform animationB. 0.5 means perform two animations equally.</param>
            <param name="renderer"></param>
        </member>
        <member name="M:AngeliA.PoseAnimation.PerformAnimationBlend(AngeliA.PoseAnimation,AngeliA.PoseAnimation,System.Single,AngeliA.PoseCharacterRenderer)">
            <summary>
            Animate the target character from two given animations
            </summary>
            <param name="animationA"></param>
            <param name="animationB"></param>
            <param name="blend01">0 means only perform animationA, 1 means only perform animationB. 0.5 means perform two animations equally.</param>
            <param name="renderer"></param>
        </member>
        <member name="M:AngeliA.PoseAnimation.TryGetAnimationFromPool(System.Int32,AngeliA.PoseAnimation@)">
            <summary>
            Get global single instance from system pool
            </summary>
        </member>
        <member name="M:AngeliA.PoseAnimation.Animate(AngeliA.PoseCharacterRenderer)">
            <summary>
            Perform the animation logic to the given character
            </summary>
        </member>
        <member name="M:AngeliA.PoseAnimation.ResetShoulderAndUpperArmPos(System.Boolean,System.Boolean)">
            <summary>
            Reset position of soulder and upper arm for cached character
            </summary>
        </member>
        <member name="M:AngeliA.PoseAnimation.AttackHeadDown(System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Make head moves down for attack animation for cached character
            </summary>
        </member>
        <member name="M:AngeliA.PoseAnimation.AttackLegShake(System.Single)">
            <summary>
            Make legs shake for attack animation for cached character
            </summary>
        </member>
        <member name="T:AngeliA.SavingLocation">
            <summary>
            Where should the saving data local inside the disk
            </summary>
        </member>
        <member name="F:AngeliA.SavingLocation.Global">
            <summary>
            Shared between all saving slot
            </summary>
        </member>
        <member name="F:AngeliA.SavingLocation.Slot">
            <summary>
            Only for it's own saving slot
            </summary>
        </member>
        <member name="T:AngeliA.Saving">
            <summary>
            Data that auto save into player saving data
            </summary>
        </member>
        <member name="P:AngeliA.Saving.Key">
            <summary>
            Unique key to identify this data
            </summary>
        </member>
        <member name="P:AngeliA.Saving.ID">
            <summary>
            AngeHash of the "Key"
            </summary>
        </member>
        <member name="T:AngeliA.Saving`1">
            <summary>
            Data that auto save into player saving data
            </summary>
            <typeparam name="T">Type of the data</typeparam>
        </member>
        <member name="P:AngeliA.Saving`1.Value">
            <summary>
            Current value it holds
            </summary>
        </member>
        <member name="P:AngeliA.Saving`1.DefaultValue">
            <summary>
            Default value
            </summary>
        </member>
        <member name="M:AngeliA.Saving`1.#ctor(System.String,`0,AngeliA.SavingLocation)">
            <summary>
            
            </summary>
            <param name="key">Unique key to identify this data</param>
            <param name="defaultValue"></param>
            <param name="location">Set to "global" if this data shares between all saving slots</param>
        </member>
        <member name="M:AngeliA.Saving`1.GetValue(System.Boolean)">
            <summary>
            Get the value it currently holds
            </summary>
        </member>
        <member name="M:AngeliA.Saving`1.SetValue(`0,System.Boolean)">
            <summary>
            Set the value it currently holds
            </summary>
        </member>
        <member name="M:AngeliA.Saving`1.StringToValue(System.String)">
            <summary>
            Convert given string into the value
            </summary>
        </member>
        <member name="M:AngeliA.Saving`1.ValueToString(`0)">
            <summary>
            Convert given value into string data
            </summary>
        </member>
        <member name="T:AngeliA.SavingBool">
            <summary>
            Boolean data that auto save into player saving data
            </summary>
            <param name="key">Unique key to identify this data</param>
            <param name="defaultValue"></param>
            <param name="location">Set to "global" if this data shares between all saving slots</param>
        </member>
        <member name="M:AngeliA.SavingBool.#ctor(System.String,System.Boolean,AngeliA.SavingLocation)">
            <summary>
            Boolean data that auto save into player saving data
            </summary>
            <param name="key">Unique key to identify this data</param>
            <param name="defaultValue"></param>
            <param name="location">Set to "global" if this data shares between all saving slots</param>
        </member>
        <member name="T:AngeliA.SavingColor32">
            <summary>
            Color data that auto save into player saving data
            </summary>
            <param name="key">Unique key to identify this data</param>
            <param name="defaultValue"></param>
            <param name="location">Set to "global" if this data shares between all saving slots</param>
        </member>
        <member name="M:AngeliA.SavingColor32.#ctor(System.String,AngeliA.Color32,AngeliA.SavingLocation)">
            <summary>
            Color data that auto save into player saving data
            </summary>
            <param name="key">Unique key to identify this data</param>
            <param name="defaultValue"></param>
            <param name="location">Set to "global" if this data shares between all saving slots</param>
        </member>
        <member name="T:AngeliA.SavingColor32NoAlpha">
            <summary>
            Color data without alpha value that auto save into player saving data
            </summary>
            <param name="key">Unique key to identify this data</param>
            <param name="defaultValue"></param>
            <param name="location">Set to "global" if this data shares between all saving slots</param>
        </member>
        <member name="M:AngeliA.SavingColor32NoAlpha.#ctor(System.String,AngeliA.Color32,AngeliA.SavingLocation)">
            <summary>
            Color data without alpha value that auto save into player saving data
            </summary>
            <param name="key">Unique key to identify this data</param>
            <param name="defaultValue"></param>
            <param name="location">Set to "global" if this data shares between all saving slots</param>
        </member>
        <member name="T:AngeliA.SavingHotkey">
            <summary>
            Hotkey data that auto save into player saving data
            </summary>
            <param name="key">Unique key to identify this data</param>
            <param name="defaultValue"></param>
            <param name="location">Set to "global" if this data shares between all saving slots</param>
        </member>
        <member name="M:AngeliA.SavingHotkey.#ctor(System.String,AngeliA.Hotkey,AngeliA.SavingLocation)">
            <summary>
            Hotkey data that auto save into player saving data
            </summary>
            <param name="key">Unique key to identify this data</param>
            <param name="defaultValue"></param>
            <param name="location">Set to "global" if this data shares between all saving slots</param>
        </member>
        <member name="T:AngeliA.SavingInt">
            <summary>
            Intager data that auto save into player saving data
            </summary>
            <param name="key">Unique key to identify this data</param>
            <param name="defaultValue"></param>
            <param name="location">Set to "global" if this data shares between all saving slots</param>
        </member>
        <member name="M:AngeliA.SavingInt.#ctor(System.String,System.Int32,AngeliA.SavingLocation)">
            <summary>
            Intager data that auto save into player saving data
            </summary>
            <param name="key">Unique key to identify this data</param>
            <param name="defaultValue"></param>
            <param name="location">Set to "global" if this data shares between all saving slots</param>
        </member>
        <member name="T:AngeliA.SavingString">
            <summary>
            String data that auto save into player saving data
            </summary>
            <param name="key">Unique key to identify this data</param>
            <param name="defaultValue"></param>
            <param name="location">Set to "global" if this data shares between all saving slots</param>
        </member>
        <member name="M:AngeliA.SavingString.#ctor(System.String,System.String,AngeliA.SavingLocation)">
            <summary>
            String data that auto save into player saving data
            </summary>
            <param name="key">Unique key to identify this data</param>
            <param name="defaultValue"></param>
            <param name="location">Set to "global" if this data shares between all saving slots</param>
        </member>
        <member name="T:AngeliA.SavingSystem">
            <summary>
            Core system for handle data that auto keeps inside disk.
            </summary>
        </member>
        <member name="P:AngeliA.SavingSystem.FileLoaded">
            <summary>
            True if the internal pool is loaded from file
            </summary>
        </member>
        <member name="P:AngeliA.SavingSystem.IsDirty">
            <summary>
            True if there's any unsaved change
            </summary>
        </member>
        <member name="P:AngeliA.SavingSystem.PoolVersion">
            <summary>
            Data version of the internal pool
            </summary>
        </member>
        <member name="P:AngeliA.SavingSystem.PoolReady">
            <summary>
            True if the internal pool is ready to use
            </summary>
        </member>
        <member name="M:AngeliA.SavingSystem.HasKey(AngeliA.Saving)">
            <summary>
            True if the given key exists in the internal pool
            </summary>
        </member>
        <member name="M:AngeliA.SavingSystem.HasKey(System.Int32)">
            <summary>
            True if the given key exists in the internal pool
            </summary>
        </member>
        <member name="T:AngeliA.AfterimageScope">
            <summary>
            Draw a continuous tailing cell effect for the objects rendering inside
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	static int CurrentX = 0;
            	static int CurrentY = 0;
            	static int CurrentRot = 0;
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		int speedX = QTest.Int("Speed X", 50, -64, 64);
            		int speedY = QTest.Int("Speed Y", 10, -64, 64);
            		int rotateSpeed = QTest.Int("Rotate Speed", 8, -64, 64);
            		int count = QTest.Int("Count", 8, 1, 24);
            		int frameStep = QTest.Int("Frame Step", 16, 1, 32);
            		int scaleStart = QTest.Int("Scale Start", 1000, 0, 2000);
            		int scaleEnd = QTest.Int("Scale End", 100, 0, 2000);
            
            		using (new AfterimageScope(
            			speedX, speedY, Color32.WHITE, Color32.CLEAR, 
            			rotateSpeed, count, frameStep, scaleStart, scaleEnd
            		)) {
            
            			var cameraRect = Renderer.CameraRect;
            
            			// Render object here
            			Renderer.Draw(
            				BuiltInSprite.ICON_ENTITY,
            				cameraRect.x + CurrentX,
            				cameraRect.y + CurrentY,
            				500, 500, CurrentRot,
            				Const.CEL * 2, Const.CEL * 2
            			);
            
            			// Move the object
            			CurrentX += speedX;
            			CurrentY += speedY;
            			CurrentRot += rotateSpeed;
            			CurrentX = CurrentX.UMod(cameraRect.width);
            			CurrentY = CurrentY.UMod(cameraRect.height);
            
            		}
            
            	}
            
            }
            </code></example>
        </member>
        <member name="M:AngeliA.AfterimageScope.#ctor(System.Int32,System.Int32,AngeliA.Color32,AngeliA.Color32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a continuous tailing cell effect for the objects rendering inside
            </summary>
            <param name="speedX">How fast is the object moves horizontaly</param>
            <param name="speedY">How fast is the object moves verticaly</param>
            <param name="tintStart">Color tint for start of the effect</param>
            <param name="tintEnd">Color tint for end of the effect</param>
            <param name="rotateSpeed">How fast does the object rotate</param>
            <param name="count">How many effect should be drawn</param>
            <param name="frameStep">Frame distance between each effects</param>
            <param name="scaleStart">Size scale when the effect start (0 means 0%, 1000 means 100%)</param>
            <param name="scaleEnd">Size scale when the effect end (0 means 0%, 1000 means 100%)</param>
            <param name="renderLayer">Which layer does this effect renders into. Use RenderLayer.XXX to get the value.</param>
        </member>
        <member name="M:AngeliA.AfterimageScope.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.AfterimageScope.#ctor(System.Int32,System.Int32,AngeliA.Color32,AngeliA.Color32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="T:AngeliA.CellZScope">
            <summary>
            Scope to change rendering cell z value
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		int newZ = 0;
            
            		using (new CellZScope(newZ)) {
            
            			// Rendering cell created inside will have their z value override
            			
            		}
            
            	}
            
            }
            </code></example>
        </member>
        <member name="M:AngeliA.CellZScope.#ctor(System.Int32)">
            <summary>
            Scope to change rendering cell z value
            </summary>
        </member>
        <member name="T:AngeliA.ClampCellsScope">
            <summary>
            Scope to clamp rendering cell into given rect position
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		int x = QTest.Int("X", 0, 0, Const.CEL * 128);
            		int y = QTest.Int("Y", 0, 0, Const.CEL * 128);
            		int w = QTest.Int("W", Const.CEL * 24, 0, Const.CEL * 128);
            		int h = QTest.Int("H", Const.CEL * 24, 0, Const.CEL * 128);
            
            		var cameraRect = Renderer.CameraRect;
            
            		Renderer.SetLayer(RenderLayer.UI);
            
            		using (new ClampCellsScope(new IRect(cameraRect.x + x, cameraRect.y + y, w, h))) {
            
            			// Rendering cell created inside will have be clamped inside
            			Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.Shrink(Const.CEL * 3).Fit(1, 1));
            
            		}
            
            	}
            
            }
            </code></example>
        </member>
        <member name="M:AngeliA.ClampCellsScope.#ctor(AngeliA.IRect)">
            <summary>
            Scope to clamp rendering cell into given rect position
            </summary>
            <param name="rect">Rect position in global space</param>
        </member>
        <member name="T:AngeliA.DefaultLayerScope">
            <summary>
            Scope that makes renderer draw into default layer
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		using (new DefaultLayerScope()) {
            
            			// Rendering cell created inside will draw into default layer
            
            		}
            
            	}
            
            }
            </code></example>
        </member>
        <member name="M:AngeliA.DefaultLayerScope.#ctor">
            <summary>
            Scope that makes renderer draw into default layer
            </summary>
        </member>
        <member name="T:AngeliA.DynamicClampCellScope">
            <summary>
            Scope that clamp rendering cells inside given range by changing the size scale of the content
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		var range = new IRect();
            
            		using (new DynamicClampCellScope(range)) {
            
            			// Rendering cell created inside will be clamped by rescale
            
            		}
            
            	}
            
            }
            </code></example>
        </member>
        <member name="M:AngeliA.DynamicClampCellScope.#ctor(AngeliA.IRect)">
            <summary>
            Scope that clamp rendering cells inside given range by changing the size scale of the content
            </summary>
            <param name="rect">Rect position in global space</param>
        </member>
        <member name="T:AngeliA.EnvironmentShadowScope">
            <summary>
            Scope that draw shadows for rendering cells inside
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		using (new EnvironmentShadowScope()) {
            
            			// Rendering cell created inside will have a shadow
            			Renderer.Draw(BuiltInSprite.ICON_ENTITY, Renderer.CameraRect.Shrink(Const.CEL * 8));
            
            		}
            
            	}
            
            }
            </code></example>	
        </member>
        <member name="F:AngeliA.EnvironmentShadowScope.OffsetX">
            <summary>
            Shadow distance X in global space
            </summary>
        </member>
        <member name="F:AngeliA.EnvironmentShadowScope.OffsetY">
            <summary>
            Shadow distance Y in global space
            </summary>
        </member>
        <member name="F:AngeliA.EnvironmentShadowScope.Alpha">
            <summary>
            Transparency value of the shadow. (0 means transparent, 255 means not tramsparent)
            </summary>
        </member>
        <member name="F:AngeliA.EnvironmentShadowScope.Z">
            <summary>
            Z value for sort rendering cells
            </summary>
        </member>
        <member name="M:AngeliA.EnvironmentShadowScope.#ctor(System.Int32,System.Int32,System.Byte,System.Int32)">
            <summary>
            Scope that draw shadows for rendering cells inside
            </summary>
            <param name="offsetX">Shadow distance X in global space</param>
            <param name="offsetY">Shadow distance Y in global space</param>
            <param name="alpha">Transparency value of the shadow. (0 means transparent, 255 means not tramsparent)</param>
            <param name="z">Z value for sort rendering cells</param>
        </member>
        <member name="M:AngeliA.EnvironmentShadowScope.#ctor">
            <summary>
            Scope that draw shadows for rendering cells inside
            </summary>
        </member>
        <member name="T:AngeliA.FontScope">
            <summary>
            Scope that makes labels inside display with given font
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		int fontID = /*Your font ID here*/;
            
            		using (new FontScope(fontID)) {
            
            			// Labels inside will be display with the given font
            
            		}
            
            	}
            
            }
            </code></example>
        </member>
        <member name="M:AngeliA.FontScope.#ctor(System.Int32)">
            <summary>
            Scope that makes labels inside display with given font
            </summary>
        </member>
        <member name="T:AngeliA.GlitchScope">
            <summary>
            Scope that make element inside looks glitched
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		using (new GlitchScope()) {
            
            			// Rendering cells inside will looks glitched
            
            		}
            
            	}
            
            }
            </code></example>	
        </member>
        <member name="M:AngeliA.GlitchScope.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Scope that make element inside looks glitched
            </summary>
        </member>
        <member name="T:AngeliA.GUIBodyColorScope">
            <summary>
            Scope that change the body color of GUI element inside 
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		using (new GUIBodyColorScope(Color32.GREEN)) {
            
            			// GUI elements inside will have their body color changed
            
            		}
            
            	}
            
            }
            </code></example>	
        </member>
        <member name="M:AngeliA.GUIBodyColorScope.#ctor">
            <summary>
            Scope that change the body color of GUI element inside 
            </summary>
        </member>
        <member name="M:AngeliA.GUIBodyColorScope.#ctor(AngeliA.Color32)">
            <summary>
            Scope that change the body color of GUI element inside 
            </summary>
        </member>
        <member name="T:AngeliA.GUIColorScope">
            <summary>
            Scope that change the color of GUI element inside 
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		using (new GUIColorScope(Color32.GREEN)) {
            
            			// GUI elements inside will have their color changed
            
            		}
            
            	}
            
            }
            </code></example>	
        </member>
        <member name="M:AngeliA.GUIColorScope.#ctor(AngeliA.Color32)">
            <summary>
            Scope that change the color of GUI element inside 
            </summary>
        </member>
        <member name="T:AngeliA.GUIContentColorScope">
            <summary>
            Scope that change the content color of GUI element inside 
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		using (new GUIContentColorScope(Color32.GREEN)) {
            
            			// GUI elements inside will have their content color changed
            
            		}
            
            	}
            
            }
            </code></example>	
        </member>
        <member name="M:AngeliA.GUIContentColorScope.#ctor(AngeliA.Color32)">
            <summary>
            Scope that change the content color of GUI element inside 
            </summary>
        </member>
        <member name="T:AngeliA.GUIEnableScope">
            <summary>
            Scope that set enable of GUI elements inside
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		using (new GUIEnableScope(false)) {
            
            			// GUI elements inside will be disabled
            
            		}
            
            	}
            
            }
            </code></example>	
        </member>
        <member name="M:AngeliA.GUIEnableScope.#ctor(System.Boolean)">
            <summary>
            Scope that set enable of GUI elements inside
            </summary>
        </member>
        <member name="T:AngeliA.GUIInteractableScope">
            <summary>
            Scope that set interactable of GUI elements inside
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		using (new GUIInteractableScope(false)) {
            
            			// GUI elements inside will be not interactable
            
            		}
            
            	}
            
            }
            </code></example>	
        </member>
        <member name="M:AngeliA.GUIInteractableScope.#ctor(System.Boolean)">
            <summary>
            Scope that set interactable of GUI elements inside
            </summary>
        </member>
        <member name="T:AngeliA.GUILabelWidthScope">
            <summary>
            Scope that set internal label width of GUI elements inside
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		using (new GUILabelWidthScope(128)) {
            
            			// GUI elements inside will have internal label with 128 in width
            
            		}
            
            	}
            
            }
            </code></example>	
        </member>
        <member name="M:AngeliA.GUILabelWidthScope.#ctor(System.Int32)">
            <summary>
            Scope that set internal label width of GUI elements inside
            </summary>
        </member>
        <member name="T:AngeliA.GUIVerticalScrollScope">
            <summary>
            Scope that make GUI elements inside scrolls
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	static int ScrollPos;
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		var cameraRect = Renderer.CameraRect;
            
            		using (var scroll = new GUIVerticalScrollScope(cameraRect, ScrollPos, 0, 4096)) {
            			ScrollPos = scroll.PositionY;
            
            			Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.x + 1024, cameraRect.y, 0, 0, 0, 512, 512);
            			Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.x + 1024, cameraRect.y + 1024, 0, 0, 0, 512, 512);
            			Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.x + 1024, cameraRect.y + 2048, 0, 0, 0, 512, 512);
            
            		}
            
            	}
            
            }
            </code></example>	
        </member>
        <member name="M:AngeliA.GUIVerticalScrollScope.#ctor(AngeliA.IRect,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Scope that make GUI elements inside scrolls
            </summary>
        </member>
        <member name="T:AngeliA.GUIHorizontalScrollScope">
            <summary>
            Scope that make GUI elements inside scrolls
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	static int ScrollPos;
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		var cameraRect = Renderer.CameraRect;
            
            		using (var scroll = new GUIHorizontalScrollScope(cameraRect, ScrollPos, 0, 4096)) {
            			ScrollPos = scroll.PositionX;
            
            			Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.x + 1024, cameraRect.y, 0, 0, 0, 512, 512);
            			Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.x + 1024, cameraRect.y + 1024, 0, 0, 0, 512, 512);
            			Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.x + 1024, cameraRect.y + 2048, 0, 0, 0, 512, 512);
            
            		}
            
            	}
            
            }
            </code></example>	
        </member>
        <member name="M:AngeliA.GUIHorizontalScrollScope.#ctor(AngeliA.IRect,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Scope that make GUI elements inside scrolls
            </summary>
        </member>
        <member name="T:AngeliA.GUIScrollScope">
            <summary>
            Scope that make GUI elements inside scrolls
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	static Int2 ScrollPos;
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		var cameraRect = Renderer.CameraRect;
            
            		using (var scroll = new GUIScrollScope(cameraRect, ScrollPos, new Int2(0, -4096), new Int2(0, 4096))) {
            			ScrollPos = scroll.Position;
            
            			Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.x + 1024, cameraRect.y, 0, 0, 0, 512, 512);
            			Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.x + 1024, cameraRect.y + 1024, 0, 0, 0, 512, 512);
            			Renderer.Draw(BuiltInSprite.ICON_ENTITY, cameraRect.x + 1024, cameraRect.y + 2048, 0, 0, 0, 512, 512);
            
            		}
            
            	}
            
            }
            </code></example>	
        </member>
        <member name="M:AngeliA.GUIScrollScope.#ctor(AngeliA.IRect,AngeliA.Int2,AngeliA.Int2,AngeliA.Int2,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Scope that make GUI elements inside scrolls
            </summary>
            <param name="rect">Content rect position in global space</param>
            <param name="position">Scroll position in global space</param>
            <param name="min">Minimal limitation for the scrolling</param>
            <param name="max">Maximal limitation for the scrolling</param>
            <param name="mouseWheelForVertical">True if the mouse wheel control vertical scroll instead of horizontal</param>
            <param name="reverseMouseWheel">True if the mouse wheel scroll should reverse in direction</param>
            <param name="layer">Which render layer does it scrolls</param>
        </member>
        <member name="T:AngeliA.GUISkinScope">
            <summary>
            Scope that change the skin of the GUI elements inside
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		using (new GUISkinScope(/*Your GUI Skin*/)) {
            
            			// GUI elements inside will use the given GUI skin
            
            		}
            
            	}
            
            }
            </code></example>	
        </member>
        <member name="M:AngeliA.GUISkinScope.#ctor">
            <summary>
            Scope that change the skin of the GUI elements inside
            </summary>
        </member>
        <member name="M:AngeliA.GUISkinScope.#ctor(AngeliA.GUISkin)">
            <summary>
            Scope that change the skin of the GUI elements inside
            </summary>
        </member>
        <member name="T:AngeliA.IgnoreInputScope">
            <summary>
            Scope that make GUI elements ignore keyboard or mouse input from user
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		using (new IgnoreInputScope()) {
            
            			// GUI elements inside will ignore keyboard or mouse input from user
            
            		}
            
            	}
            
            }
            </code></example>	
        </member>
        <member name="M:AngeliA.IgnoreInputScope.#ctor">
            <summary>
            Scope that make GUI elements ignore keyboard or mouse input from user
            </summary>
        </member>
        <member name="M:AngeliA.IgnoreInputScope.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Scope that make GUI elements ignore keyboard or mouse input from user
            </summary>
        </member>
        <member name="T:AngeliA.LayerScope">
            <summary>
            Scope that make rendering cells inside use given render layer
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		using (new LayerScope(RenderLayer.ADD)) {
            
            			// Rendering cells inside will be draw into additive layer
            
            		}
            
            	}
            
            }
            </code></example>	
        </member>
        <member name="M:AngeliA.LayerScope.#ctor(System.Int32)">
            <summary>
            Scope that make rendering cells inside use given render layer
            </summary>
            <param name="layer">Use RenderLayer.XXX to get this index</param>
        </member>
        <member name="T:AngeliA.ReverseCellsScope">
            <summary>
            Scope that make rendering cells reverse in sorting order
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		using (new ReverseCellsScope()) {
            
            			// Rendering cells inside will be reversed in sorting order
            
            		}
            
            	}
            
            }
            </code></example>	
        </member>
        <member name="M:AngeliA.ReverseCellsScope.#ctor">
            <summary>
            Scope that make rendering cells reverse in sorting order
            </summary>
        </member>
        <member name="T:AngeliA.RotateCellScope">
            <summary>
            Scope that make rendering cells rotate
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		var cameraRect = Renderer.CameraRect;
            
            		int rot = QTest.Int("Rot", 0, 0, 360);
            		int pointX = QTest.Int("Pivot X", 4096, 0, 4096 * 2);
            		int pointY = QTest.Int("Pivot Y", 2048, 0, 4096);
            		QTest.Mark(new Int2(cameraRect.x + pointX, cameraRect.y + pointY));
            
            		using (var scroll = new RotateCellScope(rot, cameraRect.x + pointX, cameraRect.y + pointY)) {
            
            			Renderer.Draw(
            				BuiltInSprite.ICON_ENTITY, 
            				cameraRect.CenterX(), cameraRect.CenterY(), 
            				500, 500, 0, 512, 512
            			);
            
            		}
            
            	}
            
            }
            </code></example>	
        </member>
        <member name="M:AngeliA.RotateCellScope.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Scope that make rendering cells rotate
            </summary>
            <param name="rotation"></param>
            <param name="pointX">Orientation point X in global space</param>
            <param name="pointY">Orientation point Y in global space</param>
            <param name="keepOriginalRotation">True if only change the position of cells (not rotation)</param>
        </member>
        <member name="M:AngeliA.RotateCellScope.#ctor">
            <summary>
            Scope that make rendering cells rotate
            </summary>
        </member>
        <member name="T:AngeliA.SheetIndexScope">
            <summary>
            Scope that change sheet index of the rendering cells inside
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		using (new SheetIndexScope(/*Your Sheet Index*/)) {
            
            			// Rendering cells inside will render with given sheet
            
            		}
            
            	}
            
            }
            </code></example>	
        </member>
        <member name="M:AngeliA.SheetIndexScope.#ctor">
            <summary>
            Scope that change sheet index of the rendering cells inside
            </summary>
        </member>
        <member name="M:AngeliA.SheetIndexScope.#ctor(System.Int32)">
            <summary>
            Scope that change sheet index of the rendering cells inside
            </summary>
        </member>
        <member name="T:AngeliA.ShiftCellsScope">
            <summary>
            Scope that shift position of the rendering cells inside
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		using (new ShiftCellsScope(/*Your Offset Position Here*/)) {
            
            			// Rendering cells inside will offset their position
            
            		}
            
            	}
            
            }
            </code></example>	
        </member>
        <member name="M:AngeliA.ShiftCellsScope.#ctor">
            <summary>
            Scope that shift position of the rendering cells inside
            </summary>
        </member>
        <member name="M:AngeliA.ShiftCellsScope.#ctor(AngeliA.Int2)">
            <summary>
            Scope that shift position of the rendering cells inside
            </summary>
        </member>
        <member name="T:AngeliA.TechGlitchEffectScope">
            <summary>
            Scope that make element inside looks glitched in the tech item style
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		using (new TechGlitchEffectScope()) {
            
            			// Rendering cells inside will looks glitched in the tech item style
            
            		}
            
            	}
            
            }
            </code></example>
        </member>
        <member name="M:AngeliA.TechGlitchEffectScope.#ctor(System.Int32,AngeliA.Color32)">
            <summary>
            Scope that make element inside looks glitched in the tech item style
            </summary>
        </member>
        <member name="M:AngeliA.TechGlitchEffectScope.#ctor">
            <summary>
            Scope that make element inside looks glitched in the tech item style
            </summary>
        </member>
        <member name="T:AngeliA.UILayerScope">
            <summary>
            Scope that make rendering cells inside into UI layer
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		using (new UILayerScope()) {
            
            			// Rendering cells inside will draw into UI layer
            
            		}
            
            	}
            
            }
            </code></example>	
        </member>
        <member name="M:AngeliA.UILayerScope.#ctor">
            <summary>
            Scope that make rendering cells inside into UI layer
            </summary>
        </member>
        <member name="M:AngeliA.UILayerScope.#ctor(System.Boolean)">
            <summary>
            Scope that make rendering cells inside into UI layer
            </summary>
        </member>
        <member name="T:AngeliA.AtlasType">
            <summary>
            Type of sprite atlas
            </summary>
        </member>
        <member name="F:AngeliA.AtlasType.General">
            <summary>
            No special info
            </summary>
        </member>
        <member name="F:AngeliA.AtlasType.Level">
            <summary>
            Sprites inside are level blocks
            </summary>
        </member>
        <member name="F:AngeliA.AtlasType.Background">
            <summary>
            Sprites inside are background blocks
            </summary>
        </member>
        <member name="T:AngeliA.AtlasState">
            <summary>
            Internal data used for display folder layout
            </summary>
        </member>
        <member name="T:AngeliA.Atlas">
            <summary>
            Container of sprites inside artwork sheet
            </summary>
        </member>
        <member name="F:AngeliA.Atlas.ID">
            <summary>
            Unique ID of this atlas. From Name.AngeHash();
            </summary>
        </member>
        <member name="F:AngeliA.Atlas.Name">
            <summary>
            Unique name of this atlas
            </summary>
        </member>
        <member name="F:AngeliA.Atlas.State">
            <summary>
            Internal data used for display folder layout
            </summary>
        </member>
        <member name="P:AngeliA.Atlas.IsFolder">
            <summary>
            True if this atlas is folder
            </summary>
        </member>
        <member name="P:AngeliA.Atlas.InFolder">
            <summary>
            True if this atlas is inside a folder
            </summary>
        </member>
        <member name="T:AngeliA.SpriteGroup">
            <summary>
            A chain of AngeSprites
            </summary>
        </member>
        <member name="P:AngeliA.SpriteGroup.Count">
            <summary>
            How many sprites does this group have
            </summary>
        </member>
        <member name="F:AngeliA.SpriteGroup.ID">
            <summary>
            Unique ID of this group
            </summary>
        </member>
        <member name="F:AngeliA.SpriteGroup.Name">
            <summary>
            Unique name of this group
            </summary>
        </member>
        <member name="F:AngeliA.SpriteGroup.LoopStart">
            <summary>
            Sprite index this animation start to play after it reach the end. Set to -1 for not loop.
            </summary>
        </member>
        <member name="F:AngeliA.SpriteGroup.Sprites">
            <summary>
            Instance of sprite it holds
            </summary>
        </member>
        <member name="F:AngeliA.SpriteGroup.Animated">
            <summary>
            True if this group is animation group
            </summary>
        </member>
        <member name="F:AngeliA.SpriteGroup.WithRule">
            <summary>
            True if this group contains sprite with auto tiling rule
            </summary>
        </member>
        <member name="F:AngeliA.SpriteGroup.Random">
            <summary>
            True if this group should apply random paiting brush in map editor
            </summary>
        </member>
        <member name="T:AngeliA.Sheet">
            <summary>
            Artwork sheet that holds sprites, sprite groups, atlas and textures data for rendering
            </summary>
        </member>
        <member name="F:AngeliA.Sheet.Sprites">
            <summary>
            All sprite instances inside this sheet
            </summary>
        </member>
        <member name="F:AngeliA.Sheet.Groups">
            <summary>
            All sprite group instances inside this sheet
            </summary>
        </member>
        <member name="F:AngeliA.Sheet.Atlas">
            <summary>
            All atlas instances inside this sheet
            </summary>
        </member>
        <member name="M:AngeliA.Sheet.#ctor(System.Collections.Generic.List{AngeliA.AngeSprite},System.Collections.Generic.List{AngeliA.Atlas},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a sheet with given data
            </summary>
            <param name="sprites"></param>
            <param name="atlasInfo"></param>
            <param name="ignoreGroups">True if do not require sprite group</param>
            <param name="ignoreSpriteWithIgnoreTag">True if do not load sprites with Tag.Palette</param>
            <param name="ignoreTextureAndPixels">True if do not load pixel data and do not create textures</param>
        </member>
        <member name="M:AngeliA.Sheet.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Artwork sheet that holds sprites, sprite groups, atlas and textures data for rendering
            </summary>
            <param name="ignoreGroups">True if do not require sprite group</param>
            <param name="ignoreSpriteWithPaletteTag">True if do not load sprites with Tag.Palette</param>
            <param name="ignoreTextureAndPixels">True if do not load pixel data and do not create textures</param>
        </member>
        <member name="M:AngeliA.Sheet.SetData(System.Collections.Generic.List{AngeliA.AngeSprite},System.Collections.Generic.List{AngeliA.Atlas})">
            <summary>
            Set the sprites and atlas data of this sheet
            </summary>
        </member>
        <member name="M:AngeliA.Sheet.Clear">
            <summary>
            Clear all content inside this sheet
            </summary>
        </member>
        <member name="M:AngeliA.Sheet.GetSpriteAnimationDuration(AngeliA.SpriteGroup)">
            <summary>
            Get how long does the given animation group takes in frame
            </summary>
        </member>
        <member name="M:AngeliA.Sheet.TryGetSpriteFromAnimationFrame(AngeliA.SpriteGroup,System.Int32,AngeliA.AngeSprite@,System.Int32)">
            <summary>
            Get current showing sprite from a animation group
            </summary>
            <param name="group"></param>
            <param name="localFrame">Animation frame start from 0</param>
            <param name="sprite">Result sprite</param>
            <param name="loopStart">Sprite index this animation start to play after it reach the end. Set to -1 to use loop start value from group.</param>
            <returns>True if the sprite is successfuly found</returns>
        </member>
        <member name="M:AngeliA.Sheet.TryGetTextureFromPool(System.Int32,System.Object@)">
            <summary>
            Get texture for rendering from given ID
            </summary>
        </member>
        <member name="M:AngeliA.Sheet.SyncSpritePixelsIntoTexturePool(AngeliA.AngeSprite)">
            <summary>
            Update rendering texture for the sprite if the pixel content changed
            </summary>
        </member>
        <member name="M:AngeliA.Sheet.MoveAtlas(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Move the atlas inside the atlas list
            </summary>
        </member>
        <member name="M:AngeliA.Sheet.IndexOfSprite(System.Int32)">
            <summary>
            Find the sprite's index in the list
            </summary>
            <returns>-1 if the sprite not found</returns>
        </member>
        <member name="M:AngeliA.Sheet.IndexOfGroup(System.Int32)">
            <summary>
            Find the group's index in the list
            </summary>
            <returns>-1 if the group not found</returns>
        </member>
        <member name="M:AngeliA.Sheet.ContainSprite(System.Int32)">
            <summary>
            True if there is a sprite with given ID.
            </summary>
        </member>
        <member name="M:AngeliA.Sheet.ContainGroup(System.Int32)">
            <summary>
            True if there is a group with given ID.
            </summary>
        </member>
        <member name="M:AngeliA.Sheet.AddSprite(AngeliA.AngeSprite)">
            <summary>
            Add the given sprite into this sheet
            </summary>
            <returns>True if the sprite is successfuly added</returns>
        </member>
        <member name="M:AngeliA.Sheet.CombineSheet(AngeliA.Sheet,System.Boolean)">
            <summary>
            Add all content from given sheet into this sheet.
            </summary>
            <param name="sheet"></param>
            <param name="renameDuplicateSprites">Set to false to skip the sprite with same name</param>
        </member>
        <member name="M:AngeliA.Sheet.CombineAllSheetInFolder(System.String,System.Boolean,System.String)">
            <summary>
            Add all content from sheets from given folder into this sheet.
            </summary>
            <param name="folderPath"></param>
            <param name="topOnly"></param>
            <param name="ignoreNameWithExtension">Ignore sheets with this name</param>
        </member>
        <member name="M:AngeliA.Sheet.CreateSprite(System.String,AngeliA.IRect,System.Int32)">
            <summary>
            Create a sprite without add into this sheet
            </summary>
        </member>
        <member name="M:AngeliA.Sheet.GetAvailableSpriteName(System.String)">
            <summary>
            Get a new sprite name that be add into this sheet
            </summary>
        </member>
        <member name="T:AngeliA.AngeSprite">
            <summary>
            Artwork sprite data for rendering the game
            </summary>
        </member>
        <member name="F:AngeliA.AngeSprite.ID">
            <summary>
            Global unique ID for this sprite. from RealName.AngeHash();
            </summary>
        </member>
        <member name="F:AngeliA.AngeSprite.RealName">
            <summary>
            Uniaue logical name of this sprite.
            </summary>
        </member>
        <member name="F:AngeliA.AngeSprite.GlobalWidth">
            <summary>
            Width in global space. Calculate from the pixel rect width multiply Const.ART_SCALE
            </summary>
        </member>
        <member name="F:AngeliA.AngeSprite.GlobalHeight">
            <summary>
            Height in global space. Calculate from the pixel rect height multiply Const.ART_SCALE
            </summary>
        </member>
        <member name="F:AngeliA.AngeSprite.PixelRect">
            <summary>
            Rect position of the pixel data inside the atlas canvas
            </summary>
        </member>
        <member name="F:AngeliA.AngeSprite.PivotX">
            <summary>
            Pivot X (0 means left edge. 1000 means right edge)
            </summary>
        </member>
        <member name="F:AngeliA.AngeSprite.PivotY">
            <summary>
            Pivot Y (0 means bottom edge. 1000 means top edge)
            </summary>
        </member>
        <member name="F:AngeliA.AngeSprite.LocalZ">
            <summary>
            Z value for sort rendering cells
            </summary>
        </member>
        <member name="F:AngeliA.AngeSprite.GlobalBorder">
            <summary>
            Border value in global space.
            </summary>
        </member>
        <member name="F:AngeliA.AngeSprite.AtlasID">
            <summary>
            AngeHash of the atlas this sprite belongs to
            </summary>
        </member>
        <member name="F:AngeliA.AngeSprite.Atlas">
            <summary>
            Instance of the atlas this sprite belongs to
            </summary>
        </member>
        <member name="F:AngeliA.AngeSprite.Group">
            <summary>
            Instance of the sprite group this sprite belongs to. Null if this sprite is individual.
            </summary>
        </member>
        <member name="F:AngeliA.AngeSprite.IsTrigger">
            <summary>
            True if this sprite is tagged as trigger.
            </summary>
        </member>
        <member name="F:AngeliA.AngeSprite.Rule">
            <summary>
            Rule for auto tiling map blocks
            </summary>
        </member>
        <member name="F:AngeliA.AngeSprite.Tag">
            <summary>
            Meta tag of this sprite. Multiple tags can be contains at same time.
            </summary>
        </member>
        <member name="F:AngeliA.AngeSprite.Duration">
            <summary>
            Animation duration of this sprite
            </summary>
        </member>
        <member name="F:AngeliA.AngeSprite.SummaryTint">
            <summary>
            Average color of the pixels
            </summary>
        </member>
        <member name="F:AngeliA.AngeSprite.Pixels">
            <summary>
            The pixels content data
            </summary>
        </member>
        <member name="M:AngeliA.AngeSprite.ResizePixelRect(AngeliA.IRect,System.Boolean,System.Boolean@)">
            <summary>
            Set pixel content data to new size without delete the data inside
            </summary>
            <param name="newRect">New pixel rect position</param>
            <param name="resizeBorder">True if auto resize the border</param>
            <param name="contentChanged">True if any pixel data changed</param>
        </member>
        <member name="M:AngeliA.AngeSprite.CreateCopy">
            <summary>
            Create a new sprite instance with same data with this one
            </summary>
        </member>
        <member name="M:AngeliA.AngeSprite.CopyTo(AngeliA.AngeSprite)">
            <summary>
            Copy the data to the given sprite
            </summary>
            <returns>The target sprite</returns>
        </member>
        <member name="M:AngeliA.AngeSprite.ValidBorders(System.Nullable{AngeliA.Direction8})">
            <summary>
            Make sure the borders don't overlaps each others
            </summary>
        </member>
        <member name="M:AngeliA.AngeSprite.SetPixelDirty">
            <summary>
            Mark this sprite as changed without save
            </summary>
        </member>
        <member name="M:AngeliA.AngeSprite.MakeDedicatedForTexture(System.Object,AngeliA.Sheet)">
            <summary>
            Link the given sprite to the texture
            </summary>
            <param name="texture"></param>
            <param name="sheet"></param>
        </member>
        <member name="M:AngeliA.AngeSprite.RemoveFromDedicatedTexture(AngeliA.Sheet)">
            <summary>
            Remove the texture dedicated sprite 
            </summary>
            <param name="sheet"></param>
        </member>
        <member name="T:AngeliA.AudioCode">
            <summary>
            Quick setup for an audio ID
            </summary>
            <example><code>
            private static readonly AudioCode AudioCodeName = "Name of audio file without extension";
            </code></example>
        </member>
        <member name="M:AngeliA.AudioCode.#ctor(System.String)">
            <summary>
            Quick setup for an audio ID
            </summary>
            <example><code>
            private static readonly AudioCode AudioCodeName = "Name of audio file without extension";
            </code></example>
        </member>
        <member name="T:AngeliA.Rule">
            <summary>
            Single checking rule for auto tiling map blocks
            </summary>
        </member>
        <member name="F:AngeliA.Rule.Whatever">
            <summary>
            Always true, do not check
            </summary>
        </member>
        <member name="F:AngeliA.Rule.SameTile">
            <summary>
            True if the target block is the same with source
            </summary>
        </member>
        <member name="F:AngeliA.Rule.NotSameTile">
            <summary>
            True if the target block is the different with source
            </summary>
        </member>
        <member name="F:AngeliA.Rule.AnyTile">
            <summary>
            True if the target block is not 0
            </summary>
        </member>
        <member name="F:AngeliA.Rule.Empty">
            <summary>
            True if the target block is 0
            </summary>
        </member>
        <member name="T:AngeliA.BlockRule">
            <summary>
            Checking rules for auto tiling map blocks for a source block
            </summary>
            <param name="ruleTL">Rule apply to the top-left block</param>
            <param name="ruleT">Rule apply to the top block</param>
            <param name="ruleTR">Rule apply to the top-right block</param>
            <param name="ruleL">Rule apply to the left block</param>
            <param name="ruleR">Rule apply to the right block</param>
            <param name="ruleBL">Rule apply to the bottom-left block</param>
            <param name="ruleB">Rule apply to the bottom block</param>
            <param name="ruleBR">Rule apply to the bottom-right block</param>
        </member>
        <member name="M:AngeliA.BlockRule.#ctor(AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule,AngeliA.Rule)">
            <summary>
            Checking rules for auto tiling map blocks for a source block
            </summary>
            <param name="ruleTL">Rule apply to the top-left block</param>
            <param name="ruleT">Rule apply to the top block</param>
            <param name="ruleTR">Rule apply to the top-right block</param>
            <param name="ruleL">Rule apply to the left block</param>
            <param name="ruleR">Rule apply to the right block</param>
            <param name="ruleBL">Rule apply to the bottom-left block</param>
            <param name="ruleB">Rule apply to the bottom block</param>
            <param name="ruleBR">Rule apply to the bottom-right block</param>
        </member>
        <member name="F:AngeliA.BlockRule.EMPTY">
            <summary>
            Empty rule what don't perform any rule check
            </summary>
        </member>
        <member name="P:AngeliA.BlockRule.IsEmpty">
            <summary>
            True if the rule is all set to whatever
            </summary>
        </member>
        <member name="P:AngeliA.BlockRule.Item(System.Int32)">
            <summary>
            Get rule at given index. (↖ ↑ ↗ ← → ↙ ↓ ↘)
            </summary>
        </member>
        <member name="F:AngeliA.BlockRule.RuleTL">
            <summary>
            Rule apply to the top-left block 
            </summary>
        </member>
        <member name="F:AngeliA.BlockRule.RuleT">
            <summary>
            Rule apply to the top block 
            </summary>
        </member>
        <member name="F:AngeliA.BlockRule.RuleTR">
            <summary>
            Rule apply to the top-right block 
            </summary>
        </member>
        <member name="F:AngeliA.BlockRule.RuleL">
            <summary>
            Rule apply to the left block 
            </summary>
        </member>
        <member name="F:AngeliA.BlockRule.RuleR">
            <summary>
            Rule apply to the right block 
            </summary>
        </member>
        <member name="F:AngeliA.BlockRule.RuleBL">
            <summary>
            Rule apply to the bottom-left block 
            </summary>
        </member>
        <member name="F:AngeliA.BlockRule.RuleB">
            <summary>
            Rule apply to the bottom block 
            </summary>
        </member>
        <member name="F:AngeliA.BlockRule.RuleBR">
            <summary>
            Rule apply to the bottom-right block 
            </summary>
        </member>
        <member name="M:AngeliA.BlockRule.IsSameWith(AngeliA.BlockRule)">
            <summary>
            True if the rule is same with given rule
            </summary>
        </member>
        <member name="T:AngeliA.Color32">
            <summary>
            Color with byte for data
            </summary>
        </member>
        <member name="F:AngeliA.Color32.r">
            <summary>
            Red channel (0 means no value, 255 means full value)
            </summary>
        </member>
        <member name="F:AngeliA.Color32.g">
            <summary>
            Green channel (0 means no value, 255 means full value)
            </summary>
        </member>
        <member name="F:AngeliA.Color32.b">
            <summary>
            Blue channel (0 means no value, 255 means full value)
            </summary>
        </member>
        <member name="F:AngeliA.Color32.a">
            <summary>
            Alpha channel (0 means no value, 255 means full value)
            </summary>
        </member>
        <member name="M:AngeliA.Color32.Lerp(AngeliA.Color32,AngeliA.Color32,System.Single)">
            <summary>
            Find a color transform between two given colors smoothly
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t">Representation of the position. 0 means value A, 1 means value B.</param>
        </member>
        <member name="M:AngeliA.Color32.LerpUnclamped(AngeliA.Color32,AngeliA.Color32,System.Single)">
            <summary>
            Find a color transform between two given colors smoothly without limiting the t value
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t">Representation of the position. 0 means value A, 1 means value B.</param>
        </member>
        <member name="T:AngeliA.ColorF">
            <summary>
            Color with float as data
            </summary>
        </member>
        <member name="F:AngeliA.ColorF.r">
            <summary>
            Red channel (0 means no value, 1 means full value)
            </summary>
        </member>
        <member name="F:AngeliA.ColorF.g">
            <summary>
            Green channel (0 means no value, 1 means full value)
            </summary>
        </member>
        <member name="F:AngeliA.ColorF.b">
            <summary>
            Blue channel (0 means no value, 1 means full value)
            </summary>
        </member>
        <member name="F:AngeliA.ColorF.a">
            <summary>
            Alpha channel (0 means no value, 1 means full value)
            </summary>
        </member>
        <member name="M:AngeliA.ColorF.Lerp(AngeliA.ColorF,AngeliA.ColorF,System.Single)">
            <summary>
            Find a color transform between two given colors smoothly
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t">Representation of the position. 0 means value A, 1 means value B.</param>
        </member>
        <member name="T:AngeliA.ColorGradient">
            <summary>
            Represent a list of colors that creates smooth transitions between each other
            </summary>
        </member>
        <member name="M:AngeliA.ColorGradient.#ctor(System.ValueTuple{AngeliA.Color32,System.Single}[])">
            <summary>
            Represent a list of colors that creates smooth transitions between each other
            </summary>
            <param name="values">Color array</param>
        </member>
        <member name="M:AngeliA.ColorGradient.Evaluate(System.Single)">
            <summary>
            Get the smooth color transition for given value
            </summary>
        </member>
        <member name="T:AngeliA.Float2">
            <summary>
            2D vector with float data values
            </summary>
        </member>
        <member name="P:AngeliA.Float2.Item(System.Int32)">
            <summary>
            Get float data inside with given index. (0 means x, 1 means y)
            </summary>
        </member>
        <member name="P:AngeliA.Float2.Normalized">
            <summary>
            Get a vector that has a length of 1, while maintaining the same direction as the original vector.
            </summary>
        </member>
        <member name="P:AngeliA.Float2.Magnitude">
            <summary>
            Length of this vector
            </summary>
        </member>
        <member name="P:AngeliA.Float2.SqrMagnitude">
            <summary>
            Square of the length of this vector
            </summary>
        </member>
        <member name="M:AngeliA.Float2.#ctor(System.Single,System.Single)">
            <summary>
            2D vector with float data values
            </summary>
        </member>
        <member name="M:AngeliA.Float2.Set(System.Single,System.Single)">
            <summary>
            Set both values of this vector
            </summary>
            <param name="newX"></param>
            <param name="newY"></param>
        </member>
        <member name="M:AngeliA.Float2.Lerp(AngeliA.Float2,AngeliA.Float2,System.Single)">
            <summary>
            Find a value transform between two given float smoothly
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t">Representation of the position. 0 means value A, 1 means value B.</param>
        </member>
        <member name="M:AngeliA.Float2.LerpUnclamped(AngeliA.Float2,AngeliA.Float2,System.Single)">
            <summary>
            Find a value transform between two given float smoothly without limit the t value
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t">Representation of the position. 0 means value A, 1 means value B.</param>
        </member>
        <member name="M:AngeliA.Float2.MoveTowards(AngeliA.Float2,AngeliA.Float2,System.Single)">
            <summary>
            Moves a point towards the target with distance limitation
            </summary>
            <param name="current">Starting position</param>
            <param name="target">Target end position</param>
            <param name="maxDistanceDelta">Distance limit</param>
            <returns>The new position</returns>
        </member>
        <member name="M:AngeliA.Float2.Normalize">
            <summary>
            Make the vector have length of 1 while maintaining the same direction as original.
            </summary>
        </member>
        <member name="M:AngeliA.Float2.Dot(AngeliA.Float2,AngeliA.Float2)">
            <summary>
            The dot product of two vectors returns a float value representing the cosine of the angle between them
            </summary>
        </member>
        <member name="M:AngeliA.Float2.SignedAngle(AngeliA.Float2,AngeliA.Float2)">
            <summary>
            Signed angle in degrees between from and to
            </summary>
        </member>
        <member name="M:AngeliA.Float2.Distance(AngeliA.Float2,AngeliA.Float2)">
            <summary>
            Distance between two given position
            </summary>
        </member>
        <member name="T:AngeliA.Float3">
            <summary>
            3D vector with float data values
            </summary>
        </member>
        <member name="P:AngeliA.Float3.Item(System.Int32)">
            <summary>
            Get float data inside with given index. (0 means x, 1 means y, 2 means z)
            </summary>
        </member>
        <member name="P:AngeliA.Float3.Normalized">
            <summary>
            Get a vector that has a length of 1, while maintaining the same direction as the original vector.
            </summary>
        </member>
        <member name="P:AngeliA.Float3.Magnitude">
            <summary>
            Length of this vector
            </summary>
        </member>
        <member name="P:AngeliA.Float3.SqrMagnitude">
            <summary>
            Square of the length of this vector
            </summary>
        </member>
        <member name="M:AngeliA.Float3.Lerp(AngeliA.Float3,AngeliA.Float3,System.Single)">
            <summary>
            Find a value transform between two given float smoothly
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t">Representation of the position. 0 means value A, 1 means value B.</param>
        </member>
        <member name="M:AngeliA.Float3.LerpUnclamped(AngeliA.Float3,AngeliA.Float3,System.Single)">
            <summary>
            Find a value transform between two given float smoothly without limit the t value
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t">Representation of the position. 0 means value A, 1 means value B.</param>
        </member>
        <member name="M:AngeliA.Float3.MoveTowards(AngeliA.Float3,AngeliA.Float3,System.Single)">
            <summary>
            Moves a point towards the target with distance limitation
            </summary>
            <param name="current">Starting position</param>
            <param name="target">Target end position</param>
            <param name="maxDistanceDelta">Distance limit</param>
            <returns>The new position</returns>
        </member>
        <member name="M:AngeliA.Float3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            3D vector with float data values
            </summary>
        </member>
        <member name="M:AngeliA.Float3.#ctor(System.Single,System.Single)">
            <summary>
            3D vector with float data values. z = 0
            </summary>
        </member>
        <member name="M:AngeliA.Float3.Set(System.Single,System.Single,System.Single)">
            <summary>
            Set all values of this vector
            </summary>
            <param name="newX"></param>
            <param name="newY"></param>
            <param name="newZ"></param>
        </member>
        <member name="M:AngeliA.Float3.Normalize">
            <summary>
            Make the vector have length of 1 while maintaining the same direction as original.
            </summary>
        </member>
        <member name="M:AngeliA.Float3.Dot(AngeliA.Float3,AngeliA.Float3)">
            <summary>
            The dot product of two vectors returns a float value representing the cosine of the angle between them
            </summary>
        </member>
        <member name="M:AngeliA.Float3.Angle(AngeliA.Float3,AngeliA.Float3)">
            <summary>
            Angle in degrees between from and to
            </summary>
        </member>
        <member name="M:AngeliA.Float3.SignedAngle(AngeliA.Float3,AngeliA.Float3,AngeliA.Float3)">
            <summary>
            Signed angle in degrees between from and to in axis
            </summary>
        </member>
        <member name="M:AngeliA.Float3.Distance(AngeliA.Float3,AngeliA.Float3)">
            <summary>
            Distance between to points
            </summary>
        </member>
        <member name="T:AngeliA.Float4">
            <summary>
            4D vector with float data values
            </summary>
        </member>
        <member name="T:AngeliA.FRect">
            <summary>
            Rectangle with float data
            </summary>
        </member>
        <member name="F:AngeliA.FRect.x">
            <summary>
            Left position
            </summary>
        </member>
        <member name="F:AngeliA.FRect.y">
            <summary>
            Bottom position
            </summary>
        </member>
        <member name="F:AngeliA.FRect.width">
            <summary>
            Horizontal size
            </summary>
        </member>
        <member name="F:AngeliA.FRect.height">
            <summary>
            Vertical size
            </summary>
        </member>
        <member name="M:AngeliA.FRect.MinMaxRect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a rectangle from min and max positions
            </summary>
        </member>
        <member name="M:AngeliA.FRect.Contains(AngeliA.Float2)">
            <summary>
            True if the given point inside this rectangle
            </summary>
        </member>
        <member name="M:AngeliA.FRect.Overlaps(AngeliA.FRect)">
            <summary>
            True if the given rectangle overlaps the current one
            </summary>
        </member>
        <member name="T:AngeliA.Hotkey">
            <summary>
            Data for a keyboard hotkey configuration
            </summary>
        </member>
        <member name="F:AngeliA.Hotkey.Key">
            <summary>
            The target keyboard key
            </summary>
        </member>
        <member name="F:AngeliA.Hotkey.Ctrl">
            <summary>
            True if this hotkey require ctrl to be holding
            </summary>
        </member>
        <member name="F:AngeliA.Hotkey.Shift">
            <summary>
            True if this hotkey require shift to be holding
            </summary>
        </member>
        <member name="F:AngeliA.Hotkey.Alt">
            <summary>
            True if this hotkey require alt to be holding
            </summary>
        </member>
        <member name="M:AngeliA.Hotkey.#ctor(System.String)">
            <summary>
            Create a hotkey config from string data. Get this string using hotkey.GetStringData();
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AngeliA.Hotkey.Holding">
            <summary>
            True if the hotkey is currently holding
            </summary>
        </member>
        <member name="M:AngeliA.Hotkey.Down">
            <summary>
            True if the hotkey is pressed for the current frame
            </summary>
        </member>
        <member name="M:AngeliA.Hotkey.DownGUI">
            <summary>
            True if the hotkey is triggered repeatedly by holding
            </summary>
        </member>
        <member name="M:AngeliA.Hotkey.GetStringData">
            <summary>
            Get a string that saves the infomation of this hotkey
            </summary>
        </member>
        <member name="T:AngeliA.Int2">
            <summary>
            2D vector with intager data
            </summary>
        </member>
        <member name="P:AngeliA.Int2.Area">
            <summary>
            x * y
            </summary>
        </member>
        <member name="P:AngeliA.Int2.Item(System.Int32)">
            <summary>
            Get int data inside with given index. (0 means x, 1 means y)
            </summary>
        </member>
        <member name="P:AngeliA.Int2.Magnitude">
            <summary>
            Length of the vector
            </summary>
        </member>
        <member name="P:AngeliA.Int2.SqrMagnitude">
            <summary>
            Square length of the vector
            </summary>
        </member>
        <member name="M:AngeliA.Int2.Distance(AngeliA.Int2,AngeliA.Int2)">
            <summary>
            Distance between two given position
            </summary>
        </member>
        <member name="M:AngeliA.Int2.Shift(System.Int32,System.Int32)">
            <summary>
            Move the position with given amount
            </summary>
        </member>
        <member name="T:AngeliA.Int3">
            <summary>
            3D vector with intager data
            </summary>
        </member>
        <member name="P:AngeliA.Int3.Item(System.Int32)">
            <summary>
            Get int data inside with given index. (0 means x, 1 means y, 2 means z)
            </summary>
        </member>
        <member name="P:AngeliA.Int3.Magnitude">
            <summary>
            Length of this vector
            </summary>
        </member>
        <member name="P:AngeliA.Int3.SqrMagnitude">
            <summary>
            Square length of this vector
            </summary>
        </member>
        <member name="M:AngeliA.Int3.Distance(AngeliA.Int3,AngeliA.Int3)">
            <summary>
            Distance between two given position
            </summary>
        </member>
        <member name="M:AngeliA.Int3.Shift(System.Int32,System.Int32,System.Int32)">
            <summary>
            Move position by given amount
            </summary>
        </member>
        <member name="T:AngeliA.Int4">
            <summary>
            4D vector with intager data
            </summary>
        </member>
        <member name="M:AngeliA.Int4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            4D vector with intager data
            </summary>
        </member>
        <member name="P:AngeliA.Int4.Item(System.Int32)">
            <summary>
            Get int data inside with given index. (0 means x, 1 means y, 2 means z, 3 means w)
            </summary>
        </member>
        <member name="P:AngeliA.Int4.IsZero">
            <summary>
            True if all values of this vector are 0
            </summary>
        </member>
        <member name="P:AngeliA.Int4.left">
            <summary>
            Treat this vector as padding/border value with 4 directions
            </summary>
        </member>
        <member name="P:AngeliA.Int4.right">
            <summary>
            Treat this vector as padding/border value with 4 directions
            </summary>
        </member>
        <member name="P:AngeliA.Int4.down">
            <summary>
            Treat this vector as padding/border value with 4 directions
            </summary>
        </member>
        <member name="P:AngeliA.Int4.up">
            <summary>
            Treat this vector as padding/border value with 4 directions
            </summary>
        </member>
        <member name="P:AngeliA.Int4.horizontal">
            <summary>
            left + right
            </summary>
        </member>
        <member name="P:AngeliA.Int4.vertical">
            <summary>
            down + up
            </summary>
        </member>
        <member name="M:AngeliA.Int4.Direction(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a Int4 as a padding/border with 4 directions
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="down"></param>
            <param name="up"></param>
            <returns></returns>
        </member>
        <member name="M:AngeliA.Int4.Contains(System.Int32)">
            <summary>
            True if any value inside this vector is given value
            </summary>
        </member>
        <member name="M:AngeliA.Int4.Count(System.Int32)">
            <summary>
            How many value inside this vector is equal to given value
            </summary>
        </member>
        <member name="M:AngeliA.Int4.FindIndex(System.Int32)">
            <summary>
            Index of the given value from this vector
            </summary>
        </member>
        <member name="T:AngeliA.IntToChars">
            <summary>
            Get char array that holds the given intager as text content without creating heap pressure
            </summary>
        </member>
        <member name="M:AngeliA.IntToChars.#ctor(System.String,System.String)">
            <summary>
            Get char array that holds the given intager as text content without creating heap pressure 
            </summary>
            <param name="prefix">Label that add before the text content</param>
            <param name="suffix">Label that add after the text content</param>
        </member>
        <member name="M:AngeliA.IntToChars.GetChars(System.Int32)">
            <summary>
            Calculate the char array based on the given intager
            </summary>
        </member>
        <member name="M:AngeliA.IntToChars.Int_to_Chars(System.Int32,System.Char[],System.Int32@)">
            <summary>
            Calculate char array based on the given intager
            </summary>
            <param name="intValue"></param>
            <param name="charsValue"></param>
            <param name="startIndex">Index of the next edit value</param>
        </member>
        <member name="M:AngeliA.IntToChars.Chars_to_Int(System.Char[],System.Int32)">
            <summary>
            Get intager from the given char array
            </summary>
        </member>
        <member name="T:AngeliA.IRect">
            <summary>
            rectangle with intager data
            </summary>
        </member>
        <member name="F:AngeliA.IRect.x">
            <summary>
            Left position
            </summary>
        </member>
        <member name="F:AngeliA.IRect.y">
            <summary>
            Bottom position
            </summary>
        </member>
        <member name="F:AngeliA.IRect.width">
            <summary>
            Horizontal size
            </summary>
        </member>
        <member name="F:AngeliA.IRect.height">
            <summary>
            Vertical size
            </summary>
        </member>
        <member name="P:AngeliA.IRect.position">
            <summary>
            Always return (x, y) no matter size is positive of negative
            </summary>
        </member>
        <member name="P:AngeliA.IRect.size">
            <summary>
            (width, height)
            </summary>
        </member>
        <member name="M:AngeliA.IRect.SetMinMax(AngeliA.Int2,AngeliA.Int2)">
            <summary>
            Set value of this rectangle with min and max position
            </summary>
        </member>
        <member name="M:AngeliA.IRect.MinMaxRect(AngeliA.Int2,AngeliA.Int2)">
            <summary>
            Create a rectangle with given min and max positions
            </summary>
        </member>
        <member name="M:AngeliA.IRect.MinMaxRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a rectangle with given min and max positions
            </summary>
        </member>
        <member name="M:AngeliA.IRect.Contains(AngeliA.Int2)">
            <summary>
            True if the given position is inside this rectangle
            </summary>
        </member>
        <member name="M:AngeliA.IRect.Overlaps(AngeliA.IRect)">
            <summary>
            True if the given rectangle overlap with current one
            </summary>
        </member>
        <member name="M:AngeliA.IRect.Point(AngeliA.Int2)">
            <summary>
            Create a rectangle with 1 in width and height
            </summary>
        </member>
        <member name="M:AngeliA.IRect.Point(System.Int32,System.Int32)">
            <summary>
            Create a rectangle with 1 in width and height
            </summary>
        </member>
        <member name="T:AngeliA.Gamekey">
            <summary>
            Keys that generaly used with AngeliA games
            </summary>
        </member>
        <member name="F:AngeliA.Gamekey.Left">
            <summary>
            Direction left
            </summary>
        </member>
        <member name="F:AngeliA.Gamekey.Right">
            <summary>
            Direction right
            </summary>
        </member>
        <member name="F:AngeliA.Gamekey.Down">
            <summary>
            Direction down
            </summary>
        </member>
        <member name="F:AngeliA.Gamekey.Up">
            <summary>
            Direction up
            </summary>
        </member>
        <member name="F:AngeliA.Gamekey.Action">
            <summary>
            Make player attack or perform action. Confirm/OK button in menu UI.
            </summary>
        </member>
        <member name="F:AngeliA.Gamekey.Jump">
            <summary>
            Make player jump or cancel action. Cancel button in menu UI.
            </summary>
        </member>
        <member name="F:AngeliA.Gamekey.Start">
            <summary>
            Start the game in title screen, pause the game during gameplay, quit in-game panel UI.
            </summary>
        </member>
        <member name="F:AngeliA.Gamekey.Select">
            <summary>
            Open main menu for player, quit in-game panel UI, perform some uncommon logic inside in-game UI.
            </summary>
        </member>
        <member name="T:AngeliA.GamepadKey">
            <summary>
            Key on the gamepad
            </summary>
        </member>
        <member name="F:AngeliA.GamepadKey.DpadUp">
            <summary>
            D-Pad up button
            </summary>
        </member>
        <member name="F:AngeliA.GamepadKey.DpadDown">
            <summary>
            D-Pad down button
            </summary>
        </member>
        <member name="F:AngeliA.GamepadKey.DpadLeft">
            <summary>
            D-Pad left button
            </summary>
        </member>
        <member name="F:AngeliA.GamepadKey.DpadRight">
            <summary>
            D-Pad right button
            </summary>
        </member>
        <member name="F:AngeliA.GamepadKey.North">
            <summary>
            Face button on top
            </summary>
        </member>
        <member name="F:AngeliA.GamepadKey.East">
            <summary>
            Face button on right side
            </summary>
        </member>
        <member name="F:AngeliA.GamepadKey.South">
            <summary>
            Face button on button
            </summary>
        </member>
        <member name="F:AngeliA.GamepadKey.West">
            <summary>
            Face button on left side
            </summary>
        </member>
        <member name="F:AngeliA.GamepadKey.LeftStick">
            <summary>
            Left joy stick (press it as a button)
            </summary>
        </member>
        <member name="F:AngeliA.GamepadKey.RightStick">
            <summary>
            Right joy stick (press it as a button)
            </summary>
        </member>
        <member name="F:AngeliA.GamepadKey.LeftShoulder">
            <summary>
            Left shoulder button (the one on top)
            </summary>
        </member>
        <member name="F:AngeliA.GamepadKey.RightShoulder">
            <summary>
            Right shoulder button (the one on top)
            </summary>
        </member>
        <member name="F:AngeliA.GamepadKey.Start">
            <summary>
            System button start (+)
            </summary>
        </member>
        <member name="F:AngeliA.GamepadKey.Select">
            <summary>
            System button select (-)
            </summary>
        </member>
        <member name="F:AngeliA.GamepadKey.LeftTrigger">
            <summary>
            Left trigger button (the one on bottom)
            </summary>
        </member>
        <member name="F:AngeliA.GamepadKey.RightTrigger">
            <summary>
            Right trigger button (the one on bottom)
            </summary>
        </member>
        <member name="T:AngeliA.KeyboardKey">
            <summary>
            Key on the keyboard
            </summary>
        </member>
        <member name="T:AngeliA.LanguageCode">
            <summary>
            Quick setup for an language system key
            </summary>
            <example><code>
            private static readonly LanguageCode LanguageCodeName = ("Key for language system", "Default content in English");
            </code></example>
        </member>
        <member name="M:AngeliA.LanguageCode.#ctor(System.String,System.String)">
            <summary>
            Quick setup for an language system key
            </summary>
            <example><code>
            private static readonly LanguageCode LanguageCodeName = ("Key for language system", "Default content in English");
            </code></example>
        </member>
        <member name="T:AngeliA.OrientedSprite">
            <summary>
            A set of AngeSprite ID that auto handles orientation logic
            </summary>
        </member>
        <member name="P:AngeliA.OrientedSprite.IsValid">
            <summary>
            True if any sprite ID is not zero
            </summary>
        </member>
        <member name="F:AngeliA.OrientedSprite.AttachmentName">
            <summary>
            Name of the source unit (eg. "Tail" "UpperArm" "Mouth")
            </summary>
        </member>
        <member name="F:AngeliA.OrientedSprite.SpriteID_FL">
            <summary>
            Sprite ID for facing Front-Left
            </summary>
        </member>
        <member name="F:AngeliA.OrientedSprite.SpriteID_FR">
            <summary>
            Sprite ID for facing Front-Right
            </summary>
        </member>
        <member name="F:AngeliA.OrientedSprite.SpriteID_BL">
            <summary>
            Sprite ID for facing Back-Left
            </summary>
        </member>
        <member name="F:AngeliA.OrientedSprite.SpriteID_BR">
            <summary>
            Sprite ID for facing Back-Right
            </summary>
        </member>
        <member name="M:AngeliA.OrientedSprite.#ctor(System.String,System.String)">
            <summary>
            Create a new OSprite from current render sheet
            </summary>
            <param name="hostName">Which character own this OSprite</param>
            <param name="attachmentName">Which part of the character own this OSprite</param>
        </member>
        <member name="M:AngeliA.OrientedSprite.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new OSprite from current render sheet
            </summary>
            <param name="hostName">Which character own this OSprite</param>
            <param name="attachmentName">Which part of the character own this OSprite</param>
            <param name="attachmentNameAlt">Failback attachment name if "attachmentName" not found</param>
        </member>
        <member name="M:AngeliA.OrientedSprite.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Create a new OSprite from current render sheet
            </summary>
            <param name="hostName">Which character own this OSprite</param>
            <param name="attachmentName">Which part of the character own this OSprite</param>
            <param name="attachmentNameAltA">Failback attachment name if "attachmentName" not found</param>
            <param name="attachmentNameAltB">Failback attachment name if "attachmentNameA" not found</param>
        </member>
        <member name="M:AngeliA.OrientedSprite.#ctor(System.String,System.String[])">
            <summary>
            Create a new OSprite from current render sheet
            </summary>
            <param name="hostName">Which character own this OSprite</param>
            <param name="attachmentNames">Which part of the character own this OSprite. Will be load by the order of the array until one name is valid.</param>
        </member>
        <member name="M:AngeliA.OrientedSprite.LoadFromSheet(System.String,System.String)">
            <summary>
            Load this OSprite from current render sheet
            </summary>
            <param name="hostName">Which character own this OSprite</param>
            <param name="attachmentName">Which part of the character own this OSprite</param>
            <returns>True if successfuly loaded</returns>
        </member>
        <member name="M:AngeliA.OrientedSprite.GetID(System.Boolean,System.Boolean)">
            <summary>
            Get the sprite ID for rendering
            </summary>
            <param name="front">True if the sprite is for facing front</param>
            <param name="right">True if the sprite is for facing right</param>
        </member>
        <member name="M:AngeliA.OrientedSprite.TryGetSpriteWithoutAnimation(System.Boolean,System.Boolean,AngeliA.AngeSprite@)">
            <summary>
            Get the sprite ID for rendering without auto loading animated sprites
            </summary>
            <param name="front">True if the sprite is for facing front</param>
            <param name="right">True if the sprite is for facing right</param>
            <param name="sprite">Result sprite</param>
            <returns>True if the sprite is founded</returns>
        </member>
        <member name="M:AngeliA.OrientedSprite.TryGetSpriteGroup(System.Boolean,System.Boolean,AngeliA.SpriteGroup@)">
            <summary>
            Get the sprite group for rendering
            </summary>
            <param name="front">True if the sprite is for facing front</param>
            <param name="right">True if the sprite is for facing right</param>
            <param name="group">Result group</param>
            <returns>True if the group is founded</returns>
        </member>
        <member name="M:AngeliA.OrientedSprite.TryGetSprite(System.Boolean,System.Boolean,System.Int32,AngeliA.AngeSprite@)">
            <summary>
            Get the sprite for rendering
            </summary>
            <param name="front">True if the sprite is for facing front</param>
            <param name="right">True if the sprite is for facing right</param>
            <param name="animationFrame">Local frame for animation</param>
            <param name="sprite">Result sprite</param>
            <returns>True if the sprite is founded</returns>
        </member>
        <member name="M:AngeliA.OrientedSprite.TryGetSpriteForGizmos(AngeliA.AngeSprite@)">
            <summary>
            Get the sprite for rendering as gizmos
            </summary>
            <param name="sprite">Result sprite</param>
            <returns>True if the sprite is founded</returns>
        </member>
        <member name="T:AngeliA.Physics">
            <summary>
            Core system that handles physics of AngeliA games.
            Logic of the system is frame-isolated which means data from prev frame will never effect current frame.
            </summary>
        </member>
        <member name="P:AngeliA.Physics.IsReady">
            <summary>
            True if the system is ready to use.
            </summary>
        </member>
        <member name="M:AngeliA.Physics.FillBlock(System.Int32,System.Int32,AngeliA.IRect,System.Boolean,AngeliA.Tag)">
            <summary>
            Add a physics cell for a map block for current frame. Call this function inside Entity.FirstUpdate
            </summary>
            <param name="layer">Which layer to add this cell into. (Use PhysicsLayer.XXX to get this value)</param>
            <param name="blockID">ID of the source block</param>
            <param name="globalRect">Rect position in global space</param>
            <param name="isTrigger">True if the cell should mark as trigger</param>
            <param name="tag">What extra info this cell have</param>
        </member>
        <member name="M:AngeliA.Physics.FillEntity(System.Int32,AngeliA.Entity,System.Boolean,AngeliA.Tag)">
            <summary>
            Add a physics cell for an entity for current frame. Call this function inside Entity.FirstUpdate
            </summary>
            <param name="layer">Which layer to add this cell into. (Use PhysicsLayer.XXX to get this value)</param>
            <param name="entity">Source entity for this cell</param>
            <param name="isTrigger">True if the cell should mark as trigger</param>
            <param name="tag">What extra info this cell have</param>
        </member>
        <member name="M:AngeliA.Physics.IgnoreOverlap(System.Int32,AngeliA.IRect,AngeliA.OperationMode)">
            <summary>
            Remove all cells that overlap target range
            </summary>
            <param name="mask">What physics layers is included (use PhysicsMask.XXX to get this value)</param>
            <param name="globalRect">Rect position in global space</param>
            <param name="mode">What type of cells are included for the operation</param>
        </member>
        <member name="M:AngeliA.Physics.Overlap(System.Int32,AngeliA.IRect,AngeliA.Entity,AngeliA.OperationMode,AngeliA.Tag)">
            <inheritdoc cref="M:AngeliA.Physics.Overlap(System.Int32,AngeliA.IRect,AngeliA.PhysicsCell@,AngeliA.Entity,AngeliA.OperationMode,AngeliA.Tag)"/>
        </member>
        <member name="M:AngeliA.Physics.Overlap(System.Int32,AngeliA.IRect,AngeliA.PhysicsCell@,AngeliA.Entity,AngeliA.OperationMode,AngeliA.Tag)">
            <summary>
            True if any cell overlap the given rect
            </summary>
            <param name="mask">What physics layers is included (use PhysicsMask.XXX to get this value)</param>
            <param name="globalRect">Rect position in global space</param>
            <param name="ignore">Entity that should be excluded</param>
            <param name="mode">What type of cells are included for the operation</param>
            <param name="tag">Only cells with all tags should be included</param>
            <param name="info">Cell of the overlaping object</param>
        </member>
        <member name="M:AngeliA.Physics.OverlapAll(System.Int32,AngeliA.IRect,System.Int32@,AngeliA.Entity,AngeliA.OperationMode,AngeliA.Tag)">
            <summary>
            Find all cells that overlap with given rect and fill into an array (The array is cached internaly. Max size 1024)
            </summary>
            <param name="mask">What physics layers is included (use PhysicsMask.XXX to get this value)</param>
            <param name="globalRect">Rect position in global space</param>
            <param name="count">How many cells are founded</param>
            <param name="ignore">Entity that should be excluded</param>
            <param name="mode">What type of cells are included for the operation</param>
            <param name="tag">Only cells with all tags should be included</param>
            <returns>Cell array with the results</returns>
        </member>
        <member name="M:AngeliA.Physics.OverlapAll(AngeliA.PhysicsCell[],System.Int32,AngeliA.IRect,AngeliA.Entity,AngeliA.OperationMode,AngeliA.Tag)">
            <summary>
            Find all cells that overlap with given rect and fill into given array
            </summary>
            <param name="hits">The array that will hold the result</param>
            <param name="mask">What physics layers is included (use PhysicsMask.XXX to get this value)</param>
            <param name="globalRect">Rect position in global space</param>
            <param name="ignore">Entity that should be excluded</param>
            <param name="mode">What type of cells are included for the operation</param>
            <param name="tag">Only cells with all tags should be included</param>
            <returns>How many cells are founded</returns>
        </member>
        <member name="M:AngeliA.Physics.GetEntity``1(AngeliA.IRect,System.Int32,AngeliA.Entity,AngeliA.OperationMode,AngeliA.Tag)">
            <summary>
            Get entity instance from stage that overlap given rect
            </summary>
            <typeparam name="T">Type of the target entity</typeparam>
            <param name="globalRect">Rect position in global space</param>
            <param name="mask">What physics layers is included (use PhysicsMask.XXX to get this value)</param>
            <param name="ignore">Entity that should be excluded</param>
            <param name="mode">What type of cells are included for the operation</param>
            <param name="tag">Only cells with all tags should be included</param>
        </member>
        <member name="M:AngeliA.Physics.GetEntity(System.Int32,AngeliA.IRect,System.Int32,AngeliA.Entity,AngeliA.OperationMode,AngeliA.Tag)">
            <summary>
            Get entity instance from stage that overlap given rect
            </summary>
            <param name="typeID">Type of the target entity</param>
            <param name="globalRect">Rect position in global space</param>
            <param name="mask">What physics layers is included (use PhysicsMask.XXX to get this value)</param>
            <param name="ignore">Entity that should be excluded</param>
            <param name="mode">What type of cells are included for the operation</param>
            <param name="tag">Only cells with all tags should be included</param>
        </member>
        <member name="M:AngeliA.Physics.HasEntity``1(AngeliA.IRect,System.Int32,AngeliA.Entity,AngeliA.OperationMode,AngeliA.Tag)">
            <summary>
            True if any entity instance from stage that overlap given rect
            </summary>
            <typeparam name="T">Type of the target entity</typeparam>
            <param name="globalRect">Rect position in global space</param>
            <param name="mask">What physics layers is included (use PhysicsMask.XXX to get this value)</param>
            <param name="ignore">Entity that should be excluded</param>
            <param name="mode">What type of cells are included for the operation</param>
            <param name="tag">Only cells with all tags should be included</param>
        </member>
        <member name="M:AngeliA.Physics.RoomCheck(System.Int32,AngeliA.IRect,AngeliA.Entity,AngeliA.Direction4,AngeliA.OperationMode,AngeliA.Tag)">
            <inheritdoc cref="M:AngeliA.Physics.RoomCheck(System.Int32,AngeliA.IRect,AngeliA.Entity,AngeliA.Direction4,AngeliA.PhysicsCell@,AngeliA.OperationMode,AngeliA.Tag)"/>
        </member>
        <member name="M:AngeliA.Physics.RoomCheck(System.Int32,AngeliA.IRect,AngeliA.Entity,AngeliA.Direction4,AngeliA.PhysicsCell@,AngeliA.OperationMode,AngeliA.Tag)">
            <summary>
            True if there is free room founded at given direction (only Involving solid colliders)
            </summary>
            <param name="mask">What physics layers is included (use PhysicsMask.XXX to get this value)</param>
            <param name="rect">Start location in global space</param>
            <param name="entity">Entity that should be exclude</param>
            <param name="direction"></param>
            <param name="mode">What type of cells are included for the operation</param>
            <param name="tag">Only cells with all tags should be included</param>
            <param name="hit">Cell of the object that blocks the free room</param>
        </member>
        <member name="M:AngeliA.Physics.RoomCheckOneway(System.Int32,AngeliA.IRect,AngeliA.Entity,AngeliA.Direction4,System.Boolean,System.Boolean)">
            <inheritdoc cref="M:AngeliA.Physics.RoomCheckOneway(System.Int32,AngeliA.IRect,AngeliA.Entity,AngeliA.Direction4,AngeliA.PhysicsCell@,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.Physics.RoomCheckOneway(System.Int32,AngeliA.IRect,AngeliA.Entity,AngeliA.Direction4,AngeliA.PhysicsCell@,System.Boolean,System.Boolean)">
            <summary>
            True if there is free room founded at given direction (only Involving oneway gate)
            </summary>
            <param name="mask">What physics layers is included (use PhysicsMask.XXX to get this value)</param>
            <param name="rect">Start location in global space</param>
            <param name="entity">Entity that should be exclude</param>
            <param name="direction"></param>
            <param name="hit">Cell of the object that blocks the free room</param>
            <param name="overlapCheck">True if oneway gates that not blocking the way (only overlap with rect) count as blocked</param>
            <param name="blockOnly">True if ignore oneway gates from entities</param>
        </member>
        <member name="M:AngeliA.Physics.MoveIgnoreOneway(System.Int32,AngeliA.Int2,System.Int32,System.Int32,AngeliA.Int2,AngeliA.Entity)">
            <summary>
            Perform move without oneway involved
            </summary>
            <param name="mask">What physics layers is included (use PhysicsMask.XXX to get this value)</param>
            <param name="from">Starting position in global space</param>
            <param name="speedX">(in global space)</param>
            <param name="speedY">(in global space)</param>
            <param name="size">(in global space)</param>
            <param name="entity">Target that is performing this movement</param>
            <returns>New position in global space after the movement</returns>
        </member>
        <member name="M:AngeliA.Physics.Move(System.Int32,AngeliA.Int2,System.Int32,System.Int32,AngeliA.Int2,AngeliA.Entity)">
            <summary>
            Perform move
            </summary>
            <param name="mask">What physics layers is included (use PhysicsMask.XXX to get this value)</param>
            <param name="from">Starting position in global space</param>
            <param name="speedX">(in global space)</param>
            <param name="speedY">(in global space)</param>
            <param name="size">(in global space)</param>
            <param name="entity">Target that is performing this movement</param>
            <returns>New position in global space after the movement</returns>
        </member>
        <member name="M:AngeliA.Physics.MoveImmediately(System.Int32,AngeliA.Int2,AngeliA.Direction4,System.Int32,AngeliA.Int2,AngeliA.Entity,System.Boolean)">
            <summary>
            Perform move without safe checks. (eg. Collide with objects in middle when moving too fast) This version saves CPU usage.
            </summary>
            <param name="mask">What physics layers is included (use PhysicsMask.XXX to get this value)</param>
            <param name="from">Starting position in global space</param>
            <param name="direction">Which direction to move</param>
            <param name="speed">(in global space)</param>
            <param name="size">(in global space)</param>
            <param name="entity">Target that is performing this movement</param>
            <param name="ignoreOneway">True if oneway gates are excluded</param>
            <returns>New position in global space after the movement</returns>
        </member>
        <member name="M:AngeliA.Physics.ForcePush(AngeliA.Rigidbody,AngeliA.Direction4,System.Int32)">
            <summary>
            Make a recursive push
            </summary>
            <param name="host">Entity that pushs other</param>
            <param name="direction"></param>
            <param name="distance">(in global space)</param>
        </member>
        <member name="T:AngeliA.SpriteCode">
            <summary>
            Quick setup for an artwork sprite
            </summary>
            <example><code>
            private static readonly SpriteCode SpriteCodeName = "Sprite/Group name in artwork sheet";
            </code></example>
        </member>
        <member name="M:AngeliA.SpriteCode.#ctor(System.String)">
            <summary>
            Quick setup for an artwork sprite
            </summary>
            <example><code>
            private static readonly SpriteCode SpriteCodeName = "Sprite/Group name in artwork sheet";
            </code></example>
        </member>
        <member name="F:AngeliA.Tag.None">
            <summary>
            No tag
            </summary>
        </member>
        <member name="F:AngeliA.Tag.OnewayUp">
            <summary>
            Oneway gate facing upward
            </summary>
        </member>
        <member name="F:AngeliA.Tag.OnewayDown">
            <summary>
            Oneway gate facing downward
            </summary>
        </member>
        <member name="F:AngeliA.Tag.OnewayLeft">
            <summary>
            Oneway gate facing leftward
            </summary>
        </member>
        <member name="F:AngeliA.Tag.OnewayRight">
            <summary>
            Oneway gate facing rightward
            </summary>
        </member>
        <member name="F:AngeliA.Tag.Climb">
            <summary>
            Can be climb by characters and allow them move horizontaly
            </summary>
        </member>
        <member name="F:AngeliA.Tag.ClimbStable">
            <summary>
            Can be climb by characters with fixed horizontal position
            </summary>
        </member>
        <member name="F:AngeliA.Tag.Mark">
            <summary>
            Used in general perpose
            </summary>
        </member>
        <member name="F:AngeliA.Tag.Water">
            <summary>
            Target is water
            </summary>
        </member>
        <member name="F:AngeliA.Tag.Slip">
            <summary>
            Target is slippery
            </summary>
        </member>
        <member name="F:AngeliA.Tag.Slide">
            <summary>
            Target can be slide as wall
            </summary>
        </member>
        <member name="F:AngeliA.Tag.NoSlide">
            <summary>
            Target can not be slide as wall
            </summary>
        </member>
        <member name="F:AngeliA.Tag.GrabTop">
            <summary>
            Target can be grab from below
            </summary>
        </member>
        <member name="F:AngeliA.Tag.GrabSide">
            <summary>
            Target can be grab from side
            </summary>
        </member>
        <member name="F:AngeliA.Tag.Unbreackable">
            <summary>
            Target can not be break or pick
            </summary>
        </member>
        <member name="F:AngeliA.Tag.ShowLimb">
            <summary>
            Target cloth require limb behind to be render
            </summary>
        </member>
        <member name="F:AngeliA.Tag.HideLimb">
            <summary>
            Target cloth require limb behind not be render
            </summary>
        </member>
        <member name="F:AngeliA.Tag.LoopStart">
            <summary>
            Target sprite is the start frame of the loop
            </summary>
        </member>
        <member name="F:AngeliA.Tag.Random">
            <summary>
            When painting sprite from this group with map editor. It randomly select one sprite from this group and paint.
            </summary>
        </member>
        <member name="F:AngeliA.Tag.Palette">
            <summary>
            Target sprite is a palette for pixel editing.
            </summary>
        </member>
        <member name="F:AngeliA.Tag.PhysicalDamage">
            <summary>
            General type of damage
            </summary>
        </member>
        <member name="F:AngeliA.Tag.ExplosiveDamage">
            <summary>
            Damage from explosion
            </summary>
        </member>
        <member name="F:AngeliA.Tag.MagicalDamage">
            <summary>
            Damage from magic
            </summary>
        </member>
        <member name="F:AngeliA.Tag.PoisonDamage">
            <summary>
            Damage from poison
            </summary>
        </member>
        <member name="F:AngeliA.Tag.FireDamage">
            <summary>
            Damage from fire
            </summary>
        </member>
        <member name="F:AngeliA.Tag.IceDamage">
            <summary>
            Damage from ice
            </summary>
        </member>
        <member name="F:AngeliA.Tag.LightenDamage">
            <summary>
            Damage from electricity
            </summary>
        </member>
        <member name="T:AngeliA.TagUtil">
            <summary>
            Utility class for tags
            </summary>
        </member>
        <member name="F:AngeliA.TagUtil.NonExplosiveDamage">
            <summary>
            All damage tags without explosive damage
            </summary>
        </member>
        <member name="F:AngeliA.TagUtil.AllDamages">
            <summary>
            Add damage tags
            </summary>
        </member>
        <member name="F:AngeliA.TagUtil.TAG_COUNT">
            <summary>
            Total count of tags
            </summary>
        </member>
        <member name="F:AngeliA.TagUtil.ALL_TAG_NAMES">
            <summary>
            Enum name of tags
            </summary>
        </member>
        <member name="M:AngeliA.TagUtil.GetTagAt(System.Int32)">
            <summary>
            Get tag at given index
            </summary>
        </member>
        <member name="M:AngeliA.TagUtil.HasAll(AngeliA.Tag,AngeliA.Tag)">
            <summary>
            True if source tag contains all tags from mask
            </summary>
        </member>
        <member name="M:AngeliA.TagUtil.HasAny(AngeliA.Tag,AngeliA.Tag)">
            <summary>
            True if source tag contains any tag from mask
            </summary>
        </member>
        <member name="T:AngeliA.ChangeSavingSlotTask">
            <summary>
            Task that change player saving slot. Require UserData as slot index.
            </summary>
        </member>
        <member name="T:AngeliA.DelayTask">
            <summary>
            Task that do nothing but stay inside the task system. Require UserData as duration in frame
            </summary>
        </member>
        <member name="T:AngeliA.DialogueTask">
            <summary>
            Task that run a dialogue UI entity and display conversation
            </summary>
        </member>
        <member name="M:AngeliA.DialogueTask.StartConversation``1(System.String)">
            <summary>
            Start conversation from given name
            </summary>
            <typeparam name="D">Type of the dialogue UI entity</typeparam>
            <param name="globalName">System name of the conversation</param>
        </member>
        <member name="M:AngeliA.DialogueTask.EndConversation">
            <summary>
            Stop current conversation
            </summary>
        </member>
        <member name="T:AngeliA.SpawnEntityTask">
            <summary>
            Task that spawn given entity.
            </summary>
            <example><code>
            using AngeliA;
            
            namespace AngeliaGame;
            
            public class Example {
            
            	[OnGameUpdate]
            	internal static void OnGameUpdate () {
            
            		if (TaskSystem.AddToLast(SpawnEntityTask.TYPE_ID) is SpawnEntityTask task) {
            			task.EntityID = /*Target entity ID*/;
            			task.X = /*Target X in global space*/;
            			task.Y = /*Target Y in global space*/;
            		}
            
            	}
            
            }
            </code></example>
        </member>
        <member name="F:AngeliA.SpawnEntityTask.EntityID">
            <summary>
            Target entity ID
            </summary>
        </member>
        <member name="F:AngeliA.SpawnEntityTask.X">
            <summary>
            Target position X in global space
            </summary>
        </member>
        <member name="F:AngeliA.SpawnEntityTask.Y">
            <summary>
            Target position Y in global space
            </summary>
        </member>
        <member name="T:AngeliA.DespawnEntityTask">
            <summary>
            Task to despawn an exists entity. Require UserData as the target entity.
            </summary>
        </member>
        <member name="T:AngeliA.EntityHookTask">
            <summary>
            Task that keep exists util the target entity inactive. Require UserData as the target entity.
            </summary>
        </member>
        <member name="T:AngeliA.FadeInTask">
            <summary>
            Task that fade the screen from black to normal
            </summary>
        </member>
        <member name="T:AngeliA.FadeOutTask">
            <summary>
            Task that fade the screen from normal to black
            </summary>
        </member>
        <member name="T:AngeliA.MethodTask">
            <summary>
            Task that invoke the given System.Action. Require the action as UserData.
            </summary>
        </member>
        <member name="T:AngeliA.RestartGameTask">
            <summary>
            Task that restart the game
            </summary>
        </member>
        <member name="T:AngeliA.SelectPlayerTask">
            <summary>
            Task that select current player
            </summary>
        </member>
        <member name="T:AngeliA.TeleportTask">
            <summary>
            Task for handle logic during player teleport
            </summary>
        </member>
        <member name="P:AngeliA.TeleportTask.TeleportFrom">
            <summary>
            Teleport from this position in global space
            </summary>
        </member>
        <member name="P:AngeliA.TeleportTask.TeleportTo">
            <summary>
            Teleport to this position in global space
            </summary>
        </member>
        <member name="P:AngeliA.TeleportTask.WaitDuration">
            <summary>
            Teleport actually start after wait this frames long
            </summary>
        </member>
        <member name="P:AngeliA.TeleportTask.Duration">
            <summary>
            Teleport takes this frames long to finish
            </summary>
        </member>
        <member name="P:AngeliA.TeleportTask.UseVignette">
            <summary>
            True if use the vignette effect during teleport
            </summary>
        </member>
        <member name="P:AngeliA.TeleportTask.UseParallax">
            <summary>
            True if use the map layer parallax effect during teleport
            </summary>
        </member>
        <member name="M:AngeliA.TeleportTask.TeleportFromDoor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Make a teleport for selecting player by using a door
            </summary>
            <param name="fromX">(in global space)</param>
            <param name="fromY">(in global space)</param>
            <param name="toX">(in global space)</param>
            <param name="toY">(in global space)</param>
            <param name="toZ"></param>
            <returns>Global single instance of the task unit</returns>
        </member>
        <member name="M:AngeliA.TeleportTask.TeleportFromPortal(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Make a teleport for selecting player by using a portal
            </summary>
            <param name="fromX">(in global space)</param>
            <param name="fromY">(in global space)</param>
            <param name="toX">(in global space)</param>
            <param name="toY">(in global space)</param>
            <param name="toZ"></param>
            <param name="samePosition">True if the X and Y position are the same</param>
            <returns>Global single instance of the task unit</returns>
        </member>
        <member name="T:AngeliA.FrameworkUtil">
            <summary>
            Utility class for the AngeliA framework
            </summary>
        </member>
        <member name="F:AngeliA.FrameworkUtil.RUN_CODE_ANALYSIS_SETTING_ID">
            <summary>
            For remote setting between engine and rigged game
            </summary>
        </member>
        <member name="F:AngeliA.FrameworkUtil.RUN_CODE_ANALYSIS_SETTING_SILENTLY_ID">
            <summary>
            For remote setting between engine and rigged game
            </summary>
        </member>
        <member name="F:AngeliA.FrameworkUtil.GAMEPAD_CODE">
            <summary>
            ID of artwork sprite for gamepad button icons
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.GetBlockRealName(System.String)">
            <summary>
            Get name of a map block without hashtags
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.GetOnewayTag(AngeliA.Direction4)">
            <summary>
            Get tag for oneway gate that facing to given direction
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.HasOnewayTag(AngeliA.Tag)">
            <summary>
            True if the given tag contains oneway gate tag.
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.TryGetOnewayDirection(AngeliA.Tag,AngeliA.Direction4@)">
            <summary>
            Get direction from a single oneway gate tag. The tag value can only be a single oneway gate tag.
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.GetFlyingFormation(AngeliA.Int2,System.Int32,System.Int32)">
            <summary>
            Get position for flying entities
            </summary>
            <param name="pos">Center position</param>
            <param name="column">Column of the current element</param>
            <param name="instanceIndex">Local index of the current element</param>
            <returns>Final position of this element</returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.GetSpriteInfoFromName(System.String,System.String@,System.Boolean@,AngeliA.Tag@,AngeliA.BlockRule@,System.Boolean@,System.Int32@,System.Int32@,System.Nullable{System.Int32}@,System.Nullable{System.Int32}@)">
            <summary>
            Get infomation from naming tag of an artwork sprite
            </summary>
            <param name="name">Full name of the artwork sprite</param>
            <param name="realName">Name without hashtag</param>
            <param name="isTrigger">True if this sprite is trigger</param>
            <param name="tag">Tag value of this sprite</param>
            <param name="rule">Rule for auto tiling in map editor</param>
            <param name="noCollider">True if this sprite ignore collider</param>
            <param name="offsetZ">Z value for sort rendering cells</param>
            <param name="aniDuration">Duration in frame for animation</param>
            <param name="pivotX"></param>
            <param name="pivotY"></param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.GetGroupInfoFromSpriteRealName(System.String,System.String@,System.Int32@)">
            <summary>
            Get sprite group infomation from the name of artwork sprite
            </summary>
            <param name="realName">Name without hashtags</param>
            <param name="groupName">Name without index</param>
            <param name="groupIndex">Index in group</param>
            <returns>True if the data successfuly calculated</returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.GetScaledAudioVolume(System.Int32,System.Int32)">
            <summary>
            Scale the given audio volume
            </summary>
            <param name="volume"></param>
            <param name="scale">0 means 0%, 1000 means 100%</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.PlaySoundAtPosition(System.Int32,AngeliA.Int2,System.Single,System.Single)">
            <summary>
            Play a sound like it cames from the given position
            </summary>
            <param name="id">Audio ID</param>
            <param name="globalPosition">Position in global space</param>
            <param name="volume"></param>
            <param name="pitch"></param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.ResetShoulderAndUpperArmPos(AngeliA.PoseCharacterRenderer,System.Boolean,System.Boolean)">
            <summary>
            Reset the shoulder and upper arm position for given pose-styled character
            </summary>
            <param name="rendering">Target character</param>
            <param name="resetLeft"></param>
            <param name="resetRight"></param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.HighlightBlink(AngeliA.Cell,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Blink the given cell for action target highlighting
            </summary>
            <param name="cell"></param>
            <param name="pivotX"></param>
            <param name="pivotY"></param>
            <param name="horizontal">True if the target attached with nearby entity in left or right</param>
            <param name="vertical">True if the target attached with nearby entity in up or down</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.Time01_to_TimeDigit(System.Single,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Convert a float value into time
            </summary>
            <param name="time01">0 means 0:00, 0.5 means 12:00. 1 means 24:00</param>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.TimeDigit_to_Time01(System.Int32,System.Int32,System.Int32)">
            <summary>
            Convert time into a float value
            </summary>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <returns>0 means 0:00, 0.5 means 12:00. 1 means 24:00</returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.PerformSpringBounce(AngeliA.Entity,AngeliA.Direction4,System.Int32,System.Int32)">
            <summary>
            Bounce entities on stage for once
            </summary>
            <param name="springEntity">Entity that exists as the spring</param>
            <param name="direction">Direction that the spring power goes</param>
            <param name="power">Initial speed for entities get bounced</param>
            <param name="powerSide">Initial speed on side direction for entities get bounced</param>
            <returns>True if any entity get bounced</returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.PerformSpringBounce(AngeliA.Rigidbody,AngeliA.Entity,AngeliA.Direction4,System.Int32,System.Int32)">
            <summary>
            Bounce the given target for once
            </summary>
            <param name="target">Target to get bounce</param>
            <param name="spring">Entity that exists as the spring</param>
            <param name="direction">Direction that the spring power goes</param>
            <param name="power">Initial speed for entities get bounced</param>
            <param name="powerSide">Initial speed on side direction for entities get bounced</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.GiveBuffFromMap(AngeliA.IWithCharacterBuff,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Try get buff from map element at given unit position
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.GetGameKeyLabel(AngeliA.Gamekey)">
            <summary>
            Get display name for given game-key.
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.GetFrameAmortizedValue(System.Int32,System.Int32)">
            <summary>
            Used to calculate acceleration with intager. eg. When value is 2000, it means 2 unit every frame. When value is 500, it means 1 unit every 2 frames.
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.SpawnItemFromMap(AngeliA.IBlockSquad,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Spawn item based on items list from map. This is used for the map chest.
            </summary>
            <param name="squad">Source of the map blocks</param>
            <param name="unitX">Position X in unit space</param>
            <param name="unitY">Position Y in unit space</param>
            <param name="z">Position Z</param>
            <param name="maxDeltaX">Limitation on horizontal checking distance</param>
            <param name="maxDeltaY">Limitation on vertical checking distance</param>
            <param name="placeHolderID">Set spawned item into this ID</param>
            <param name="spawnEntity">True if spawn the entity that paint as map element</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.GetPlayerHoldingHandTool">
            <summary>
            Get global single instance of the handtool that player currently equipping
            </summary>
            <returns></returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.BroadcastBuff(AngeliA.IRect,System.Int32,System.Int32)">
            <summary>
            Give buff for all buff holder in given rectangle range
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.BroadcastBuff(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Give buff for all buff holder in given circle range
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.RunBuiltInSpriteAnalysys(System.Boolean)">
            <summary>
            Perform checking logic for checking built-in sprite sync with artwork sheet or not
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.RunEmptyScriptFileAnalysis(System.String,System.Boolean)">
            <summary>
            Check for empty script file in given project root
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.RunAngeliaCodeAnalysis(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Perform analyses for current AngeliA project and log the report
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeObjectBreak(System.Int32,AngeliA.IRect)">
            <summary>
            Invoke function for object broke animation
            </summary>
            <param name="spriteID">Artwork sprite ID</param>
            <param name="rect">Starting rect position in global space</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeObjectFreeFall(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Invoke function for free fall animation
            </summary>
            <param name="spriteID">Artwork sprite ID</param>
            <param name="x">Start position X in global space</param>
            <param name="y">Start position Y in global space</param>
            <param name="speedX">Initial speed X</param>
            <param name="speedY">Initial speed Y</param>
            <param name="rotation">Initial rotation</param>
            <param name="rotationSpeed"></param>
            <param name="gravity"></param>
            <param name="flipX">True if artwork sprite flip horizontaly</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeBlockPicked(System.Int32,AngeliA.IRect)">
            <summary>
            Invoke function for map block get picked
            </summary>
            <param name="spriteID">Artwork sprite ID</param>
            <param name="rect">Starting rect position in global space</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeFallIntoWater(AngeliA.Rigidbody,AngeliA.Entity)">
            <summary>
            Invoke function for object get into water
            </summary>
            <param name="rig">Target object</param>
            <param name="water">Water entity instance. Null if water is from map block</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeCameOutOfWater(AngeliA.Rigidbody,AngeliA.Entity)">
            <summary>
            Invoke function for object get out of water
            </summary>
            <param name="rig">Target object</param>
            <param name="water">Water entity instance. Null if water is from map block</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeErrorHint(System.Int32,System.Int32,System.Int32)">
            <summary>
            Invoke animation hint for error
            </summary>
            <param name="x">Position in global space</param>
            <param name="y">Position in global space</param>
            <param name="id">Artwork sprite ID for the icon inside</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeErrorHint(AngeliA.Entity,System.Int32)">
            <summary>
            Invoke animation hint for error
            </summary>
            <param name="holder">Entity that get the error</param>
            <param name="id">Artwork sprite ID for the icon inside</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeItemCollected(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Invoke function for item get collected by a character
            </summary>
            <param name="id">ID of the item</param>
            <param name="x">Position in global space</param>
            <param name="y">Position in global space</param>
            <param name="count">How many items get collected</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeItemCollected(AngeliA.Entity,System.Int32,System.Int32)">
            <summary>
            Invoke function for item get collected by a character
            </summary>
            <param name="collector">Character that collect the item</param>
            <param name="id">ID of the item</param>
            <param name="count">How many items get collected</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeItemLost(AngeliA.Character,System.Int32)">
            <summary>
            Invoke function for character lost an item 
            </summary>
            <param name="holder">Character that lost the item</param>
            <param name="id">ID of the item</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeItemDamage(AngeliA.Character,System.Int32,System.Int32)">
            <summary>
            Invoke function for item being damaged/broken
            </summary>
            <param name="holder">Character that own the item</param>
            <param name="fromID">ID of the item before it broke</param>
            <param name="toID">ID of the item after it broke</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeItemUnlocked(System.Int32)">
            <summary>
            Invoke function for item being unlocked
            </summary>
            <param name="itemID">ID of the unlocked item</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeCheatPerformed(System.String)">
            <summary>
            Invoke function for a cheat code get performed
            </summary>
            <param name="cheatCode">The performed cheat code</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeOnFootStepped(AngeliA.Entity)">
            <summary>
            Invoke function for a character walks with a foot step
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeOnCharacterSleeping(AngeliA.Entity)">
            <summary>
            Invoke function for a character is sleeping
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeOnCharacterJump(AngeliA.Entity)">
            <summary>
            Invoke function for character jumps
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeOnCharacterPound(AngeliA.Entity)">
            <summary>
            Invoke function for character ground pound
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeOnCharacterFly(AngeliA.Entity)">
            <summary>
            Invoke function for character fly
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeOnCharacterSlideStepped(AngeliA.Entity)">
            <summary>
            Invoke function for character slide with a step
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeOnCharacterPassOut(AngeliA.Entity)">
            <summary>
            Invoke function for character get pass out
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeOnCharacterTeleport(AngeliA.Entity)">
            <summary>
            Invoke function for character perform a teleport
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.InvokeOnCharacterCrash(AngeliA.Entity)">
            <summary>
            Invoke function for character crash
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.RedirectForRule(AngeliA.IBlockSquad,AngeliA.IRect,System.Int32)">
            <summary>
            Auto tile all map blocks inside given range
            </summary>
            <param name="squad">Source of the map blocks</param>
            <param name="unitRange">Target range in unit space</param>
            <param name="z">Position Z</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.RedirectForRule(AngeliA.IBlockSquad,System.Int32,System.Int32,System.Int32,AngeliA.BlockType)">
            <summary>
            Auto tile map block in given position and all tiles nearby
            </summary>
            <param name="squad">Source of the map blocks</param>
            <param name="unitX">Position in unit space</param>
            <param name="unitY">Position in unit space</param>
            <param name="z">Position z</param>
            <param name="type">Type of the auto tile block</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.GetRuleIndex(System.Collections.Generic.IList{AngeliA.AngeSprite},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Find which tile in the given list conforms the auto tiling rule
            </summary>
            <param name="sprites">Source list</param>
            <param name="ruleDigit">Int data of the tiling rule. Get this data with FrameworkUtil.BlockRuleToDigit</param>
            <param name="tl">ID for block at top-left</param>
            <param name="tm">ID for block at top</param>
            <param name="tr">ID for block at top-right</param>
            <param name="ml">ID for block at left</param>
            <param name="mr">ID for block at right</param>
            <param name="bl">ID for block at bottom-left</param>
            <param name="bm">ID for block at bottom</param>
            <param name="br">ID for block at bottom-right</param>
            <returns>Index of the founded sprite</returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.DigitToBlockRule(System.Int32)">
            <summary>
            Convert auto tiling rule digit into BlockRule struct
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.DigitToRuleByte(System.Int32,System.Byte[])">
            <summary>
            Convert auto tiling rule digit into byte array
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.BlockRuleToDigit(AngeliA.BlockRule)">
            <summary>
            Convert BlockRule struct into auto tiling rule digit
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.RuleByteToDigit(System.Byte[])">
            <summary>
            Convert byte array into auto tiling rule digit
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.BreakEntityBlock(AngeliA.IBlockEntity)">
            <summary>
            Remove given block entity from map and invoke corresponding callback functions. (Do not handle item drops)
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.PickBlockAt(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Perform a block pick
            </summary>
            <param name="unitX">Target position X in unit space</param>
            <param name="unitY">Target position Y in unit space</param>
            <param name="allowPickBlockEntity">True if entity blocks will be picked</param>
            <param name="allowPickLevelBlock">True if level blocks will be picked</param>
            <param name="allowPickBackgroundBlock">True if background blocks will be picked</param>
            <param name="dropItemAfterPicked">True if spawn an ItemHolder with the block</param>
            <param name="allowMultiplePick">True if pick more than one block with one function call</param>
            <returns>True if any block is picked</returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.HasPickableBlockAt(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            True if found any block can be pick at given position
            </summary>
            <param name="unitX">Target position X in unit space</param>
            <param name="unitY">Target position Y in unit space</param>
            <param name="allowPickBlockEntity">True if entity blocks will be picked</param>
            <param name="allowPickLevelBlock">True if level blocks will be picked</param>
            <param name="allowPickBackgroundBlock">True if background blocks will be picked</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.PutBlockTo(System.Int32,AngeliA.BlockType,System.Int32,System.Int32)">
            <summary>
            Build a block into the map
            </summary>
            <param name="blockID">ID of the building block</param>
            <param name="blockType">Type of the building block</param>
            <param name="targetUnitX">Target position X in unit space</param>
            <param name="targetUnitY">Target position Y in unit space</param>
            <returns>True if the block is built</returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.TryGetEmptyPlaceNearbyForEntity(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32,System.Boolean)">
            <summary>
            Find an empty place on map nearby given position for placing an entity
            </summary>
            <param name="unitX">Target position X in unit space</param>
            <param name="unitY">Target position Y in unit space</param>
            <param name="z">Position Z</param>
            <param name="resultUnitX">Position founded in unit space</param>
            <param name="resultUnitY">Position founded in unit space</param>
            <param name="maxRange">Maximal searching range in unit space</param>
            <param name="preferNoSolidLevel">Set to true to put this entity into place without solid level blocks</param>
            <returns>True if the place is founded</returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.RemoveFromWorldMemory(AngeliA.Entity)">
            <summary>
            Remove target entity from world data. Only work when entity spawned from map.
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.SearchlightBlockCheck(AngeliA.IBlockSquad,AngeliA.Int3,System.Nullable{AngeliA.Direction8},System.Int32,System.Boolean)">
            <summary>
            True if any block founded inside given range. Search blocks with specific order to lower the CPU usage. 
            </summary>
            <param name="squad">Source of map blocks</param>
            <param name="startUnitPoint">Position to start searching in unit space</param>
            <param name="direction">Direction of the search operation facing. Set to null to make it search in circle range.</param>
            <param name="unitDistance">Maximal distance for the search in unit space</param>
            <param name="reverse">True if search blocks from far side first</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.GetEntityPose(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get FittingPose for given position and entity ID from WorldSquad. 
            eg. 3 mushroom entities makes a tall mushroom, only the top one is the cap. So your entity renders as cap only when the fitting pose is FittingPose.Up.
            </summary>
            <param name="typeID">Type of the target entity</param>
            <param name="unitX">Target position X in unit space</param>
            <param name="unitY">Target position Y in unit space</param>
            <param name="horizontal">True if the entity fits horizontaly</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.GetEntityPose(AngeliA.Entity,System.Boolean,System.Int32,AngeliA.Entity@,AngeliA.Entity@)">
            <summary>
            Get FittingPose for given entity type from WorldSquad and stage. 
            </summary>
            <param name="entity">Target entity</param>
            <param name="horizontal">True if the entity fits horizontaly</param>
            <param name="mask">Physics layers to get the entity instance</param>
            <param name="left_down">Nearby entity instance at left/down</param>
            <param name="right_up">Nearby entity instance at right/up</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.ForAllWorldInRange(AngeliA.IRect,System.Int32,System.Int32@)">
            <summary>
            Find all world position that overlap the given range. (256 results in maximal)
            </summary>
            <param name="overlapUnitRange">Target range in unit space</param>
            <param name="z">Position Z</param>
            <param name="count">How many result is founded</param>
            <returns>Array that holds the result</returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.ForAllExistsWorldInRange(AngeliA.IBlockSquad,AngeliA.IRect,System.Int32,System.Int32@)">
            <summary>
            Find all existing world position that overlap the given range. (512 results in maximal)
            </summary>
            <param name="squad">Source of the world instance</param>
            <param name="overlapUnitRange">Target range in unit space</param>
            <param name="z">Position Z</param>
            <param name="count">How many result is founded</param>
            <returns>Array that holds the result</returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.PaintBlock(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Paint the map block with BlockColoringSystem at given position
            </summary>
            <param name="unitX">Target position X in unit space</param>
            <param name="unitY">Target position Y in unit space</param>
            <param name="blockColorID">ID of BlockColor's subclass as a map element</param>
            <param name="overrideExistingElement">True if existing map element at given position will be override</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.TryEjectOutsideGround(AngeliA.Rigidbody,System.Int32,System.Int32,System.Int32)">
            <summary>
            Move the given rigidbody to closest empty space nearby
            </summary>
            <param name="rig"></param>
            <param name="collisionMask">Which physics layers should count as "Ground"</param>
            <param name="unitRange">How far can it move in unit space</param>
            <param name="speed">How fast will it move</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.SystemNumberID_to_Number(System.Int32)">
            <summary>
            Convert system number ID into the number it represents
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.Number_to_SystemNumberID(System.Int32)">
            <summary>
            Convert number into system number map element ID. 0 by default.
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.ReadSystemNumber(AngeliA.IBlockSquad,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get system number at given position from map. (Left-to-right then up-to-down)
            </summary>
            <param name="squad">Source of the map blocks</param>
            <param name="unitX">Target position X in unit space</param>
            <param name="unitY">Target position Y in unit space</param>
            <param name="z">Position Z</param>
            <param name="number">Result number</param>
            <returns>True if the number is founded</returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.ReadSystemNumber(AngeliA.IBlockSquad,System.Int32,System.Int32,System.Int32,AngeliA.Direction4,System.Int32@)">
            <summary>
            Get system number at given position from map in specified direction
            </summary>
            <param name="squad">Source of the map blocks</param>
            <param name="unitX">Target position X in unit space</param>
            <param name="unitY">Target position Y in unit space</param>
            <param name="z">Position Z</param>
            <param name="direction">Which direction should it reads</param>
            <param name="number">Result number</param>
            <returns>True if the number is founded</returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.HasSystemNumber(AngeliA.IBlockSquad,System.Int32,System.Int32,System.Int32)">
            <summary>
            True if there is system number at given position
            </summary>
            <param name="squad">Source of the map blocks</param>
            <param name="unitX">Target position X in unit space</param>
            <param name="unitY">Target position Y in unit space</param>
            <param name="z">Position Z</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.TryGetSingleSystemNumber(AngeliA.IBlockSquad,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a single digit of system number at given position from map
            </summary>
            <param name="squad">Source of the map blocks</param>
            <param name="unitX">Target position X in unit space</param>
            <param name="unitY">Target position Y in unit space</param>
            <param name="z">Position Z</param>
            <param name="digitValue">Result of the digit</param>
            <returns>True if the digit is founded</returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.GetAimingBuilderPositionFromMouse(AngeliA.Character,AngeliA.BlockType,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            Get aiming position for block building target with mouse
            </summary>
            <param name="holder">Character that using the tool</param>
            <param name="blockType">Type of building block</param>
            <param name="targetUnitX">Result position in unit space</param>
            <param name="targetUnitY">Result position in unit space</param>
            <param name="requireEmbedAsElement">True if this block can be embed into other block</param>
            <returns>True if the target is founded</returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.GetAimingBuilderPositionFromKey(AngeliA.Character,AngeliA.BlockType,System.Int32@,System.Int32@,System.Boolean@,System.Boolean)">
            <summary>
            Get aiming position for block building target with keyboard keys
            </summary>
            <param name="holder">Character that using the tool</param>
            <param name="blockType">Type of building block</param>
            <param name="targetUnitX">Result position in unit space</param>
            <param name="targetUnitY">Result position in unit space</param>
            <param name="requireEmbedAsElement">True if this block can be embed into other block</param>
            <param name="ignoreValid">Set to true to skip block building validation</param>
            <returns>True if valid position is founded</returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.GetAimingPickerPositionFromMouse(AngeliA.Character,System.Int32,System.Int32@,System.Int32@,System.Boolean@,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get aiming position for block picking target with mouse
            </summary>
            <param name="holder">Character that using the tool</param>
            <param name="unitRange">Range limitation in unit space</param>
            <param name="targetUnitX">Result position in unit space</param>
            <param name="targetUnitY">Result position in unit space</param>
            <param name="inRange">True if the current mouse cursor is in range</param>
            <param name="allowPickBlockEntity">True if the tool can pick entity blocks</param>
            <param name="allowPickLevelBlock">True if the tool can pick level blocks</param>
            <param name="allowPickBackgroundBlock">True if the tool can pick background blocks</param>
            <returns>True if valid position is founded</returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.GetAimingPickerPositionFromKey(AngeliA.Character,System.Int32@,System.Int32@,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get aiming position for block picking target with keyboard keys
            </summary>
            <param name="pHolder">Character that using the tool</param>
            <param name="targetUnitX">Result position in unit space</param>
            <param name="targetUnitY">Result position in unit space</param>
            <param name="allowPickBlockEntity">True if the tool can pick entity blocks</param>
            <param name="allowPickLevelBlock">True if the tool can pick level blocks</param>
            <param name="allowPickBackgroundBlock">True if the tool can pick background blocks</param>
            <returns>True if valid position is founded</returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.GetSummaryTint(AngeliA.Color32[])">
            <summary>
            Get average color of given pixels
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.DrawEnvironmentShadow(AngeliA.Cell,System.Int32,System.Int32,System.Byte,System.Int32)">
            <summary>
            Draw a shadow for given rendering cell
            </summary>
            <param name="source">Target rendering cell</param>
            <param name="offsetX">Position offset X in global space</param>
            <param name="offsetY">Position offset Y in global space</param>
            <param name="alpha"></param>
            <param name="z">Position Z for the shadow</param>
            <returns>Rendering cell of the shadow</returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.DrawPoseCharacterAsUI(AngeliA.IRect,AngeliA.PoseCharacterRenderer,System.Int32)">
            <summary>
            Display target pose-styled character as UI (like the character preview in player menu)
            </summary>
            <param name="rect">Rect position to display the UI in global space</param>
            <param name="renderer">Target character</param>
            <param name="animationFrame">Current frame for animation</param>
            <returns>True if the character is rendered</returns>
        </member>
        <member name="M:AngeliA.FrameworkUtil.DrawPoseCharacterAsUI(AngeliA.IRect,AngeliA.PoseCharacterRenderer,System.Int32,AngeliA.IRect@,AngeliA.IRect@)">
            <inheritdoc cref="M:AngeliA.FrameworkUtil.DrawPoseCharacterAsUI(AngeliA.IRect,AngeliA.PoseCharacterRenderer,System.Int32)"/>
        </member>
        <member name="M:AngeliA.FrameworkUtil.RemapCells(AngeliA.Cell[],System.Int32,System.Int32,AngeliA.IRect,AngeliA.IRect,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AngeliA.FrameworkUtil.RemapCells(System.Span{AngeliA.Cell},System.Int32,System.Int32,AngeliA.IRect,AngeliA.IRect,System.Int32@,System.Int32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.FrameworkUtil.RemapCells(System.Span{AngeliA.Cell},System.Int32,System.Int32,AngeliA.IRect,AngeliA.IRect,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AngeliA.FrameworkUtil.RemapCells(System.Span{AngeliA.Cell},System.Int32,System.Int32,AngeliA.IRect,AngeliA.IRect,System.Int32@,System.Int32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.FrameworkUtil.RemapCells(AngeliA.Cell[],System.Int32,System.Int32,AngeliA.IRect,AngeliA.IRect,System.Int32@,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc cref="M:AngeliA.FrameworkUtil.RemapCells(System.Span{AngeliA.Cell},System.Int32,System.Int32,AngeliA.IRect,AngeliA.IRect,System.Int32@,System.Int32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:AngeliA.FrameworkUtil.RemapCells(System.Span{AngeliA.Cell},System.Int32,System.Int32,AngeliA.IRect,AngeliA.IRect,System.Int32@,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Remap the position and size of given rendering cells
            </summary>
            <param name="cells"></param>
            <param name="cellIndexStart">Start index of remap logic</param>
            <param name="cellIndexEnd">End index of remap logic (exclude)</param>
            <param name="from">Remap from this range (global space)</param>
            <param name="to">Remap to this range (global space)</param>
            <param name="minZ">Minimal Z value for sort rendering cells</param>
            <param name="fitPivotX"></param>
            <param name="fitPivotY"></param>
            <param name="fit">True if keep the aspect ratio by resize the cells</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.DrawItemUsageBar(AngeliA.IRect,System.Int32,System.Int32)">
            <summary>
            Draw usage bar UI
            </summary>
            <param name="rect">Rect position in global space</param>
            <param name="usage"></param>
            <param name="maxUsage"></param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.DrawAllCollidersAsGizmos(System.Int32,AngeliA.Int2,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,AngeliA.Color32[])">
            <summary>
            Display current physics colliders with game gizmos functions
            </summary>
            <param name="physicsMask">Which physics layers are included</param>
            <param name="offset">Position offset for all gizmos</param>
            <param name="brightness">0 means dark, 1 means normal color</param>
            <param name="ignoreNonOnewayTrigger">True if triggers that is not oneway gate are excluded</param>
            <param name="ignoreOnewayTrigger">True if oneway gates are excluded</param>
            <param name="useTechEffect">True if the gizmos glitchs</param>
            <param name="drawVelocity">True if draw the current velocity for rigidbody</param>
            <param name="layerTints">Color for specified layers. Set to null to use default.</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.GetItemTypeIcon(System.Int32)">
            <summary>
            Get type icon artwork sprite ID for given item
            </summary>
        </member>
        <member name="M:AngeliA.FrameworkUtil.DrawClockHands(AngeliA.IRect,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32)">
            <summary>
            Draw clock hands from in-game time
            </summary>
            <param name="rect">Rect position for clock face in global space</param>
            <param name="handCode">Artwork sprite ID for the hand</param>
            <param name="thickness"></param>
            <param name="thicknessSecond"></param>
            <param name="tint">Color tint</param>
            <param name="z">Z value for sort rendering cells</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.DrawClockHands(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Color32,System.Int32)">
            <summary>
            Draw clock hands from in-game time
            </summary>
            <param name="centerX">Center position in global space</param>
            <param name="centerY">Center position in global space</param>
            <param name="radius">Radius of the clock face</param>
            <param name="handCode">Artwork sprite ID for the hand</param>
            <param name="thickness"></param>
            <param name="thicknessSecond"></param>
            <param name="tint">Color tint</param>
            <param name="z">Z value for sort rendering cells</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.DrawClockPendulum(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw the pendulum for clocks
            </summary>
            <param name="artCodeLeg">Artwork sprite ID for the long handle part</param>
            <param name="artCodeHead">Artwork sprite ID for the head on the edge</param>
            <param name="x">Center position in global space</param>
            <param name="y">Center position in global space</param>
            <param name="length">Length of the pendulum in global space</param>
            <param name="thickness">Thichness of the leg in global space</param>
            <param name="headSize">Size of the head in global space</param>
            <param name="maxRot">Rotation amount</param>
            <param name="deltaX">Extra position shift amount</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.SpiralSpinningCellEffect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draw spinning effect for teleporting with portal
            </summary>
            <param name="localFrame"></param>
            <param name="pointX">Center position in global space</param>
            <param name="pointY">Center position in global space</param>
            <param name="duration">Total duration of the animation</param>
            <param name="cellIndexStart">Start index of target rendering cells in current rendering layer</param>
            <param name="reverseSpin"></param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.DrawLoopingActivatedHighlight(AngeliA.IRect,AngeliA.Color32,System.Int32,System.Int32)">
            <summary>
            Draw a highlight effect
            </summary>
            <param name="targetRect">Rect position in global space</param>
            <param name="tint">Color tint</param>
            <param name="lineCount"></param>
            <param name="duration">Duration in frame for a single loop</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.DrawLoopingTriangleMark(AngeliA.IRect,System.Int32,AngeliA.Color32,AngeliA.Direction4,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a direction mark with looping moving triangles
            </summary>
            <param name="range">Rect position in global space</param>
            <param name="frame">Current animation frame</param>
            <param name="tint">Color tint</param>
            <param name="direction"></param>
            <param name="count">Triangle count</param>
            <param name="size">Triangle size</param>
            <param name="z">Z value for sort rendering cells</param>
            <param name="speed">Moving speed of the triangle</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.DrawOnFireEffect(System.Int32,AngeliA.IRect,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw effect for object on fire
            </summary>
            <param name="spriteID">Artwork sprite ID</param>
            <param name="rect">Rect range in global space</param>
            <param name="count">Rendering sprite count at same time</param>
            <param name="loop">Duration for a single loop</param>
            <param name="size">Size of a single sprite</param>
            <param name="seed">Seed to generate random value</param>
            <param name="z">Z value for sort rendering cells</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.DrawFrozenEffect(AngeliA.IRect,System.Byte,System.Int32,AngeliA.Int2,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw effect for frozen zone
            </summary>
            <param name="rect">Position range in global space</param>
            <param name="alpha"></param>
            <param name="count">Particle count at same time</param>
            <param name="offset">Position offset</param>
            <param name="seed">Seed to generate random value</param>
            <param name="size">Size of a single particle</param>
            <param name="z">Z value to sort rendering cells</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.DrawLightenEffect(System.Int32,AngeliA.IRect,System.Int32,System.Int32)">
            <summary>
            Draw effect for electric light coming out of an object
            </summary>
            <param name="spriteID">Artwork sprite ID for a single lighten</param>
            <param name="rect">Position range in global space</param>
            <param name="count">Count of sprite at same time</param>
            <param name="size">Size of a single sprite</param>
        </member>
        <member name="M:AngeliA.FrameworkUtil.DrawPoisonEffect(System.Int32,AngeliA.IRect,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw effect for object being poisoned
            </summary>
            <param name="spriteID">Artwork sprite ID</param>
            <param name="rect">Rect range in global space</param>
            <param name="loop">Duration of a single animation loop</param>
            <param name="count">Count of sprites at same time</param>
            <param name="seed">Seed to generate random value</param>
            <param name="size">Size of a single particle in global space</param>
            <param name="z">Z value for sort rendering cells</param>
        </member>
        <member name="T:AngeliA.IJsonSerializationCallback">
            <summary>
            Interface that receive callback functions when Serialized with JsonUtil
            </summary>
        </member>
        <member name="M:AngeliA.IJsonSerializationCallback.OnBeforeSaveToDisk">
            <summary>
            This function is called before json object save to file
            </summary>
        </member>
        <member name="M:AngeliA.IJsonSerializationCallback.OnAfterLoadedFromDisk">
            <summary>
            This function is called after json object load from file
            </summary>
        </member>
        <member name="T:AngeliA.JsonUtil">
            <summary>
            Utility class for json operation
            </summary>
        </member>
        <member name="M:AngeliA.JsonUtil.GetJsonPath``1(System.String,System.String,System.String)">
            <summary>
            Calculate auto path fot json file
            </summary>
            <typeparam name="T">Type of the json object</typeparam>
            <param name="rootPath">Root folder</param>
            <param name="name">Name that override the type name</param>
            <param name="ext">Extension of the file</param>
        </member>
        <member name="M:AngeliA.JsonUtil.LoadOrCreateJson``1(System.String,System.String,System.String)">
            <summary>
            Load json file inside given folder. Create new instance if file not found.
            </summary>
            <typeparam name="T">Type of the json object</typeparam>
            <param name="rootPath">Root folder</param>
            <param name="name">Name that override the type name</param>
            <param name="ext">Extension of the file</param>
        </member>
        <member name="M:AngeliA.JsonUtil.LoadOrCreateJsonFromPath``1(System.String)">
            <summary>
            Load json file at given path. Create new instance if file not found.
            </summary>
            <typeparam name="T">Type of the json object</typeparam>
            <param name="jsonPath"></param>
        </member>
        <member name="M:AngeliA.JsonUtil.LoadJson``1(System.String,System.String,System.String)">
            <summary>
            Load json file inside given folder.
            </summary>
            <typeparam name="T">Type of the json object</typeparam>
            <param name="rootPath">Root folder</param>
            <param name="name">Name that override the type name</param>
            <param name="ext">Extension of the file</param>
            <returns>Json object instance if file valid. Return default if file not valid.</returns>
        </member>
        <member name="M:AngeliA.JsonUtil.LoadJsonFromPath``1(System.String)">
            <summary>
            Load json file at given path.
            </summary>
            <typeparam name="T">Type of the json object</typeparam>
            <param name="jsonPath"></param>
            <returns>Json object instance if file valid. Return default if file not valid</returns>
        </member>
        <member name="M:AngeliA.JsonUtil.SaveJson``1(``0,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Save json object into given folder
            </summary>
            <typeparam name="T">Type of the json object</typeparam>
            <param name="data"></param>
            <param name="rootPath">Root folder path</param>
            <param name="name">Name that override the type name</param>
            <param name="ext">Extension of the file</param>
            <param name="prettyPrint">True if write with indent and line warp</param>
        </member>
        <member name="M:AngeliA.JsonUtil.SaveJsonToPath(System.Object,System.String,System.Boolean)">
            <summary>
            Save json object into given path
            </summary>
            <param name="data"></param>
            <param name="jsonPath"></param>
            <param name="prettyPrint">True if write with indent and line warp</param>
        </member>
        <member name="T:AngeliA.LanguageUtil">
            <summary>
            Utility class for language system
            </summary>
        </member>
        <member name="F:AngeliA.LanguageUtil.ADD_KEYS_FOR_ALL_LANGUAGE_CODE_SETTING_ID">
            <summary>
            Used for remote setting between engine and rigged game
            </summary>
        </member>
        <member name="M:AngeliA.LanguageUtil.LoadAllPairsFromFolder(System.String,System.String,System.Boolean)">
            <summary>
            Load and iterate through all language data pairs from given folder
            </summary>
            <param name="languageRoot">Root folder of the language data</param>
            <param name="language">ISO of the target language</param>
            <param name="keepEscapeCharacters">True if the escape characters (like "\n") will be set to original data</param>
        </member>
        <member name="M:AngeliA.LanguageUtil.LoadAllPairsFromDiskAtPath(System.String,System.Boolean)">
            <summary>
            Load and iterate through all language data pairs from given file
            </summary>
            <param name="path">Language file path</param>
            <param name="keepEscapeCharacters">True if the escape characters (like "\n") will be set to original data</param>
        </member>
        <member name="M:AngeliA.LanguageUtil.SaveAllPairsToDisk(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Save given language data pairs into file
            </summary>
        </member>
        <member name="M:AngeliA.LanguageUtil.GetLanguageFolderPath(System.String,System.String)">
            <summary>
            Get folder for given language
            </summary>
            <param name="languageRoot">Root of the language folder</param>
            <param name="language">ISO of the target language</param>
            <returns>Path for the target language file</returns>
        </member>
        <member name="M:AngeliA.LanguageUtil.GetSystemLanguageISO">
            <summary>
            Get current language ISO of the OS
            </summary>
        </member>
        <member name="M:AngeliA.LanguageUtil.AddKeysForAllLanguageCode(System.String,System.Boolean)">
            <summary>
            Add all required keys for all language inside the root folder
            </summary>
        </member>
        <member name="T:AngeliA.Util">
            <summary>
            Utility class of AngeliA
            </summary>
        </member>
        <member name="M:AngeliA.Util.FileToText(System.String)">
            <summary>
            Load file into string text
            </summary>
        </member>
        <member name="M:AngeliA.Util.FileToText(System.String,System.Text.Encoding)">
            <summary>
            Load file into string text
            </summary>
        </member>
        <member name="M:AngeliA.Util.TextToFile(System.String,System.String,System.Boolean)">
            <summary>
            Save string text into file
            </summary>
            <param name="data"></param>
            <param name="path"></param>
            <param name="append">True if keep the existing content in the file</param>
        </member>
        <member name="M:AngeliA.Util.TextToFile(System.String,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Save string text into file
            </summary>
            <param name="data"></param>
            <param name="path"></param>
            <param name="encoding"></param>
            <param name="append">True if keep the existing content in the file</param>
        </member>
        <member name="M:AngeliA.Util.ForAllLinesInFile(System.String)">
            <summary>
            Iterate through every text lines inside given file 
            </summary>
        </member>
        <member name="M:AngeliA.Util.ForAllLinesInFile(System.String,System.Text.Encoding)">
            <summary>
            Iterate through every text lines inside given file 
            </summary>
        </member>
        <member name="M:AngeliA.Util.ForAllLinesInString(System.String)">
            <summary>
            Iterate through every text lines inside given string
            </summary>
        </member>
        <member name="M:AngeliA.Util.CreateFolder(System.String)">
            <summary>
            Create a folder at given path. Ignore if folder exists.
            </summary>
        </member>
        <member name="M:AngeliA.Util.FileToBytes(System.String)">
            <summary>
            Load file as a byte array
            </summary>
        </member>
        <member name="M:AngeliA.Util.BytesToFile(System.Byte[],System.String,System.Int32)">
            <summary>
            Save byte array into file
            </summary>
            <param name="bytes"></param>
            <param name="path"></param>
            <param name="length">Set to -1 to save all byte array</param>
        </member>
        <member name="M:AngeliA.Util.HasFileIn(System.String,System.Boolean,System.String)">
            <summary>
            True if there's any file match the pattern
            </summary>
            <param name="path">Root folder path</param>
            <param name="topOnly">True if only search top level of the folder</param>
            <param name="searchPattern">("*" means all files, "*.txt" means all txt files)</param>
        </member>
        <member name="M:AngeliA.Util.HasFileIn(System.String,System.Boolean,System.String[])">
            <summary>
            True if there's any file match any of the patterns
            </summary>
            <param name="path">Root folder path</param>
            <param name="topOnly">True if only search top level of the folder</param>
            <param name="searchPattern">("*" means all files, "*.txt" means all txt files)</param>
        </member>
        <member name="M:AngeliA.Util.EnumerateFiles(System.String,System.Boolean,System.String)">
            <summary>
            Iterate through path of all files that match given pattern
            </summary>
            <param name="path">Root folder path</param>
            <param name="topOnly">True if only search top level of the folder</param>
            <param name="searchPattern">("*" means all files, "*.txt" means all txt files)</param>
        </member>
        <member name="M:AngeliA.Util.EnumerateFiles(System.String,System.Boolean,System.String[])">
            <summary>
            Iterate through path of all files that match any given patterns
            </summary>
            <param name="path">Root folder path</param>
            <param name="topOnly">True if only search top level of the folder</param>
            <param name="searchPatterns">("*" means all files, "*.txt" means all txt files)</param>
        </member>
        <member name="M:AngeliA.Util.EnumerateFolders(System.String,System.Boolean,System.String)">
            <summary>
            Iterate through path of all folders that match given pattern
            </summary>
            <param name="path">Root folder path</param>
            <param name="topOnly">True if only search top level of the folder</param>
            <param name="searchPattern">("*" means all folders)</param>
        </member>
        <member name="M:AngeliA.Util.EnumerateFolders(System.String,System.Boolean,System.String[])">
            <summary>
            Iterate through path of all folders that match any given patterns
            </summary>
            <param name="path">Root folder path</param>
            <param name="topOnly">True if only search top level of the folder</param>
            <param name="searchPatterns">("*" means all folders)</param>
        </member>
        <member name="M:AngeliA.Util.DeleteFile(System.String)">
            <summary>
            Delete the file at given path. Do nothing when file not exists
            </summary>
        </member>
        <member name="M:AngeliA.Util.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copy file from one path to other
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="overwrite">True if overwrite existing file at "to"</param>
            <returns>True if successfuly copied</returns>
        </member>
        <member name="M:AngeliA.Util.CopyFolder(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Copy folder from one path to other
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="copySubDirs">True if copy all folder/files inside root folder</param>
            <param name="ignoreHidden">True if hidden files/folders do not get copy</param>
            <param name="overrideFile">True if overwrite existing files at "to"</param>
            <returns>True if successfuly copied</returns>
        </member>
        <member name="M:AngeliA.Util.DeleteFolder(System.String)">
            <summary>
            Delete folder at given path. Do nothing when folder not exists
            </summary>
        </member>
        <member name="M:AngeliA.Util.GetFileCount(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Get how many files mathchs the search pattern inside given folder path
            </summary>
            <param name="path">Root folder path</param>
            <param name="search">("*" means all files, "*.txt" means all txt files)</param>
            <param name="option"></param>
        </member>
        <member name="M:AngeliA.Util.GetFolderCount(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Get how many folders mathchs the search pattern inside given folder path
            </summary>
            <param name="path">Root folder path</param>
            <param name="search">("*" means all files)</param>
            <param name="option"></param>
        </member>
        <member name="M:AngeliA.Util.MoveFile(System.String,System.String)">
            <summary>
            Move file from one path to other. Use this function to rename files.
            </summary>
            <returns>True if successfuly moved</returns>
        </member>
        <member name="M:AngeliA.Util.MoveFolder(System.String,System.String)">
            <summary>
            Move folder from one path to other. Use this function to rename folder.
            </summary>
            /// <returns>True if successfuly moved</returns>
        </member>
        <member name="M:AngeliA.Util.ByteToCompressedFile(System.String,System.Byte[],System.Int32)">
            <summary>
            Save byte array into compressed file
            </summary>
            <param name="path"></param>
            <param name="rawBytes"></param>
            <param name="length">Set to -1 for the full array</param>
        </member>
        <member name="M:AngeliA.Util.CompressedFileToByte(System.String,System.Int32@)">
            <summary>
            Load compressed file into byte array
            </summary>
            <param name="path"></param>
            <param name="byteLength">True length of the byte array</param>
            <returns>The raw byte array</returns>
        </member>
        <member name="M:AngeliA.Util.DecompressBytes(System.Byte[])">
            <summary>
            Make compressed byte array into raw byte array
            </summary>
        </member>
        <member name="M:AngeliA.Util.IsExistingFileEmpty(System.String)">
            <summary>
            True if path refers to existing file and the file is not empty.
            </summary>
        </member>
        <member name="M:AngeliA.Util.UpdateFile(System.String,System.String,System.Boolean)">
            <summary>
            Copy and override target if the modify date is different
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="skipWhenTargetNotExists">True if only override existing file instead of create new file when target not exists.</param>
        </member>
        <member name="M:AngeliA.Util.GreatestCommonFactor(System.Int32,System.Int32)">
            <summary>
            Get the Greatest-Common-Factor
            </summary>
        </member>
        <member name="M:AngeliA.Util.LeastCommonMultiple(System.Int32,System.Int32)">
            <summary>
            Get the Least-Common-Multiple
            </summary>
        </member>
        <member name="M:AngeliA.Util.RotateAround(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Rotate given point (x,y) around point (originX, originY) for given rotation
            </summary>
            <returns>Point after rotation</returns>
        </member>
        <member name="M:AngeliA.Util.IsPowerOfTwo(System.Int32)">
            <summary>
            True if the given value is power of two
            </summary>
        </member>
        <member name="M:AngeliA.Util.SquareDistanceF(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Square of the distance between given two points
            </summary>
        </member>
        <member name="M:AngeliA.Util.SquareDistance(AngeliA.Int2,AngeliA.Int2)">
            <summary>
            Square of the distance between given two points
            </summary>
        </member>
        <member name="M:AngeliA.Util.SquareDistance(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Square of the distance between given two points
            </summary>
        </member>
        <member name="M:AngeliA.Util.DistanceFloat(AngeliA.Float2,AngeliA.Float2)">
            <summary>
            Distance between given two points
            </summary>
        </member>
        <member name="M:AngeliA.Util.DistanceFloat(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Distance between given two points
            </summary>
        </member>
        <member name="M:AngeliA.Util.DistanceInt(AngeliA.Int2,AngeliA.Int2)">
            <summary>
            Distance between given two points. (Use BabylonianSqrt internaly)
            </summary>
        </member>
        <member name="M:AngeliA.Util.DistanceInt(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Distance between given two points (Use BabylonianSqrt internaly)
            </summary>
        </member>
        <member name="M:AngeliA.Util.BabylonianSqrt(System.Int32)">
            <summary>
            Get square root of given value without using too many CPU resources
            </summary>
        </member>
        <member name="M:AngeliA.Util.PointInTriangle(AngeliA.Float2,AngeliA.Float2,AngeliA.Float2,AngeliA.Float2)">
            <summary>
            True if the given point "p" is inside given triangle "a,b,c"
            </summary>
        </member>
        <member name="M:AngeliA.Util.PointInTriangle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc cref="M:AngeliA.Util.PointInTriangle(AngeliA.Float2,AngeliA.Float2,AngeliA.Float2,AngeliA.Float2)"/>
        </member>
        <member name="M:AngeliA.Util.PointLine_Distance(AngeliA.Float2,AngeliA.Float2,AngeliA.Float2,AngeliA.Float2@)">
            <summary>
            Get distance between given point "pt" and line "p1,p2"
            </summary>
            <param name="pt"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="closest">Closest point on the line</param>
        </member>
        <member name="M:AngeliA.Util.SegmentIntersect(AngeliA.Float2,AngeliA.Float2,AngeliA.Float2,AngeliA.Float2)">
            <summary>
            If given segment "a1,a2" and "b1,b2" intersects
            </summary>
            <returns>Null if not intersect. Return intersection point if intersects</returns>
        </member>
        <member name="M:AngeliA.Util.SegmentRectIntersect(AngeliA.Float2,AngeliA.Float2,AngeliA.FRect)">
            <summary>
            If given segment "a0,a1" intersect with rectangle "rect"
            </summary>
            <returns>Null if not intersect. Return intersection points if intersects</returns>
        </member>
        <member name="M:AngeliA.Util.OverlapRectCircle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            True if given rectangle and circle overlaps
            </summary>
        </member>
        <member name="M:AngeliA.Util.IntToColor(System.Int32)">
            <summary>
            Convert intager value into color
            </summary>
        </member>
        <member name="M:AngeliA.Util.ColorToInt(AngeliA.Color32)">
            <summary>
            Convert color value into intager
            </summary>
        </member>
        <member name="M:AngeliA.Util.ColorToHtml(AngeliA.Color32,System.Boolean)">
            <summary>
            Get html string from given color value
            </summary>
        </member>
        <member name="M:AngeliA.Util.HtmlToColor(System.String,AngeliA.Color32@)">
            <summary>
            Get color from given html string. Works both with and without "#" at start
            </summary>
        </member>
        <member name="M:AngeliA.Util.ReflectVector2(AngeliA.Float2,AngeliA.Float2)">
            <summary>
            Reflects a vector off the surface defined by a normal.
            </summary>
        </member>
        <member name="M:AngeliA.Util.CrossVector3(AngeliA.Float3,AngeliA.Float3)">
            <summary>
            The cross product of two vectors results in a third vector which is perpendicular to the two input vectors.
            </summary>
        </member>
        <member name="M:AngeliA.Util.ReflectVector3(AngeliA.Float3,AngeliA.Float3)">
            <summary>
            Reflects a vector off the surface defined by a normal.
            </summary>
        </member>
        <member name="M:AngeliA.Util.ProjectVector3(AngeliA.Float3,AngeliA.Float3)">
            <summary>
            Projects a vector onto another vector
            </summary>
        </member>
        <member name="M:AngeliA.Util.ProjectOnPlaneVector3(AngeliA.Float3,AngeliA.Float3)">
            <summary>
            Projects a vector onto a plane
            </summary>
        </member>
        <member name="M:AngeliA.Util.DrawLine_DDA(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a line between (x0,y0) and (x1,y1) with Digital-Differential-Analyzer algorithm
            </summary>
            <returns>All pixel positions</returns>
        </member>
        <member name="M:AngeliA.Util.DrawLineWithRect_DDA(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a line between (x0,y0) and (x1,y1) with Digital-Differential-Analyzer algorithm
            </summary>
            <returns>All rect positions that need to fill with color</returns>
        </member>
        <member name="M:AngeliA.Util.DrawFilledEllipse_Patrick(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a filled ellipse with Patrick algorithm
            </summary>
            <returns>All rect positions that need to fill with color</returns>
        </member>
        <member name="M:AngeliA.Util.DrawHoloEllipse_Patrick(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a holo ellipse with Patrick algorithm
            </summary>
            <returns>All rect positions that need to fill with color</returns>
        </member>
        <member name="F:AngeliA.Util.Rad2Deg">
            <summary>
            Rad angle * Rad2Deg = Deg angle
            </summary>
        </member>
        <member name="F:AngeliA.Util.Deg2Rad">
            <summary>
            Deg angle * Deg2Rad = Rad angle
            </summary>
        </member>
        <member name="F:AngeliA.Util.PI">
            <summary>
            π = 3.14159274f
            </summary>
        </member>
        <member name="M:AngeliA.Util.TryGetLanguageDisplayName(System.String,System.String@)">
            <summary>
            Get display name of the given language in it's native language
            </summary>
            <param name="iso">ISO of the language (eg. "en" for English, "zht" for Chinese Traditional, "de" for German)</param>
            <param name="displayName">Result name</param>
            <returns>True if the iso is valid</returns>
        </member>
        <member name="M:AngeliA.Util.GetLanguageDisplayNameInEnglish(System.String)">
            <summary>
            Get display name of the given language in English
            </summary>
            <param name="iso">ISO of the language (eg. "en" for English, "zht" for Chinese Traditional, "de" for German)</param>
            <returns>Result name. Return empty string when iso not valid.</returns>
        </member>
        <member name="M:AngeliA.Util.GetLanguageDisplayName(System.String)">
            <summary>
            Get display name of the given language in it's native language
            </summary>
            <param name="iso">ISO of the language (eg. "en" for English, "zht" for Chinese Traditional, "de" for German)</param>
            <returns>Result name. Return empty string when iso not valid.</returns>
        </member>
        <member name="M:AngeliA.Util.IsSupportedLanguageISO(System.String)">
            <summary>
            True if the given iso is valid
            </summary>
        </member>
        <member name="M:AngeliA.Util.ForAllSystemLanguages">
            <summary>
            Iterate through iso of all language AngeliA support
            </summary>
        </member>
        <member name="M:AngeliA.Util.GetKeyDisplayName(AngeliA.KeyboardKey)">
            <summary>
            Get display name in English for given keyboard key
            </summary>
        </member>
        <member name="M:AngeliA.Util.AddEnvironmentVariable(System.String,System.String)">
            <summary>
            Add given key and value into system Environment Variable
            </summary>
        </member>
        <member name="M:AngeliA.Util.GetDisplayName(System.String)">
            <summary>
            Make the given string (in English) looks better for user to read.
            1. If the string start with "m_". Remove the "m_";
            2. Replace all "_" into " "
            3. Add space before capital letters that behind a lowercase letter
            </summary>
        </member>
        <member name="M:AngeliA.Util.QuickSort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <inheritdoc cref="M:AngeliA.Util.QuickSort``1(System.Span{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})"/>
        </member>
        <member name="M:AngeliA.Util.QuickSort``1(System.Span{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort the given array with QuickSort algorithm.
            </summary>
            <typeparam name="T">Type of the array</typeparam>
            <param name="array">The array data</param>
            <param name="min">Index range left (included)</param>
            <param name="max">Index range right (included)</param>
            <param name="comparer">Comparer instance to comparer the array element</param>
        </member>
        <member name="M:AngeliA.Util.QuickRandomColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a random color without spending too much CPU resources
            </summary>
            <param name="minH">(from 0 to 360)</param>
            <param name="maxH">(from 0 to 360)</param>
            <param name="minS">(from 0 to 100)</param>
            <param name="maxS">(from 0 to 100)</param>
            <param name="minV">(from 0 to 100)</param>
            <param name="maxV">(from 0 to 100)</param>
            <param name="minA">(from 0 to 255)</param>
            <param name="maxA">(from 0 to 255)</param>
        </member>
        <member name="M:AngeliA.Util.QuickRandom(System.Int32,System.Int32)">
            <summary>
            Get a random int between min and max without spending too much CPU resources. ("min" is Included, "max" is Excluded)
            </summary>
        </member>
        <member name="M:AngeliA.Util.QuickRandom">
            <summary>
            Get a random int between int.MinValue and int.MaxValue without spending too much CPU resources.
            </summary>
        </member>
        <member name="M:AngeliA.Util.QuickRandomSign">
            <summary>
            Get a random int which is -1 or 1 without spending too much CPU resources
            </summary>
        </member>
        <member name="M:AngeliA.Util.QuickRandomWithSeed(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a random int between min and max without spending too much CPU resources. ("min" is Included, "max" is Excluded)
            </summary>
            <param name="seed">Same seed always return same result</param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:AngeliA.Util.QuickRandomWithSeed(System.Int32)">
            <summary>
            Get a random int between int.MinValue and int.MaxValue without spending too much CPU resources.
            </summary>
            <param name="seed">Same seed always return same result</param>
        </member>
        <member name="M:AngeliA.Util.QuickRandomWithSeed(System.Int64,System.Int32,System.Int32)">
            <summary>
            Get a random int between min and max without spending too much CPU resources. ("min" is Included, "max" is Excluded)
            </summary>
            <param name="seed">Same seed always return same result</param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:AngeliA.Util.QuickRandomWithSeed(System.Int64)">
            <summary>
            Get a random int between int.MinValue and int.MaxValue without spending too much CPU resources. ("min" is Included, "max" is Excluded)
            </summary>
            <param name="seed">Same seed always return same result</param>
        </member>
        <member name="M:AngeliA.Util.ExecuteCommand(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Perform a command with the terminal
            </summary>
            <param name="workingDirectory">Path of the working directory</param>
            <param name="arguments"></param>
            <param name="logID">(-1 means ignore log. 0 means log with Debug.Log. >=1 means log with Debug.LogInternal)</param>
            <param name="wait">True if wait the terminal process to exit</param>
            <returns>Return code</returns>
        </member>
        <member name="M:AngeliA.Util.FindNextStringStep(System.String,System.Int32,System.Boolean)">
            <summary>
            Get index of the nearby segment of the given string.
            (eg. for "Test Content String 123" if the start index is 5 which is start of "Content", toRight is true, return value will be 12 which is the end of "Content".)
            </summary>
            <param name="content"></param>
            <param name="start"></param>
            <param name="toRight">True if move the cursor to right side</param>
            <returns>Index of the next step segment</returns>
        </member>
        <member name="M:AngeliA.Util.GetTrimedPixels(AngeliA.Color32[]@,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Trim the clear pixels for the given pixels and create a new instance for the result
            </summary>
            <param name="pixels">Source pixel data. (will not be changed after this operation)</param>
            <param name="width">Width in pixel</param>
            <param name="height">Height in pixel</param>
            <param name="left">Left position that first found a pixel in whole column</param>
            <param name="right">Right position that first found a pixel in whole column</param>
            <param name="down">Bottom position that first found a pixel in whole row</param>
            <param name="up">Top position that first found a pixel in whole row</param>
            <returns>New instance of pixel data created</returns>
        </member>
        <member name="M:AngeliA.Util.Remap(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Value from one range to another, while maintaining it's relative position within the original range.
            When "t" is "l", return "newL". 
            When "t" is "r", return "newR". 
            When "t" is something in the middle, it find a point between "newL" and "newR".
            </summary>
            <param name="l">Left range for t</param>
            <param name="r">Right range for t</param>
            <param name="newL">Left range for the result</param>
            <param name="newR">Right range for the result</param>
            <param name="t">Original value</param>
            <returns>Remaped value</returns>
        </member>
        <member name="M:AngeliA.Util.RemapUnclamped(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc cref="M:AngeliA.Util.Remap(System.Single,System.Single,System.Single,System.Single,System.Single)"/>
        </member>
        <member name="M:AngeliA.Util.Remap(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Util.Remap(System.Single,System.Single,System.Single,System.Single,System.Single)"/>
        </member>
        <member name="M:AngeliA.Util.RemapUnclamped(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:AngeliA.Util.Remap(System.Single,System.Single,System.Single,System.Single,System.Single)"/>
        </member>
        <member name="M:AngeliA.Util.InverseLerp(System.Single,System.Single,System.Single)">
            <summary>
            Remap "value" between ("from" and "to") into (0 and 1)
            </summary>
        </member>
        <member name="M:AngeliA.Util.InverseLerpUnclamped(System.Single,System.Single,System.Single)">
            <inheritdoc cref="M:AngeliA.Util.InverseLerp(System.Single,System.Single,System.Single)"/>
        </member>
        <member name="M:AngeliA.Util.PingPong(System.Single,System.Single)">
            <summary>
            Make value "t" liner oscillate between 0 and "length"
            </summary>
        </member>
        <member name="M:AngeliA.Util.Repeat(System.Single,System.Single)">
            <summary>
            Make value "t" liner loop between 0 and "length"
            </summary>
        </member>
        <member name="M:AngeliA.Util.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Remap value "t" between (0 and 1) into ("a" and "b")
            </summary>
        </member>
        <member name="M:AngeliA.Util.LerpUnclamped(System.Single,System.Single,System.Single)">
            <inheritdoc cref="M:AngeliA.Util.Lerp(System.Single,System.Single,System.Single)"/>
        </member>
        <member name="M:AngeliA.Util.LerpAngle(System.Single,System.Single,System.Single)">
            <summary>
            Remap angle value "t" between (0 and 1) into ("a" and "b") 
            </summary>
        </member>
        <member name="M:AngeliA.Util.LerpAngleUnclamped(System.Single,System.Single,System.Single)">
            <inheritdoc cref="M:AngeliA.Util.LerpAngle(System.Single,System.Single,System.Single)"/>
        </member>
        <member name="M:AngeliA.Util.Atan(System.Single,System.Single)">
            <summary>
            Return the arctangent of (x,y)
            </summary>
        </member>
        <member name="M:AngeliA.Util.Min(System.Int32,System.Int32)">
            <summary>
            Return the smaller value 
            </summary>
        </member>
        <member name="M:AngeliA.Util.Min(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return the smallest value
            </summary>
        </member>
        <member name="M:AngeliA.Util.Max(System.Int32,System.Int32)">
            <summary>
            Return the bigger value
            </summary>
        </member>
        <member name="M:AngeliA.Util.Max(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return the biggest value
            </summary>
        </member>
        <member name="M:AngeliA.Util.Min(System.Single,System.Single)">
            <summary>
            Return the smaller value 
            </summary>
        </member>
        <member name="M:AngeliA.Util.Max(System.Single,System.Single)">
            <summary>
            Return the bigger value
            </summary>
        </member>
        <member name="M:AngeliA.Util.Sin(System.Single)">
            <summary>
            Return sin value for given angle in RAD. Use (degAngle * Util.Deg2Rad) to get the Rad angle.
            </summary>
        </member>
        <member name="M:AngeliA.Util.Cos(System.Single)">
            <summary>
            Return cos value for given angle in RAD. Use (degAngle * Util.Deg2Rad) to get the Rad angle.
            </summary>
        </member>
        <member name="M:AngeliA.Util.Abs(System.Int32)">
            <summary>
            Return the absolute value
            </summary>
        </member>
        <member name="M:AngeliA.Util.Abs(System.Single)">
            <summary>
            Return the absolute value
            </summary>
        </member>
        <member name="M:AngeliA.Util.Approximately(System.Single,System.Single)">
            <summary>
            True if the given two float is almost same
            </summary>
        </member>
        <member name="M:AngeliA.Util.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Limit value "a" between "min" and "max"
            </summary>
        </member>
        <member name="M:AngeliA.Util.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Limit value "a" between "min" and "max"
            </summary>
        </member>
        <member name="M:AngeliA.Util.Clamp01(System.Single)">
            <summary>
            Limit value "a" between 0 and 1
            </summary>
        </member>
        <member name="M:AngeliA.Util.Pow(System.Single,System.Single)">
            <summary>
            Return "f" to the power of "p"
            </summary>
        </member>
        <member name="M:AngeliA.Util.Sqrt(System.Single)">
            <summary>
            Return square root of "f"
            </summary>
        </member>
        <member name="M:AngeliA.Util.RoundToInt(System.Single)">
            <summary>
            Round a float to the nearest integer
            </summary>
        </member>
        <member name="M:AngeliA.Util.CeilToInt(System.Single)">
            <summary>
            Get the smallest intager that larger than "value"
            </summary>
        </member>
        <member name="M:AngeliA.Util.FloorToInt(System.Single)">
            <summary>
            Get the largest intager that smaller than "value"
            </summary>
        </member>
        <member name="M:AngeliA.Util.HsvToRgb(System.Single,System.Single,System.Single)">
            <summary>
            Convert Hue-Saturation-Value into Red-Green-Blue.
            </summary>
            <param name="h">Range: 0-1</param>
            <param name="s">Range: 0-1</param>
            <param name="v">Range: 0-1</param>
        </member>
        <member name="M:AngeliA.Util.HsvToRgbF(System.Single,System.Single,System.Single)">
            <inheritdoc cref="M:AngeliA.Util.HsvToRgb(System.Single,System.Single,System.Single)"/>
        </member>
        <member name="M:AngeliA.Util.RgbToHsv(AngeliA.Color32,System.Single@,System.Single@,System.Single@)">
            <summary>
            Convert Red-Green-Blue into Hue-Saturation-Value.
            </summary>
            <param name="rgbColor"></param>
            <param name="h">Range: 0-1</param>
            <param name="s">Range: 0-1</param>
            <param name="v">Range: 0-1</param>
        </member>
        <member name="M:AngeliA.Util.RgbToHsvF(AngeliA.ColorF,System.Single@,System.Single@,System.Single@)">
            <inheritdoc cref="M:AngeliA.Util.RgbToHsv(AngeliA.Color32,System.Single@,System.Single@,System.Single@)"/>
        </member>
        <member name="M:AngeliA.Util.RgbToGrey(AngeliA.Color32)">
            <inheritdoc cref="M:AngeliA.Util.RgbToGreyF(AngeliA.ColorF)"/>
        </member>
        <member name="M:AngeliA.Util.RgbToGreyF(AngeliA.ColorF)">
            <summary>
            Get grey scale of given color. (return between 0 and 1)
            </summary>
        </member>
        <member name="M:AngeliA.Util.MergeColor_Overlay(AngeliA.ColorF,AngeliA.ColorF)">
            <summary>
            Draw color "top" onto "back" with blending overlay
            </summary>
        </member>
        <member name="M:AngeliA.Util.MergeColor_Lerp(AngeliA.ColorF,AngeliA.ColorF)">
            <summary>
            Draw color "top" onto "back" with blending lerp
            </summary>
        </member>
        <member name="M:AngeliA.Util.MergeColor(AngeliA.ColorF,AngeliA.ColorF)">
            <summary>
            Draw color "top" onto "back" with no special blending
            </summary>
        </member>
        <member name="M:AngeliA.Util.MergeColor_Overlay(AngeliA.Color32,AngeliA.Color32)">
            <inheritdoc cref="M:AngeliA.Util.MergeColor_Overlay(AngeliA.ColorF,AngeliA.ColorF)"/>
        </member>
        <member name="M:AngeliA.Util.MergeColor_Lerp(AngeliA.Color32,AngeliA.Color32)">
            <inheritdoc cref="M:AngeliA.Util.MergeColor_Lerp(AngeliA.ColorF,AngeliA.ColorF)"/>
        </member>
        <member name="M:AngeliA.Util.MergeColor(AngeliA.Color32,AngeliA.Color32)">
            <inheritdoc cref="M:AngeliA.Util.MergeColor(AngeliA.ColorF,AngeliA.ColorF)"/>
        </member>
        <member name="M:AngeliA.Util.MergeColor_Editor(AngeliA.Color32,AngeliA.Color32)">
            <summary>
            Draw color "top" onto "back" with blending for sprite editing
            </summary>
        </member>
        <member name="M:AngeliA.Util.GetDirection(System.Int32,System.Int32)">
            <summary>
            Get closest direction for vector (deltaX, deltaY)
            </summary>
        </member>
        <member name="M:AngeliA.Util.GetParentPath(System.String)">
            <summary>
            Get the parent full path of the given file/folder
            </summary>
        </member>
        <member name="M:AngeliA.Util.GetFullPath(System.String)">
            <summary>
            Get the full path of given relative file path
            </summary>
        </member>
        <member name="M:AngeliA.Util.GetFolderFullPath(System.String)">
            <summary>
            Get the full path of given relative folder path
            </summary>
        </member>
        <member name="M:AngeliA.Util.CombinePaths(System.String,System.String)">
            <inheritdoc cref="M:AngeliA.Util.CombinePaths(System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="M:AngeliA.Util.CombinePaths(System.String,System.String,System.String)">
            <inheritdoc cref="M:AngeliA.Util.CombinePaths(System.String,System.String,System.String,System.String)"/>
        </member>
        <member name="M:AngeliA.Util.CombinePaths(System.String,System.String,System.String,System.String)">
            <summary>
            Combine strings into a path
            </summary>
            <param name="path1">First part to combine</param>
            <param name="path2">Second part to combine</param>
            <param name="path3">Third part to combine</param>
            <param name="path4">Fourth part to combine</param>
            <returns>Full path</returns>
        </member>
        <member name="M:AngeliA.Util.CombinePaths(System.String[])">
            <summary>
            Combine strings into a path
            </summary>
            <param name="paths">Array of parts of path</param>
            <returns>Full path</returns>
        </member>
        <member name="M:AngeliA.Util.GetExtensionWithDot(System.String)">
            <summary>
            Get file extension with the dot at front
            </summary>
        </member>
        <member name="M:AngeliA.Util.GetNameWithoutExtension(System.String)">
            <summary>
            Get file/folder name without extension
            </summary>
        </member>
        <member name="M:AngeliA.Util.GetNameWithExtension(System.String)">
            <summary>
            Get file/folder name with extension
            </summary>
        </member>
        <member name="M:AngeliA.Util.ChangeExtension(System.String,System.String)">
            <summary>
            Change extension of the given path
            </summary>
            <param name="path"></param>
            <param name="newEx">Works both with and without the dot</param>
            <returns>New path with extension changed</returns>
        </member>
        <member name="M:AngeliA.Util.FolderExists(System.String)">
            <summary>
            True if the given path refers to an existing folder in disk
            </summary>
        </member>
        <member name="M:AngeliA.Util.FileExists(System.String)">
            <summary>
            True if the given path refers to an existing file in disk
            </summary>
        </member>
        <member name="M:AngeliA.Util.PathIsFolder(System.String)">
            <summary>
            True is the given path refers to an exist folder instead of file
            </summary>
        </member>
        <member name="M:AngeliA.Util.GetUrl(System.String)">
            <summary>
            Get the AbsoluteUri of the given path
            </summary>
        </member>
        <member name="M:AngeliA.Util.GetTimeString">
            <summary>
            Get a string for current date and time
            </summary>
        </member>
        <member name="M:AngeliA.Util.GetLongTime">
            <summary>
            Get FileTimeUTC from UtcNow
            </summary>
            <returns></returns>
        </member>
        <member name="M:AngeliA.Util.IsSameDay(System.Int64,System.Int64)">
            <summary>
            True if two ticks inside same day
            </summary>
        </member>
        <member name="M:AngeliA.Util.GetDisplayTimeFromTicks(System.Int64)">
            <summary>
            Get time string for display label from given ticks
            </summary>
        </member>
        <member name="M:AngeliA.Util.FixPath(System.String)">
            <summary>
            Make given path valid. 
            1. Directory separator will be fixed to the valid one.
            2. All separators in the start of the path will be removed.
            3. All separators in the end of the path will be removed.
            </summary>
        </member>
        <member name="M:AngeliA.Util.IsSamePath(System.String,System.String)">
            <summary>
            True if the two given paths refers to the same location
            </summary>
        </member>
        <member name="M:AngeliA.Util.IsHidden(System.String)">
            <summary>
            True if the file/folder at path is hidden
            </summary>
        </member>
        <member name="M:AngeliA.Util.IsValidForFileName(System.String)">
            <summary>
            True if the given string can be a file name.
            </summary>
        </member>
        <member name="M:AngeliA.Util.IsPathValid(System.String)">
            <summary>
            True if the given path can be an qualified path
            </summary>
        </member>
        <member name="M:AngeliA.Util.TryGetRelativePath(System.String,System.String,System.String@)">
            <summary>
            Get relative path from given path and root
            </summary>
            <param name="relativeTo">The root folder path</param>
            <param name="path">The target path inside the root</param>
            <param name="relativePath">Result relative path</param>
            <returns>True if the path successfuly got</returns>
        </member>
        <member name="M:AngeliA.Util.GetAllTypeSpan">
            <summary>
            Get a ReadOnlySpan for all AngeliA related System.Types
            </summary>
        </member>
        <member name="M:AngeliA.Util.AddAssembly(System.Reflection.Assembly)">
            <summary>
            Add a new assembly into AngeliA. Make sure the assembly is already loaded into .NET. ⚠ Only call this function inside a static constructor ⚠
            </summary>
        </member>
        <member name="M:AngeliA.Util.AllChildClass(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Iterate through all child classes of given type
            </summary>
            <param name="type"></param>
            <param name="includeAbstract">True if abstract class should be included</param>
            <param name="includeInterface">True if interface should be included</param>
        </member>
        <member name="M:AngeliA.Util.AllChildClassID(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Iterate through all child class's ID of given type
            </summary>
            <param name="type"></param>
            <param name="includeAbstract">True if abstract class should be included</param>
            <param name="includeInterface">True if interface should be included</param>
        </member>
        <member name="M:AngeliA.Util.ForAllAssemblyWithAttribute``1">
            <summary>
            Iterate through all given assembly attribute with the inatance of the assembly
            </summary>
            <typeparam name="A">Type of the attribute</typeparam>
            <returns></returns>
        </member>
        <member name="M:AngeliA.Util.TryGetAttributeFromAllAssemblies``1">
            <summary>
            Get first given attribute from all assemblies if found
            </summary>
            <typeparam name="A">Type of the attribute</typeparam>
            <returns>True if the attribute is found</returns>
        </member>
        <member name="M:AngeliA.Util.TryGetAttributeFromAllAssemblies``1(``0@)">
            <summary>
            Get first given attribute from all assemblies if found
            </summary>
            <typeparam name="A">Type of the attribute</typeparam>
            <param name="attribute">Instance of the founded attribute</param>
            <returns>True if the attribute is found</returns>
        </member>
        <member name="M:AngeliA.Util.AllEnumIdPairs``1">
            <summary>
            Iterate through all value and name AngeHash for the given enum
            </summary>
            <typeparam name="E">Type of the enum</typeparam>
        </member>
        <member name="M:AngeliA.Util.AllClassImplemented(System.Type,System.Boolean)">
            <summary>
            Iterate through all class that implement the given interface
            </summary>
            <param name="interfaceType">Type of the target interface</param>
            <param name="includeAbstract">True if abstract class is included</param>
        </member>
        <member name="M:AngeliA.Util.AllClassImplementedID(System.Type,System.Boolean)">
            <summary>
            Iterate through all class's ID that implement the given interface
            </summary>
            <param name="interfaceType">Type of the target interface</param>
            <param name="includeAbstract">True if abstract class is included</param>
        </member>
        <member name="M:AngeliA.Util.AllClassWithAttribute(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Iterate through all classes with given attribute attaching on
            </summary>
            <param name="ignoreAbstract">True if abstract classes should be excluded</param>
            <param name="ignoreInterface">True if interfaces should be excluded</param>
            <param name="attribute">Type of the target attribute</param>
        </member>
        <member name="M:AngeliA.Util.AllClassWithAttribute``1(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Iterate through all classes with given attribute attaching on
            </summary>
            <typeparam name="A">Type of the target attribute</typeparam>
            <param name="ignoreAbstract">True if abstract classes should be excluded</param>
            <param name="ignoreInterface">True if interfaces should be excluded</param>
            <param name="inherit">Set to true to inspect the ancestors of element</param>
            <returns></returns>
        </member>
        <member name="M:AngeliA.Util.AllStaticMethodWithAttribute``1">
            <summary>
            Iterate through all static method from all classes that with given attribute attached on
            </summary>
            <typeparam name="T">Type of the attribute</typeparam>
        </member>
        <member name="M:AngeliA.Util.InvokeAllStaticMethodWithAttribute``1">
            <summary>
            Invoke all static method from all classes that with given attribute attached on
            </summary>
            <typeparam name="A">Type of the attribute</typeparam>
        </member>
        <member name="M:AngeliA.Util.InvokeAllStaticMethodWithAttribute``1(System.Func{System.Collections.Generic.KeyValuePair{System.Reflection.MethodInfo,``0},System.Boolean})">
            <summary>
            Invoke all static method from all classes that with given attribute attached on
            </summary>
            <typeparam name="A">Type of the attribute</typeparam>
            <param name="predicte">Only invoke the method if this function returns true</param>
        </member>
        <member name="M:AngeliA.Util.InvokeAllStaticMethodWithAttribute``1(System.Comparison{System.Collections.Generic.KeyValuePair{System.Reflection.MethodInfo,``0}})">
            <summary>
            Invoke all static method from all classes that with given attribute attached on
            </summary>
            <typeparam name="A">Type of the attribute</typeparam>
            <param name="comparison">Sort the list with this cmoparison</param>
        </member>
        <member name="M:AngeliA.Util.InvokeStaticMethod(System.Type,System.String,System.Object[])">
            <summary>
            Invoke a static method from given name and type
            </summary>
            <param name="type">Type of the class that holds the method</param>
            <param name="methodName">Name of the static method</param>
            <param name="param">Param of the static method</param>
            <returns>Return value of the static method</returns>
        </member>
        <member name="M:AngeliA.Util.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invoke a method from given name and type
            </summary>
            <param name="obj">Instance that holds the method</param>
            <param name="methodName">Name of the method</param>
            <param name="param">Param of the method</param>
            <returns>Return value of the method</returns>
        </member>
        <member name="M:AngeliA.Util.GetStaticPropertyValue(System.Type,System.String)">
            <summary>
            Get current value of a static property
            </summary>
            <param name="type">Type of the class that holds the property</param>
            <param name="name">Name of the property</param>
            <returns>Value of the property</returns>
        </member>
        <member name="M:AngeliA.Util.GetPropertyValue(System.Object,System.String)">
            <summary>
            Get current value of a property
            </summary>
            <param name="target">Instance that holds the property</param>
            <param name="name">Name of the property</param>
            <returns>Value of the property</returns>
        </member>
        <member name="M:AngeliA.Util.GetProperty(System.Type,System.String)">
            <summary>
            Get PropertyInfo of the given type and name
            </summary>
            <param name="type">Type of class that holds the property</param>
            <param name="name">Name of the property</param>
            <returns>Instance of the PropertyInfo</returns>
        </member>
        <member name="M:AngeliA.Util.SetStaticPropertyValue(System.Type,System.String,System.Object)">
            <summary>
            Set current value of a static property
            </summary>
            <param name="type">Type of class that holds the property</param>
            <param name="name">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:AngeliA.Util.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Set current value of a property
            </summary>
            <param name="target">Instance that holds the property</param>
            <param name="name">Name of the property</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:AngeliA.Util.GetFieldValue(System.Object,System.String)">
            <summary>
            Get value of the given field
            </summary>
            <param name="target">Instance that holds the field</param>
            <param name="fieldName">Name of the field</param>
            <returns>Value of the field</returns>
        </member>
        <member name="M:AngeliA.Util.GetField(System.Type,System.String)">
            <summary>
             Get FieldInfo of the given type and name
            </summary>
            <param name="type">Type of class that holds the field</param>
            <param name="name">Name of the field</param>
            <returns>Instance of the FieldInfo</returns>
        </member>
        <member name="M:AngeliA.Util.SetFieldValue(System.Object,System.String,System.Object)">
            <summary>
            Set value of the given field
            </summary>
            <param name="target">Instance that holds the field</param>
            <param name="name">Name of the field</param>
            <param name="value">Value of the field</param>
        </member>
        <member name="M:AngeliA.Util.GetStaticFieldValue(System.Type,System.String)">
            <summary>
            Get value of the given static field
            </summary>
            <param name="type">Type of class that holds the field</param>
            <param name="name">Name of the field</param>
            <returns>Value of the field</returns>
        </member>
        <member name="M:AngeliA.Util.SetStaticFieldValue(System.Type,System.String,System.Object)">
            <summary>
            Set value of the given static field
            </summary>
            <param name="type">Type of class that holds the field</param>
            <param name="name">Name of the field</param>
            <param name="value">Value of the field</param>
        </member>
        <member name="M:AngeliA.Util.GetFieldType(System.Object,System.String)">
            <summary>
            Get what type of data the given field holds
            </summary>
            <param name="target">Instance that holds the field</param>
            <param name="name">Name of the field</param>
            <returns>System.Type that this field holds</returns>
        </member>
        <member name="M:AngeliA.Util.GetStaticFieldType(System.Type,System.String)">
            <summary>
            Get what type of data the given static field holds
            </summary>
            <param name="type">Type of class that holds the field</param>
            <param name="name">Name of the field</param>
            <returns>System.Type that this field holds</returns>
        </member>
        <member name="T:AngeliA.BlockColor">
            <summary>
            Element block that set the color tint of the overlapping level block
            </summary>
        </member>
        <member name="P:AngeliA.BlockColor.Color">
            <summary>
            Target color tint
            </summary>
        </member>
        <member name="T:AngeliA.BlockColoringSystem">
            <summary>
            Core system for the level block tint from element
            </summary>
        </member>
        <member name="M:AngeliA.BlockColoringSystem.TryGetColor(System.Int32,AngeliA.Color32@)">
            <summary>
            Get the tint color from given element ID
            </summary>
        </member>
        <member name="T:AngeliA.IBlockSquad">
            <summary>
            Instance that provide map block data from unit position
            </summary>
        </member>
        <member name="M:AngeliA.IBlockSquad.WorldExists(AngeliA.Int3)">
            <summary>
            True if world data exists at given position
            </summary>
            <param name="worldPos">Position in world space (1 world space = 256 * 128 global space)</param>
        </member>
        <member name="M:AngeliA.IBlockSquad.GetBlockAt(System.Int32,System.Int32,System.Int32,AngeliA.BlockType)">
            <summary>
            Get block ID at given unit position
            </summary>
            <param name="unitX">X position in unit space</param>
            <param name="unitY">Y position in unit space</param>
            <param name="z">Z position</param>
            <param name="type">Type of the block</param>
        </member>
        <member name="M:AngeliA.IBlockSquad.GetAllBlocksAt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get all blocks ID at given unit position
            </summary>
            <param name="unitX">X position in unit space</param>
            <param name="unitY">Y position in unit space</param>
            <param name="z">Z position</param>
        </member>
        <member name="M:AngeliA.IBlockSquad.SetBlockAt(System.Int32,System.Int32,System.Int32,AngeliA.BlockType,System.Int32)">
            <summary>
            Set block ID at given unit position
            </summary>
            <param name="unitX">X position in unit space</param>
            <param name="unitY">Y position in unit space</param>
            <param name="z">Z position</param>
            <param name="type">Type of the block</param>
            <param name="newID">Block ID</param>
        </member>
        <member name="M:AngeliA.IBlockSquad.FindBlock(System.Int32,System.Int32,System.Int32,System.Int32,AngeliA.Direction4,AngeliA.BlockType,System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Get block position from given unit position to given direction
            </summary>
            <param name="id">Block ID to find</param>
            <param name="unitX">Start unit position X</param>
            <param name="unitY">Start unit position Y</param>
            <param name="unitZ">Position Z</param>
            <param name="direction">Searching direction</param>
            <param name="type">Type of the target block</param>
            <param name="resultX">Position X in unit space</param>
            <param name="resultY">Position Y in unit space</param>
            <param name="maxDistance">Limitation of searching distance (Default 128)</param>
            <returns>True if the block founded</returns>
        </member>
        <member name="T:AngeliA.BlockType">
            <summary>
            Type of blocks in map
            </summary>
        </member>
        <member name="F:AngeliA.BlockType.Entity">
            <summary>
            Dynamic object with logic attached
            </summary>
        </member>
        <member name="F:AngeliA.BlockType.Level">
            <summary>
            Static block with collider
            </summary>
        </member>
        <member name="F:AngeliA.BlockType.Background">
            <summary>
            Static block without collider
            </summary>
        </member>
        <member name="F:AngeliA.BlockType.Element">
            <summary>
            Internal IMapItem that do not spawn into stage
            </summary>
        </member>
        <member name="T:AngeliA.World">
            <summary>
            Instance of a 128x128 map data
            </summary>
        </member>
        <member name="P:AngeliA.World.WorldPosition">
            <summary>
            Position for the bottom-left of the world in world space (1 world space = 256 * 128 global space)
            </summary>
        </member>
        <member name="P:AngeliA.World.Backgrounds">
            <summary>
            ID of all background blocks (index 0 means bottom-left, index 1 make it goes right)
            </summary>
        </member>
        <member name="P:AngeliA.World.Levels">
            <summary>
            ID of all level blocks (index 0 means bottom-left, index 1 make it goes right)
            </summary>
        </member>
        <member name="P:AngeliA.World.Entities">
            <summary>
            ID of all entity blocks (index 0 means bottom-left, index 1 make it goes right)
            </summary>
        </member>
        <member name="P:AngeliA.World.Elements">
            <summary>
            ID of all element blocks (index 0 means bottom-left, index 1 make it goes right)
            </summary>
        </member>
        <member name="M:AngeliA.World.#ctor(AngeliA.Int3)">
            <summary>
            Instance of a 128x128 map data
            </summary>
            <param name="pos">Position in world space (1 world space = 256 * 128 global space)</param>
        </member>
        <member name="M:AngeliA.World.#ctor">
            <summary>
            Instance of a 128x128 map data
            </summary>
        </member>
        <member name="M:AngeliA.World.EmptyCheck">
            <summary>
            True if the world data is empty
            </summary>
        </member>
        <member name="M:AngeliA.World.ContainsBlock(System.Int32,AngeliA.BlockType)">
            <summary>
            True if the given block ID exists inside this world
            </summary>
            <param name="blockID"></param>
            <param name="type">Type of the block</param>
        </member>
        <member name="M:AngeliA.World.Clear(System.Nullable{AngeliA.Int3})">
            <summary>
            Reset all block data inside this world data
            </summary>
            <param name="pos">Set new world position. Set to null to not clear world position</param>
        </member>
        <member name="T:AngeliA.WorldSquad">
            <summary>
            Core system that renders the level/background blocks and load the world data into stage
            </summary>
        </member>
        <member name="P:AngeliA.WorldSquad.Enable">
            <summary>
            True if the system is required
            </summary>
        </member>
        <member name="P:AngeliA.WorldSquad.SquadReady">
            <summary>
            True if the system is ready to use
            </summary>
        </member>
        <member name="P:AngeliA.WorldSquad.UseBuiltInAsFailback">
            <summary>
            True if the game copy built-in maps into user map folder.
            </summary>
        </member>
        <member name="P:AngeliA.WorldSquad.Front">
            <summary>
            Squad that handles the front side map
            </summary>
        </member>
        <member name="M:AngeliA.WorldSquad.ClearStreamWorldPool">
            <summary>
            Reset the internal world instance pool
            </summary>
        </member>
        <member name="M:AngeliA.WorldSquad.ResetStreamFailbackCopying">
            <summary>
            Make all existing user maps require reload from built-in maps without deleting the user map folder
            </summary>
        </member>
        <member name="M:AngeliA.WorldSquad.WorldExists(AngeliA.Int3)">
            <summary>
            True if world exists at given world position
            </summary>
            <param name="worldPos">In world space (1 world space = 256 * 128 global space)</param>
        </member>
        <member name="M:AngeliA.WorldSquad.GetAllBlocksAt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get all ID of blocks at given unit position
            </summary>
            <param name="unitX">Position in unit space</param>
            <param name="unitY">Position in unit space</param>
            <param name="z">Z position</param>
        </member>
        <member name="M:AngeliA.WorldSquad.GetBlockAt(System.Int32,System.Int32,AngeliA.BlockType)">
            <summary>
            Get block ID at given unit position
            </summary>
            <param name="unitX">Position in unit space</param>
            <param name="unitY">Position in unit space</param>
            <param name="type">Type of the block</param>
        </member>
        <member name="M:AngeliA.WorldSquad.GetBlockAt(System.Int32,System.Int32,System.Int32,AngeliA.BlockType)">
            <summary>
            Get block ID at given unit position
            </summary>
            <param name="unitX">Position in unit space</param>
            <param name="unitY">Position in unit space</param>
            <param name="z">Position Z</param>
            <param name="type">Type of the block</param>
        </member>
        <member name="M:AngeliA.WorldSquad.SetBlockAt(System.Int32,System.Int32,System.Int32,AngeliA.BlockType,System.Int32)">
            <summary>
            Set block ID at given unit position
            </summary>
            <param name="unitX">Position in unit space</param>
            <param name="unitY">Position in unit space</param>
            <param name="z">Position Z</param>
            <param name="type">Type of the block</param>
            <param name="newID">ID of the block</param>
        </member>
        <member name="M:AngeliA.WorldSquad.AddBlockRedirect(System.Int32,System.Int32)">
            <summary>
            Add a pair of redirect ID to make all "fromID" block rendered with "toID"
            </summary>
        </member>
        <member name="M:AngeliA.WorldSquad.RemoveBlockRedirect(System.Int32)">
            <summary>
            Remove the redirect pair
            </summary>
            <returns>True if the pair removed</returns>
        </member>
        <member name="T:AngeliA.WorldStream">
            <summary>
            Data stream that handles map data from file to instance
            </summary>
        </member>
        <member name="E:AngeliA.WorldStream.OnWorldCreated">
            <summary>
            Invoke when a world instance created
            </summary>
        </member>
        <member name="E:AngeliA.WorldStream.OnWorldLoaded">
            <summary>
            Invoke when a world instance loaded from file
            </summary>
        </member>
        <member name="E:AngeliA.WorldStream.OnWorldSaved">
            <summary>
            Invoke when a world instance saved to file
            </summary>
        </member>
        <member name="P:AngeliA.WorldStream.MapRoot">
            <summary>
            Path of the map root folder 
            </summary>
        </member>
        <member name="P:AngeliA.WorldStream.IsDirty">
            <summary>
            True if there's unsaved block change
            </summary>
        </member>
        <member name="P:AngeliA.WorldStream.UseBuiltInAsFailback">
            <summary>
            True if load file from built-in map folder when no map founded in MapRoot
            </summary>
        </member>
        <member name="M:AngeliA.WorldStream.GetOrCreateStreamFromPool(System.String)">
            <summary>
            Get an instance of WorldStream. Create new one if not exists in pool.
            </summary>
            <param name="mapFolder">Root path of the map folder</param>
        </member>
        <member name="M:AngeliA.WorldStream.#ctor(System.String)">
            <summary>
            Data stream that handles map data from file to instance
            </summary>
            <param name="mapFolder">Root path of the map folder</param>
        </member>
        <member name="M:AngeliA.WorldStream.SaveAllDirty">
            <summary>
            Save all block changes into file
            </summary>
        </member>
        <member name="M:AngeliA.WorldStream.DiscardAllChanges(System.Boolean)">
            <summary>
            Load changed map from file
            </summary>
            <param name="forceDiscard">True if perform this action no matter stream is dirty of not</param>
        </member>
        <member name="M:AngeliA.WorldStream.ClearWorldPool">
            <summary>
            Clear internal data pool
            </summary>
        </member>
        <member name="M:AngeliA.WorldStream.ResetFailbackCopying">
            <summary>
            Make all existing user maps require reload from built-in maps without deleting the user map folder
            </summary>
        </member>
        <member name="M:AngeliA.WorldStream.WorldExists(AngeliA.Int3)">
            <summary>
            True if world exists at given world position
            </summary>
            <param name="worldPos">In world space (1 world space = 256 * 128 global space)</param>
        </member>
        <member name="M:AngeliA.WorldStream.TryGetWorld(System.Int32,System.Int32,System.Int32,AngeliA.World@)">
            <summary>
            Get world instance on given world position
            </summary>
            <param name="worldX">Position of world bottom-left in world space (1 world space = 256 * 128 global space)</param>
            <param name="worldY">Position of world bottom-left in world space (1 world space = 256 * 128 global space)</param>
            <param name="worldZ">Position Z</param>
            <param name="world">Result world instance</param>
            <returns>True if world founded</returns>
        </member>
        <member name="M:AngeliA.WorldStream.TryGetWorld(AngeliA.Int3,AngeliA.World@)">
            <inheritdoc cref="M:AngeliA.WorldStream.TryGetWorld(System.Int32,System.Int32,System.Int32,AngeliA.World@)"/>
        </member>
        <member name="M:AngeliA.WorldStream.GetOrCreateWorld(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get world instance on given world position. Create new one if not found.
            </summary>
            <param name="worldX">Position of world bottom-left in world space (1 world space = 256 * 128 global space)</param>
            <param name="worldY">Position of world bottom-left in world space (1 world space = 256 * 128 global space)</param>
            <param name="worldZ">Position Z</param>
            <returns>Result world instance</returns>
        </member>
        <member name="M:AngeliA.WorldStream.GetBlockAt(System.Int32,System.Int32,System.Int32,AngeliA.BlockType)">
            <summary>
            Get block ID at given unit position
            </summary>
            <param name="unitX">Position in unit space</param>
            <param name="unitY">Position in unit space</param>
            <param name="z">Position Z</param>
            <param name="type">Type of the block</param>
        </member>
        <member name="M:AngeliA.WorldStream.GetAllBlocksAt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get all ID of blocks at given unit position
            </summary>
            <param name="unitX">Position in unit space</param>
            <param name="unitY">Position in unit space</param>
            <param name="z">Z position</param>
        </member>
        <member name="M:AngeliA.WorldStream.SetBlockAt(System.Int32,System.Int32,System.Int32,AngeliA.BlockType,System.Int32)">
            <summary>
            Set block ID at given unit position
            </summary>
            <param name="unitX">Position in unit space</param>
            <param name="unitY">Position in unit space</param>
            <param name="z">Position Z</param>
            <param name="type">Type of the block</param>
            <param name="value">ID of the block</param>
        </member>
    </members>
</doc>

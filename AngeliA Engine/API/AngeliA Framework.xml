<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AngeliA Framework</name>
    </assembly>
    <members>
        <member name="T:AngeliA.ToolApplicationAttribute">
            <summary>
            If application with current assembly should be treat as a "tool" rather than "game"
            </summary>
        </member>
        <member name="T:AngeliA.IgnoreArtworkPixelsAttribute">
            <summary>
            Current application do not load pixel data from sheet
            </summary>
        </member>
        <member name="T:AngeliA.DefaultKeyboardGamekeyAttribute">
            <summary>
            Default keyboard binding for the given gamekey
            </summary>
            <param name="gamekey"></param>
            <param name="inputKey"></param>
        </member>
        <member name="M:AngeliA.DefaultKeyboardGamekeyAttribute.#ctor(AngeliA.Gamekey,AngeliA.KeyboardKey)">
            <summary>
            Default keyboard binding for the given gamekey
            </summary>
            <param name="gamekey"></param>
            <param name="inputKey"></param>
        </member>
        <member name="T:AngeliA.DefaultGamepadGamekeyAttribute">
            <summary>
            Default gamepad binding for the given gamekey
            </summary>
            <param name="gamekey"></param>
            <param name="inputKey"></param>
        </member>
        <member name="M:AngeliA.DefaultGamepadGamekeyAttribute.#ctor(AngeliA.Gamekey,AngeliA.GamepadKey)">
            <summary>
            Default gamepad binding for the given gamekey
            </summary>
            <param name="gamekey"></param>
            <param name="inputKey"></param>
        </member>
        <member name="T:AngeliA.EntityLayerCapacityAttribute">
            <summary>
            Max entity count for the layer
            </summary>
            <param name="layer"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:AngeliA.EntityLayerCapacityAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Max entity count for the layer
            </summary>
            <param name="layer"></param>
            <param name="capacity"></param>
        </member>
        <member name="T:AngeliA.RendererLayerCapacityAttribute">
            <summary>
            Max rendering cell count for the layer
            </summary>
            <param name="layer"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:AngeliA.RendererLayerCapacityAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Max rendering cell count for the layer
            </summary>
            <param name="layer"></param>
            <param name="capacity"></param>
        </member>
        <member name="T:AngeliA.GlobalGravityAttribute">
            <summary>
            The gravity value applys on all rigidbody
            </summary>
            <param name="gravity"></param>
        </member>
        <member name="M:AngeliA.GlobalGravityAttribute.#ctor(System.Int32)">
            <summary>
            The gravity value applys on all rigidbody
            </summary>
            <param name="gravity"></param>
        </member>
        <member name="T:AngeliA.EnablePlayerSystemAttribute">
            <summary>
            The current application use player system or not
            </summary>
        </member>
        <member name="T:AngeliA.BodySetAttribute">
            <summary>
            Treat specified sprites as bodyset for pose-characters
            </summary>
            <param name="name">The name of the bodyset</param>
        </member>
        <member name="M:AngeliA.BodySetAttribute.#ctor(System.String)">
            <summary>
            Treat specified sprites as bodyset for pose-characters
            </summary>
            <param name="name">The name of the bodyset</param>
        </member>
        <member name="T:AngeliA.CharacterAttribute">
            <summary>
            Attribute for character class
            </summary>
        </member>
        <member name="T:AngeliA.CharacterAttribute.DefaultSelectedPlayerAttribute">
            <summary>
            Make the character as default selected player
            </summary>
            <param name="priority"></param>
        </member>
        <member name="M:AngeliA.CharacterAttribute.DefaultSelectedPlayerAttribute.#ctor(System.Int32)">
            <summary>
            Make the character as default selected player
            </summary>
            <param name="priority"></param>
        </member>
        <member name="T:AngeliA.EntityAttribute">
            <summary>
            Attribute for entities
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.ExcludeInMapEditorAttribute">
            <summary>
            Do not show this entity inside the palette panel of map editor.
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.MapEditorGroupAttribute">
            <summary>
            Which map editor palette group should this entity in 
            </summary>
            <param name="groupName"></param>
            <param name="order"></param>
        </member>
        <member name="M:AngeliA.EntityAttribute.MapEditorGroupAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Which map editor palette group should this entity in 
            </summary>
            <param name="groupName"></param>
            <param name="order"></param>
        </member>
        <member name="T:AngeliA.EntityAttribute.LayerAttribute">
            <summary>
            Which layer should this entity spawn inside.
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:AngeliA.EntityAttribute.LayerAttribute.#ctor(System.Int32)">
            <summary>
            Which layer should this entity spawn inside.
            </summary>
            <param name="layer"></param>
        </member>
        <member name="T:AngeliA.EntityAttribute.CapacityAttribute">
            <summary>
            Spawn limit count of this entity 
            </summary>
            <param name="capacity"></param>
            <param name="preSpawn">Create this many instance of the entity when game initialize</param>
        </member>
        <member name="M:AngeliA.EntityAttribute.CapacityAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Spawn limit count of this entity 
            </summary>
            <param name="capacity"></param>
            <param name="preSpawn">Create this many instance of the entity when game initialize</param>
        </member>
        <member name="T:AngeliA.EntityAttribute.DontDespawnOutOfRangeAttribute">
            <summary>
            Do not despawn this entity when it's out of view rect
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.DontSpawnFromWorld">
            <summary>
            Do not spawn this entity when it's painted into the map
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.UpdateOutOfRangeAttribute">
            <summary>
            This entity will update when it's outside view rect
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.DontDrawBehindAttribute">
            <summary>
            This entity will not display on the behind layer
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.DontDestroyOnZChangedAttribute">
            <summary>
            This entity do not despawn when player enter another map layer
            </summary>
        </member>
        <member name="T:AngeliA.EntityAttribute.StageOrderAttribute">
            <summary>
            The order in which this entity gets updated in it's layer
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:AngeliA.EntityAttribute.StageOrderAttribute.#ctor(System.Int32)">
            <summary>
            The order in which this entity gets updated in it's layer
            </summary>
            <param name="order"></param>
        </member>
        <member name="T:AngeliA.EntityAttribute.RepositionWhenInactiveAttribute">
            <summary>
            When the entity despawn, reset the position in map. So next time it will be load from the position where it last appeared
            </summary>
            <param name="requireReposition">Disable reposition by setting this to False</param>
        </member>
        <member name="M:AngeliA.EntityAttribute.RepositionWhenInactiveAttribute.#ctor(System.Boolean)">
            <summary>
            When the entity despawn, reset the position in map. So next time it will be load from the position where it last appeared
            </summary>
            <param name="requireReposition">Disable reposition by setting this to False</param>
        </member>
        <member name="T:AngeliA.EntityAttribute.SpawnWithCheatCodeAttribute">
            <summary>
            Player can use "Spawn---" to spawn this entity to stage.
            </summary>
        </member>
        <member name="T:AngeliA.ItemDropAttribute`1">
            <summary>
            Register item drop for the entity, use ItemSystem.DropItemFor(Entity) to perform the item drop.
            </summary>
            <typeparam name="I">Which item does it drops</typeparam>
            <param name="dropChance">Probability of dropping this item. 0 means 0%, 1000 means 100%</param>
            <param name="dropCount">How many items does it drop at once</param>
        </member>
        <member name="M:AngeliA.ItemDropAttribute`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Register item drop for the entity, use ItemSystem.DropItemFor(Entity) to perform the item drop.
            </summary>
            <typeparam name="I">Which item does it drops</typeparam>
            <param name="dropChance">Probability of dropping this item. 0 means 0%, 1000 means 100%</param>
            <param name="dropCount">How many items does it drop at once</param>
        </member>
        <member name="T:AngeliA.ItemDropAttribute">
            <inheritdoc cref="T:AngeliA.ItemDropAttribute`1" />
        </member>
        <member name="M:AngeliA.ItemDropAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="T:AngeliA.ItemDropAttribute`1" />
        </member>
        <member name="T:AngeliA.ItemCombinationAttribute">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.ItemCombinationAttribute.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.ItemCombinationAttribute`1">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.ItemCombinationAttribute`1.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.ItemCombinationAttribute`2">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.ItemCombinationAttribute`2.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.ItemCombinationAttribute`3">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.ItemCombinationAttribute`3.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.ItemCombinationAttribute`4">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.ItemCombinationAttribute`4.#ctor(System.Int32,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.GlobalItemCombinationAttribute">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.GlobalItemCombinationAttribute.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.GlobalItemCombinationAttribute`1">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.GlobalItemCombinationAttribute`1.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.GlobalItemCombinationAttribute`2">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.GlobalItemCombinationAttribute`2.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.GlobalItemCombinationAttribute`3">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.GlobalItemCombinationAttribute`3.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.GlobalItemCombinationAttribute`4">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="M:AngeliA.GlobalItemCombinationAttribute`4.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:AngeliA.BasicItemCombinationAttribute" />
        </member>
        <member name="T:AngeliA.BasicGlobalItemCombinationAttribute">
            <summary></summary>
        </member>
        <member name="M:AngeliA.BasicGlobalItemCombinationAttribute.#ctor(AngeliA.ItemCombinationParam,AngeliA.ItemCombinationParam,AngeliA.ItemCombinationParam,AngeliA.ItemCombinationParam,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary></summary>
        </member>
        <member name="T:AngeliA.BasicItemCombinationAttribute">
            <summary>
            Define a item combination to craft the item.
            </summary>
            <param name="count">How many item does it craft at once</param>
            <param name="keepId0">Do not consume this item</param>
            <param name="keepId1">Do not consume this item</param>
            <param name="keepId2">Do not consume this item</param>
            <param name="keepId3">Do not consume this item</param>
            <param name="extraA">Use this if the item is not based on class</param>
            <param name="extraB">Use this if the item is not based on class</param>
            <param name="extraC">Use this if the item is not based on class</param>
            <param name="extraD">Use this if the item is not based on class</param>
            <param name="itemA">An item required to craft the result item</param>
            <param name="itemB">An item required to craft the result item</param>
            <param name="itemC">An item required to craft the result item</param>
            <param name="itemD">An item required to craft the result item</param>
        </member>
        <member name="M:AngeliA.BasicItemCombinationAttribute.#ctor(AngeliA.ItemCombinationParam,AngeliA.ItemCombinationParam,AngeliA.ItemCombinationParam,AngeliA.ItemCombinationParam,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Define a item combination to craft the item.
            </summary>
            <param name="count">How many item does it craft at once</param>
            <param name="keepId0">Do not consume this item</param>
            <param name="keepId1">Do not consume this item</param>
            <param name="keepId2">Do not consume this item</param>
            <param name="keepId3">Do not consume this item</param>
            <param name="extraA">Use this if the item is not based on class</param>
            <param name="extraB">Use this if the item is not based on class</param>
            <param name="extraC">Use this if the item is not based on class</param>
            <param name="extraD">Use this if the item is not based on class</param>
            <param name="itemA">An item required to craft the result item</param>
            <param name="itemB">An item required to craft the result item</param>
            <param name="itemC">An item required to craft the result item</param>
            <param name="itemD">An item required to craft the result item</param>
        </member>
        <member name="T:AngeliA.ItemCombinationParam">
            <summary></summary>
        </member>
        <member name="T:AngeliA.NoItemCombinationAttribute">
            <summary>
            Indicates to the system that this item does not require crafting combination
            </summary>
        </member>
        <member name="T:AngeliA.OnGameInitializeAttribute">
            <summary>
            The function will be called when game initialize.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameInitializeAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when game initialize.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameInitializeLaterAttribute">
            <summary>
            The function will be called when game initialize but after all [OnGameInitialize] functions already called
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameInitializeLaterAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when game initialize but after all [OnGameInitialize] functions already called
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.BeforeSavingSlotChanged">
            <summary>
            The function will be called before user change the saving slot. Universe.BuiltIn.CurrentSavingSlot is still the old value when this function is called.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.BeforeSavingSlotChanged.#ctor(System.Int32)">
            <summary>
            The function will be called before user change the saving slot. Universe.BuiltIn.CurrentSavingSlot is still the old value when this function is called.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnSavingSlotChanged">
            <summary>
            The function will be called after user change the saving slot. Universe.BuiltIn.CurrentSavingSlot is the new value when this function is called.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnSavingSlotChanged.#ctor(System.Int32)">
            <summary>
            The function will be called after user change the saving slot. Universe.BuiltIn.CurrentSavingSlot is the new value when this function is called.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameUpdateAttribute">
            <summary>
            The function will be called every time game update (60 times per second)
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameUpdateAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called every time game update (60 times per second)
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameUpdateLaterAttribute">
            <summary>
            The function will be called every time game update (60 times per second), but after all [OnGameUpdate] functions already called.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameUpdateLaterAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called every time game update (60 times per second), but after all [OnGameUpdate] functions already called.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameUpdatePauselessAttribute">
            <summary>
            The function will be called every time game update (60 times per second), even when the game is paused.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameUpdatePauselessAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called every time game update (60 times per second), even when the game is paused.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameRestartAttribute">
            <summary>
            The function will be called when game restart.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameRestartAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when game restart.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameTryingToQuitAttribute">
            <summary>
            The function will be called when player try to quit the game. Return false will stop the application from quiting.
            </summary>
            <example>internal static bool ExampleFunction () => true; </example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameTryingToQuitAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when player try to quit the game. Return false will stop the application from quiting.
            </summary>
            <example>internal static bool ExampleFunction () => true; </example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameQuittingAttribute">
            <summary>
            The function will be called before the application actually quit.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="M:AngeliA.OnGameQuittingAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called before the application actually quit.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
            <param name="order">Function with smaller order will be called earlier</param>
        </member>
        <member name="T:AngeliA.OnGameFocusedAttribute">
            <summary>
            The function will be called when the application window regain focus.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.OnGameLostFocusAttribute">
            <summary>
            The function will be called when the application window lost focus.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.OnWindowSizeChangedAttribute">
            <summary>
            The function will be called when user change the size of the application window
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.OnRemoteSettingChanged_IntID_IntDataAttribute">
            <summary>
            The function will be called when engine send remote message to rigged game
            </summary>
            <example>internal static void ExampleFunction (int id, int data) { }</example>
        </member>
        <member name="M:AngeliA.OnRemoteSettingChanged_IntID_IntDataAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when engine send remote message to rigged game
            </summary>
            <example>internal static void ExampleFunction (int id, int data) { }</example>
        </member>
        <member name="T:AngeliA.OnFileDropped_StringPathAttribute">
            <summary>
            The function will be called when user drag and drop a file into the application window
            </summary>
            <example>internal static void ExampleFunction (string filePath) { }</example>
        </member>
        <member name="T:AngeliA.OnMainSheetReloadAttribute">
            <summary>
            The function will be called when artwork sheet for rendering loaded from file
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.OnViewZChangedAttribute">
            <summary>
            The function will be called when player change the map layer
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.BeforeLayerFrameUpdate_IntLayerAttribute">
            <summary>
            The function will be called before rendering layer update
            </summary>
            <example>internal static void ExampleFunction (int layerIndex) { }</example>
        </member>
        <member name="T:AngeliA.AfterLayerFrameUpdate_IntLayerAttribute">
            <summary>
            The function will be called after rendering layer update 
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.BeforeFirstUpdateAttribute">
            <summary>
            The function will be called before any entity.FirstUpdate is called
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.BeforeBeforeUpdateAttribute">
            <summary>
            The function will be called before any entity.BeforeUpdate is called 
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.BeforeUpdateUpdateAttribute">
            <summary>
            The function will be called before any entity.Update is called 
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.BeforeLateUpdateAttribute">
            <summary>
            The function will be called before any entity.LateUpdate is called 
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.AfterLateUpdateAttribute">
            <summary>
            The function will be called after all entity.LateUpdate is called 
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.BeforeLevelRenderedAttribute">
            <summary>
            The function will be called before world squad rendering any level blocks for the current frame
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="M:AngeliA.BeforeLevelRenderedAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called before world squad rendering any level blocks for the current frame
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.AfterLevelRenderedAttribute">
            <summary>
            The function will be called after world squad render all level blocks for the current frame 
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="M:AngeliA.AfterLevelRenderedAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called after world squad render all level blocks for the current frame 
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.OnWorldCreatedBySquad_WorldAttribute">
            <summary>
            The function will be called when a world instance is created by world squad
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="M:AngeliA.OnWorldCreatedBySquad_WorldAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when a world instance is created by world squad
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.OnWorldLoadedBySquad_WorldAttribute">
            <summary>
            The function will be called when a world instance is loaded by world squad 
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="M:AngeliA.OnWorldLoadedBySquad_WorldAttribute.#ctor(System.Int32)">
            <summary>
            The function will be called when a world instance is loaded by world squad 
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.OnWorldSavedByMapEditor_WorldAttribute">
            <summary>
            The function will be called when a world instance is saved to file by the world squad
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.OnMapEditorModeChange_ModeAttribute">
            <summary>
            The function will be called when user change map editor editing mode
            </summary>
            <example>internal static void ExampleFunction (OnMapEditorModeChange_ModeAttribute.Mode mode) { }</example>
        </member>
        <member name="T:AngeliA.OnMapEditorModeChange_ModeAttribute.Mode">
            <summary></summary>
        </member>
        <member name="F:AngeliA.OnMapEditorModeChange_ModeAttribute.Mode.EnterPlayMode">
            <summary>
            Edit mode to play mode. After map editor internal logic is done
            </summary>
        </member>
        <member name="F:AngeliA.OnMapEditorModeChange_ModeAttribute.Mode.ExitPlayMode">
            <summary>
            Play mode to edit mode. Before map editor internal logic is done
            </summary>
        </member>
        <member name="F:AngeliA.OnMapEditorModeChange_ModeAttribute.Mode.EnterEditMode">
            <summary>
            Play mode to edit mode. After map editor internal logic is done
            </summary>
        </member>
        <member name="F:AngeliA.OnMapEditorModeChange_ModeAttribute.Mode.ExitEditMode">
            <summary>
            Edit mode to play mode. Before map editor internal logic is done
            </summary>
        </member>
        <member name="T:AngeliA.OnLanguageChangedAttribute">
            <summary>
            The function will be called when user change game display language. Language.CurrentLanguage is already set to new value when this function is called.
            </summary>
            <example>internal static void ExampleFunction () { }</example>
        </member>
        <member name="T:AngeliA.CheatCodeAttribute">
            <summary>
            The function will be called when user perform the given cheat code. Cheat code can be perform like those in NES games.
            </summary>
            <example>internal static void ExampleFunction (string code) { }</example>
        </member>
        <member name="M:AngeliA.CheatCodeAttribute.#ctor(System.String)">
            <summary>
            The function will be called when user perform the given cheat code. Cheat code can be perform like those in NES games.
            </summary>
            <example>internal static void ExampleFunction (string code) { }</example>
        </member>
        <member name="T:AngeliA.OnCheatPerformed_StringCodeAttribute">
            <summary>
            The function will be called when user performed any cheat code. Cheat code can be perform like those in NES games.
            </summary>
            <example>internal static void ExampleFunction (string code) { }</example>
        </member>
        <member name="T:AngeliA.OnItemCollected_Entity_Int2Pos_IntItemID_IntItemCountAttribute">
            <summary>
            The function will be called when a character collect an item
            </summary>
            <example>internal static void ExampleFunction (Entity holder, Int2 pos, int itemID, int itemCount) { }</example>
        </member>
        <member name="T:AngeliA.OnItemLost_Character_IntItemIDAttribute">
            <summary>
            The function will be called when a character lost an item
            </summary>
            <example>internal static void ExampleFunction (Character holder, int itemID) { }</example>
        </member>
        <member name="T:AngeliA.OnItemError_Entity_Int2Pos_IntIconID">
            <summary>
            The function will be called when something wrong about an item (like when guns out of ammo)
            </summary>
            <example>internal static void ExampleFunction (Entity holder, Int2 pos, int iconID) { }</example>
        </member>
        <member name="T:AngeliA.OnItemDamage_Character_IntItemBefore_IntItemAfterAttribute">
            <summary>
            The function will be called when an item is damaged into another item
            </summary>
            <example>internal static void ExampleFunction (Character holder, int itemIdBefore, int itemIdAfter) { }</example>
        </member>
        <member name="T:AngeliA.OnItemUnlocked_IntItemIDAttribute">
            <summary>
            The function will be called when an item is unlocked by player
            </summary>
            <example>internal static void ExampleFunction (int itemID) { }</example>
        </member>
        <member name="T:AngeliA.OnCharacterFootStepped_Entity">
            <summary>
            The function will be called when a character makes a foot step on running
            </summary>
            <example>internal static void ExampleFunction (Entity character) { }</example>
        </member>
        <member name="T:AngeliA.OnCharacterSleeping_Entity">
            <summary>
            The function will be called when a character is sleeping
            </summary>
            <example>internal static void ExampleFunction (Entity character) { }</example>
        </member>
        <member name="T:AngeliA.OnCharacterJump_Entity">
            <summary>
            The function will be called when a character jumps
            </summary>
            <example>internal static void ExampleFunction (Entity character) { }</example>
        </member>
        <member name="T:AngeliA.OnCharacterPound_Entity">
            <summary>
            The function will be called when a character ground pound
            </summary>
            <example>internal static void ExampleFunction (Entity character) { }</example>
        </member>
        <member name="T:AngeliA.OnCharacterFly_Entity">
            <summary>
            The function will be called when a character fly
            </summary>
            <example>internal static void ExampleFunction (Entity character) { }</example>
        </member>
        <member name="T:AngeliA.OnCharacterSlideStepped_Entity">
            <summary>
            The function will be called when a character makes a step when sliding
            </summary>
            <example>internal static void ExampleFunction (Entity character) { }</example>
        </member>
        <member name="T:AngeliA.OnCharacterPassOut_Entity">
            <summary>
            The function will be called when a character pass out
            </summary>
            <example>internal static void ExampleFunction (Entity character) { }</example>
        </member>
        <member name="T:AngeliA.OnCharacterTeleport_Entity">
            <summary>
            The function will be called when a character teleport
            </summary>
            <example>internal static void ExampleFunction (Entity character) { }</example>
        </member>
        <member name="T:AngeliA.OnCharacterCrash_Entity">
            <summary>
            The function will be called when a character crash
            </summary>
            <example>internal static void ExampleFunction (Entity character) { }</example>
        </member>
        <member name="T:AngeliA.OnObjectBreak_IntSpriteID_IRectAttribute">
            <summary>
            The function will be called when an object break
            </summary>
            <example>internal static void ExampleFunction (int spriteID, IRect rectPosition) { }</example>
        </member>
        <member name="T:AngeliA.OnObjectFreeFall_IntSpriteID_Int2Pos_IntRot_BoolFlip_Int2Velocity_IntRotSpeed_IntGravityAttribute">
            <summary>
            The function will be called when an object start to free fall
            </summary>
            <example>internal static void ExampleFunction (int spriteID, Int2 pos, int startRotation, bool flip, Int2 velocity, int rotationSpeed, int gravity) { }</example>
        </member>
        <member name="T:AngeliA.OnBlockPicked_IntSpriteID_IRectAttribute">
            <summary>
            The function will be called when a map block has been picked
            </summary>
            <example>internal static void ExampleFunction (int spriteID, IRect rectPosition) { }</example>
        </member>
        <member name="T:AngeliA.OnFallIntoWater_Rigidbody_EntityAttribute">
            <summary>
            The function will be called when a rigidbody fall into water
            </summary>
            <example>internal static void ExampleFunction (Rigidbody rig, Entity water) { }</example>
        </member>
        <member name="T:AngeliA.OnCameOutOfWater_Rigidbody_EntityAttribute">
            <summary>
            The function will be called when a rigidbody came out of water
            </summary>
            <example>internal static void ExampleFunction (Rigidbody rig, Entity water) { }</example>
        </member>
        <member name="T:AngeliA.OnDealDamage_Damage_IDamageReceiver">
            <summary>
            The function will be called when something deal damage to a damage-receiver
            </summary>
            <example>internal static void ExampleFunction (Damage damage, IDamageReceiver receiver) { }</example>
        </member>
        <member name="T:AngeliA.OnBulletHitEnvironment_Bullet">
            <summary>
            The function will be called when a bullet hit environment (something not an IDamageReceiver)
            </summary>
            <example>internal static void ExampleFunction (Bullet bullet) { }</example>
        </member>
        <member name="T:AngeliA.OnTransferArrivedAttribute_IntEntityID_Int3UnitPos_ObjectData">
            <summary>
            The function will be called when message from TransferSystem.StartTransfer() arrived
            </summary>
            <example>internal static void ExampleFunction (int receiverID, Int3 unitPosition, object userData) { }</example>
        </member>
        <member name="T:AngeliA.OnTransferPassAttribute_Int3UnitPos_ObjectData">
            <summary>
            The function will be called when message from TransferSystem.StartTransfer() pass through
            </summary>
            <example>internal static void ExampleFunction (Int3 unitPos, object userData) { }</example>
        </member>
        <member name="T:AngeliA.CircuitOperate_Int3UnitPos_IntStamp_Direction5From">
            <summary>
            The function will be called when CircuitSystem triggers the entity that holds this function
            </summary>
            <example>internal static void ExampleFunction (Int3 unitPos, int stamp, Direction5 from) { }</example>
        </member>
        <member name="T:AngeliA.OnCircuitWireActived_Int3UnitPosAttribute">
            <summary>
            The function will be called when CircuitSystem's electric current pass through
            </summary>
            <example>internal static void ExampleFunction (Int3 unitPos) { }</example>
        </member>
        <member name="T:AngeliA.EventAttribute">
            <summary>
            Attribute for link all static methods with a System.Action. When the action is invoked, all methods get called.
            </summary>
        </member>
        <member name="M:AngeliA.EventAttribute.#ctor(System.Int32)">
            <summary>
            Attribute for link all static methods with a System.Action. When the action is invoked, all methods get called.
            </summary>
        </member>
        <member name="F:AngeliA.PhysicsMask.ENTITY">
            <summary>
            ENVIRONMENT | CHARACTER
            </summary>
        </member>
        <member name="F:AngeliA.PhysicsMask.DYNAMIC">
            <summary>
            ENVIRONMENT | ITEM | CHARACTER
            </summary>
        </member>
        <member name="F:AngeliA.PhysicsMask.SOLID">
            <summary>
            LEVEL | ENVIRONMENT | CHARACTER
            </summary>
        </member>
        <member name="F:AngeliA.PhysicsMask.MAP">
            <summary>
            LEVEL | ENVIRONMENT
            </summary>
        </member>
        <member name="M:AngeliA.Inventory.AddItemAt(System.Int32,System.Int32,System.Int32)">
            <returns>How many items has been added. Return 0 means no item added. Return "count" means all items added.</returns>
        </member>
        <member name="M:AngeliA.Inventory.FindAndAddItem(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <returns>How many items has been added. Return 0 means no item added. Return "count" means all items added.</returns>
        </member>
        <member name="M:AngeliA.Inventory.TakeItemAt(System.Int32,System.Int32,System.Int32)">
            <returns>How many items has been taken. Return 0 means no item taken. Return "count" means all items taken.</returns>
        </member>
        <member name="M:AngeliA.Inventory.FindAndTakeItem(System.Int32,System.Int32,System.Int32)">
            <returns>How many items has been taken. Return 0 means no item taken. Return "count" means all items taken.</returns>
        </member>
        <member name="M:AngeliA.Inventory.CollectItem(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <returns>How many items has been collected. Return 0 means no item collected. Return "count" means all items collected.</returns>
        </member>
        <member name="M:AngeliA.Util.QuickRandom(System.Int32,System.Int32)">
            <summary>
            "min" is Included, "max" is Excluded
            </summary>
        </member>
        <member name="M:AngeliA.Util.QuickRandomWithSeed(System.Int32,System.Int32,System.Int32)">
            <summary>
            "min" is Included, "max" is Excluded
            </summary>
        </member>
        <member name="M:AngeliA.Util.QuickRandomWithSeed(System.Int64,System.Int32,System.Int32)">
            <summary>
            "min" is Included, "max" is Excluded
            </summary>
        </member>
    </members>
</doc>
